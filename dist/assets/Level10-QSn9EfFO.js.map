{"version":3,"file":"Level10-QSn9EfFO.js","sources":["../../src/tracks/levels/Level10.js"],"sourcesContent":["/**\r\n * Level 10 - Apex\r\n * The ultimate digital challenge combining all elements\r\n */\r\n\r\nexport default {\r\n  name: \"Apex\",\r\n  description: \"The pinnacle of racing mastery in digital space\",\r\n  difficulty: 5,\r\n  shader: \"matrix-rain\", // Ultimate digital challenge\r\n  skybox: \"space-deep\", // Deep space for ultimate focus\r\n  \r\n  generateTrack(addSegment) {\r\n    // Starting section\r\n    for (let i = 0; i < 15; i++) {\r\n      addSegment({\r\n        yawDelta: 0,\r\n        pitchDelta: 0,\r\n        rollDelta: 0,\r\n        isStartLine: (i === 0)\r\n      });\r\n    }\r\n    \r\n    // Immediate split path with different challenges\r\n    for (let i = 0; i < 5; i++) {\r\n      const factor = i / 5;\r\n      addSegment({\r\n        lanes: [\r\n          { offset: -10 * factor, width: 8 },\r\n          { offset: 10 * factor, width: 8 }\r\n        ]\r\n      });\r\n    }\r\n    \r\n    // Left path: jump series, Right path: tight turns\r\n    for (let i = 0; i < 30; i++) {\r\n      if (i % 10 < 4) {\r\n        // Jump sections on left path\r\n        addSegment({\r\n          lanes: [\r\n            { offset: -10, width: 8 },\r\n            { offset: 10, width: 8 }\r\n          ],\r\n          pitchDelta: Math.PI / 30\r\n        });\r\n      } else if (i % 10 < 6) {\r\n        // Gap on left, turn on right\r\n        addSegment({\r\n          lanes: [\r\n            { offset: -10, width: 8, isGap: true },\r\n            { offset: 10, width: 8 }\r\n          ],\r\n          yawDelta: Math.PI / 40\r\n        });\r\n      } else {\r\n        // Landing on left, continue turn on right\r\n        addSegment({\r\n          lanes: [\r\n            { offset: -10, width: 8 },\r\n            { offset: 10, width: 8 }\r\n          ],\r\n          pitchDelta: -Math.PI / 30,\r\n          yawDelta: Math.PI / 40\r\n        });\r\n      }\r\n    }\r\n    \r\n    // Merge paths\r\n    for (let i = 0; i < 5; i++) {\r\n      const factor = 1 - (i / 5);\r\n      addSegment({\r\n        lanes: [\r\n          { offset: -10 * factor, width: 8 },\r\n          { offset: 10 * factor, width: 8 }\r\n        ]\r\n      });\r\n    }\r\n    \r\n    // Extreme banked hairpin turn\r\n    for (let i = 0; i < 5; i++) {\r\n      addSegment({ rollDelta: Math.PI / 40 });\r\n    }\r\n    for (let i = 0; i < 40; i++) {\r\n      addSegment({ \r\n        yawDelta: Math.PI / 20,  // Very tight turn\r\n        rollDelta: 0\r\n      });\r\n    }\r\n    for (let i = 0; i < 5; i++) {\r\n      addSegment({ rollDelta: -Math.PI / 40 });\r\n    }\r\n    \r\n    // FIXED: Manageable climb with boost zones instead of impossible steep angles\r\n    for (let i = 0; i < 40; i++) {\r\n      if (i % 8 < 3) {\r\n        // Narrow sections with boost\r\n        addSegment({\r\n          lanes: [{ offset: 0, width: 5 }],\r\n          pitchDelta: Math.PI / 80, // Much gentler climb\r\n          isBoost: true // Add boost to help with climb\r\n        });\r\n      } else if (i % 8 < 5) {\r\n        // Boost sections for climbing\r\n        addSegment({\r\n          pitchDelta: Math.PI / 80,\r\n          isBoost: true\r\n        });\r\n      } else {\r\n        // Normal width\r\n        addSegment({\r\n          pitchDelta: Math.PI / 80 // Much gentler climb\r\n        });\r\n      }\r\n    }\r\n    \r\n    // The Big Drop - FIXED: Safer descent angles to prevent cliff effect\r\n    for (let i = 0; i < 8; i++) {\r\n      addSegment({ pitchDelta: -Math.PI / 200 * (i + 1) }); // Very gradual increasing angle\r\n    }\r\n    for (let i = 0; i < 25; i++) {\r\n      addSegment({ pitchDelta: -Math.PI / 40 }); // Safe maximum descent (45 degrees max)\r\n    }\r\n    for (let i = 0; i < 8; i++) {\r\n      addSegment({ pitchDelta: -Math.PI / 200 * (8 - i) }); // Level out gradually\r\n    }\r\n    \r\n    // Recovery chicane at high speed\r\n    for (let i = 0; i < 6; i++) {\r\n      addSegment({ yawDelta: -Math.PI / 30 });\r\n    }\r\n    for (let i = 0; i < 12; i++) {\r\n      addSegment({ yawDelta: Math.PI / 30 });\r\n    }\r\n    for (let i = 0; i < 6; i++) {\r\n      addSegment({ yawDelta: -Math.PI / 30 });\r\n    }\r\n    \r\n    // Final test - long jump with turn in mid-air\r\n    for (let i = 0; i < 15; i++) {\r\n      addSegment({ \r\n        pitchDelta: Math.PI / 30,\r\n        yawDelta: -Math.PI / 200  // Slight left curve on ramp\r\n      });\r\n    }\r\n    for (let i = 0; i < 8; i++) {\r\n      addSegment({ isGap: true }); // Longest jump in the game!\r\n    }\r\n    for (let i = 0; i < 15; i++) {\r\n      addSegment({ \r\n        pitchDelta: -Math.PI / 30,\r\n        yawDelta: -Math.PI / 200  // Continue curve on landing\r\n      });\r\n    }\r\n    \r\n    // Victory straight\r\n    for (let i = 0; i < 30; i++) {\r\n      addSegment({\r\n        yawDelta: 0,\r\n        pitchDelta: 0,\r\n        rollDelta: 0,\r\n        isFinishLine: (i === 29)\r\n      });\r\n    }\r\n  }\r\n};"],"names":["Level10","addSegment","i","factor"],"mappings":"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"}