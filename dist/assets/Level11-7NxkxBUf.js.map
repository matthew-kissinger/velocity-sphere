{"version":3,"file":"Level11-7NxkxBUf.js","sources":["../../src/tracks/levels/Level11.js"],"sourcesContent":["/**\n * Level 11 - Ocean Drift\n * Gentle introduction to Circuit Beta with flowing ocean-themed curves\n * Easy difficulty for learning the new elemental racing style\n */\n\nexport default {\n  name: \"Ocean Drift\",\n  description: \"Ride the waves in this peaceful underwater journey\",\n  difficulty: 1,\n  shader: \"ocean-waves\",\n  skybox: \"ocean-depths\",\n  \n  generateTrack(addSegment) {\n    // Starting straight - gentle introduction\n    for (let i = 0; i < 25; i++) {\n      addSegment({\n        yawDelta: 0,\n        pitchDelta: 0,\n        rollDelta: 0,\n        isStartLine: (i === 0)\n      });\n    }\n    \n    // Wave Pattern 1: Gentle rolling hills like ocean waves\n    for (let wave = 0; wave < 3; wave++) {\n      // Wave up\n      for (let i = 0; i < 8; i++) {\n        addSegment({ \n          pitchDelta: Math.PI / 120, // Very gentle climb\n          yawDelta: Math.sin(i * 0.2) * Math.PI / 180 // Slight S-curve\n        });\n      }\n      // Wave crest\n      for (let i = 0; i < 4; i++) {\n        addSegment({ pitchDelta: 0, yawDelta: 0 });\n      }\n      // Wave down\n      for (let i = 0; i < 8; i++) {\n        addSegment({ \n          pitchDelta: -Math.PI / 120, // Gentle descent\n          yawDelta: Math.sin(i * 0.2) * Math.PI / 180\n        });\n      }\n    }\n    \n    // Flowing left turn - like ocean current\n    const leftTurnSegments = 25;\n    const leftTurnAngle = Math.PI / 3; // 60 degrees\n    for (let i = 0; i < leftTurnSegments; i++) {\n      const progress = i / leftTurnSegments;\n      const easeIn = Math.sin(progress * Math.PI / 2);\n      addSegment({ \n        yawDelta: (leftTurnAngle / leftTurnSegments) * easeIn,\n        pitchDelta: Math.sin(i * 0.3) * Math.PI / 200 // Subtle undulation\n      });\n    }\n    \n    // Small jump section - like jumping over a wave\n    for (let i = 0; i < 6; i++) {\n      addSegment({ pitchDelta: Math.PI / 45 }); // Gentle ramp up\n    }\n    for (let i = 0; i < 2; i++) {\n      addSegment({ isGap: true }); // Small gap\n    }\n    for (let i = 0; i < 6; i++) {\n      addSegment({ pitchDelta: -Math.PI / 45 }); // Gentle landing\n    }\n    \n    // Recovery straight with boost\n    for (let i = 0; i < 10; i++) {\n      addSegment({\n        yawDelta: 0,\n        pitchDelta: 0,\n        rollDelta: 0,\n        isBoost: (i >= 2 && i <= 5) // Boost in middle\n      });\n    }\n    \n    // Flowing right turn - reverse current\n    const rightTurnSegments = 25;\n    const rightTurnAngle = Math.PI / 3;\n    for (let i = 0; i < rightTurnSegments; i++) {\n      const progress = i / rightTurnSegments;\n      const easeOut = Math.sin((1 - progress) * Math.PI / 2);\n      addSegment({ \n        yawDelta: (rightTurnAngle / rightTurnSegments) * easeOut,\n        pitchDelta: Math.cos(i * 0.3) * Math.PI / 200\n      });\n    }\n    \n    // Final wave section with gentle banking\n    for (let i = 0; i < 5; i++) {\n      addSegment({ rollDelta: Math.PI / 100 }); // Gentle bank entry\n    }\n    \n    // Banked wave curves\n    for (let wave = 0; wave < 2; wave++) {\n      for (let i = 0; i < 10; i++) {\n        addSegment({ \n          pitchDelta: Math.sin(i * 0.3) * Math.PI / 100,\n          yawDelta: Math.PI / 120 // Slight continuous turn\n        });\n      }\n    }\n    \n    for (let i = 0; i < 5; i++) {\n      addSegment({ rollDelta: -Math.PI / 100 }); // Bank exit\n    }\n    \n    // Finish line approach\n    for (let i = 0; i < 20; i++) {\n      addSegment({\n        yawDelta: 0,\n        pitchDelta: 0,\n        rollDelta: 0,\n        isBoost: (i === 5), // One boost before finish\n        isFinishLine: (i === 19)\n      });\n    }\n  }\n};"],"names":["Level11","addSegment","i","wave","leftTurnSegments","leftTurnAngle","progress","easeIn","rightTurnSegments","rightTurnAngle","easeOut"],"mappings":"AAMA,MAAAA,EAAe,CACb,KAAM,cACN,YAAa,qDACb,WAAY,EACZ,OAAQ,cACR,OAAQ,eAER,cAAcC,EAAY,CAExB,QAASC,EAAI,EAAGA,EAAI,GAAIA,IACtBD,EAAW,CACT,SAAU,EACV,WAAY,EACZ,UAAW,EACX,YAAcC,IAAM,CAC5B,CAAO,EAIH,QAASC,EAAO,EAAGA,EAAO,EAAGA,IAAQ,CAEnC,QAASD,EAAI,EAAGA,EAAI,EAAGA,IACrBD,EAAW,CACT,WAAY,KAAK,GAAK,IACtB,SAAU,KAAK,IAAIC,EAAI,EAAG,EAAI,KAAK,GAAK,GAClD,CAAS,EAGH,QAASA,EAAI,EAAGA,EAAI,EAAGA,IACrBD,EAAW,CAAE,WAAY,EAAG,SAAU,CAAC,CAAE,EAG3C,QAASC,EAAI,EAAGA,EAAI,EAAGA,IACrBD,EAAW,CACT,WAAY,CAAC,KAAK,GAAK,IACvB,SAAU,KAAK,IAAIC,EAAI,EAAG,EAAI,KAAK,GAAK,GAClD,CAAS,CAEL,CAGA,MAAME,EAAmB,GACnBC,EAAgB,KAAK,GAAK,EAChC,QAASH,EAAI,EAAGA,EAAIE,EAAkBF,IAAK,CACzC,MAAMI,EAAWJ,EAAIE,EACfG,EAAS,KAAK,IAAID,EAAW,KAAK,GAAK,CAAC,EAC9CL,EAAW,CACT,SAAWI,EAAgBD,EAAoBG,EAC/C,WAAY,KAAK,IAAIL,EAAI,EAAG,EAAI,KAAK,GAAK,GAClD,CAAO,CACH,CAGA,QAASA,EAAI,EAAGA,EAAI,EAAGA,IACrBD,EAAW,CAAE,WAAY,KAAK,GAAK,EAAE,CAAE,EAEzC,QAASC,EAAI,EAAGA,EAAI,EAAGA,IACrBD,EAAW,CAAE,MAAO,EAAI,CAAE,EAE5B,QAASC,EAAI,EAAGA,EAAI,EAAGA,IACrBD,EAAW,CAAE,WAAY,CAAC,KAAK,GAAK,EAAE,CAAE,EAI1C,QAASC,EAAI,EAAGA,EAAI,GAAIA,IACtBD,EAAW,CACT,SAAU,EACV,WAAY,EACZ,UAAW,EACX,QAAUC,GAAK,GAAKA,GAAK,CACjC,CAAO,EAIH,MAAMM,EAAoB,GACpBC,EAAiB,KAAK,GAAK,EACjC,QAASP,EAAI,EAAGA,EAAIM,EAAmBN,IAAK,CAC1C,MAAMI,EAAWJ,EAAIM,EACfE,EAAU,KAAK,KAAK,EAAIJ,GAAY,KAAK,GAAK,CAAC,EACrDL,EAAW,CACT,SAAWQ,EAAiBD,EAAqBE,EACjD,WAAY,KAAK,IAAIR,EAAI,EAAG,EAAI,KAAK,GAAK,GAClD,CAAO,CACH,CAGA,QAASA,EAAI,EAAGA,EAAI,EAAGA,IACrBD,EAAW,CAAE,UAAW,KAAK,GAAK,GAAG,CAAE,EAIzC,QAASE,EAAO,EAAGA,EAAO,EAAGA,IAC3B,QAASD,EAAI,EAAGA,EAAI,GAAIA,IACtBD,EAAW,CACT,WAAY,KAAK,IAAIC,EAAI,EAAG,EAAI,KAAK,GAAK,IAC1C,SAAU,KAAK,GAAK,GAC9B,CAAS,EAIL,QAASA,EAAI,EAAGA,EAAI,EAAGA,IACrBD,EAAW,CAAE,UAAW,CAAC,KAAK,GAAK,GAAG,CAAE,EAI1C,QAASC,EAAI,EAAGA,EAAI,GAAIA,IACtBD,EAAW,CACT,SAAU,EACV,WAAY,EACZ,UAAW,EACX,QAAUC,IAAM,EAChB,aAAeA,IAAM,EAC7B,CAAO,CAEL,CACF"}