{"version":3,"file":"Level12-B2mocMlJ.js","sources":["../../src/tracks/levels/Level12.js"],"sourcesContent":["/**\n * Level 12 - Desert Mirage\n * Rolling sand dunes with heat shimmer effects\n * Medium difficulty with flowing dune navigation\n */\n\nexport default {\n  name: \"Desert Mirage\",\n  description: \"Navigate the shifting sands and find the oasis shortcuts\",\n  difficulty: 2,\n  shader: \"sand-dunes\",\n  skybox: \"desert-heat\",\n  \n  generateTrack(addSegment) {\n    // Desert start - flat approach\n    for (let i = 0; i < 20; i++) {\n      addSegment({\n        yawDelta: 0,\n        pitchDelta: 0,\n        rollDelta: 0,\n        isStartLine: (i === 0)\n      });\n    }\n    \n    // First dune climb - gentle introduction\n    for (let i = 0; i < 12; i++) {\n      addSegment({ \n        pitchDelta: Math.PI / 70, // Safe climbing angle\n        yawDelta: Math.sin(i * 0.2) * Math.PI / 200 // Slight weaving\n      });\n    }\n    \n    // Dune crest turn\n    for (let i = 0; i < 8; i++) {\n      addSegment({ \n        yawDelta: Math.PI / 40,\n        pitchDelta: -Math.PI / 120 // Gentle descent start\n      });\n    }\n    \n    // Dune descent\n    for (let i = 0; i < 15; i++) {\n      addSegment({ \n        pitchDelta: -Math.PI / 60\n        // Removed speed pads\n      });\n    }\n    \n    // Oasis section - split path choice\n    for (let i = 0; i < 5; i++) {\n      const splitFactor = i / 5;\n      addSegment({\n        lanes: [\n          { offset: -8 * splitFactor, width: 6 }, // Left: longer but easier\n          { offset: 8 * splitFactor, width: 6 }   // Right: shortcut with jump\n        ]\n      });\n    }\n    \n    // Split paths\n    for (let i = 0; i < 25; i++) {\n      if (i < 10) {\n        // Both paths turn slightly\n        addSegment({\n          lanes: [\n            { offset: -8, width: 6 },\n            { offset: 8, width: 6 }\n          ],\n          yawDelta: Math.PI / 100\n        });\n      } else if (i >= 10 && i < 15) {\n        // Right path has jump, left continues\n        addSegment({\n          lanes: [\n            { offset: -8, width: 6 },\n            { offset: 8, width: 6, isGap: (i >= 12 && i <= 13) }\n          ],\n          pitchDelta: i < 12 ? Math.PI / 40 : -Math.PI / 40 // Jump ramp\n        });\n      } else {\n        // Paths continue parallel\n        addSegment({\n          lanes: [\n            { offset: -8, width: 6 },\n            { offset: 8, width: 6 }\n          ]\n        });\n      }\n    }\n    \n    // Merge paths\n    for (let i = 0; i < 5; i++) {\n      const mergeFactor = 1 - (i / 5);\n      addSegment({\n        lanes: [\n          { offset: -8 * mergeFactor, width: 6 },\n          { offset: 8 * mergeFactor, width: 6 }\n        ]\n      });\n    }\n    \n    // Serpentine dune section - S-curves through dunes\n    const serpentinePattern = [\n      { angle: Math.PI / 3, segments: 15 },   // 60° right\n      { angle: -Math.PI / 2.5, segments: 18 }, // 72° left\n      { angle: Math.PI / 2.5, segments: 18 },  // 72° right\n      { angle: -Math.PI / 3, segments: 15 }    // 60° left\n    ];\n    \n    for (const turn of serpentinePattern) {\n      // Bank entry\n      for (let i = 0; i < 3; i++) {\n        addSegment({ \n          rollDelta: (turn.angle > 0 ? 1 : -1) * Math.PI / 60\n        });\n      }\n      \n      // Execute turn with dune undulation\n      for (let i = 0; i < turn.segments; i++) {\n        addSegment({ \n          yawDelta: turn.angle / turn.segments,\n          pitchDelta: Math.sin(i * 0.3) * Math.PI / 100 // Gentle dune waves\n        });\n      }\n      \n      // Bank exit\n      for (let i = 0; i < 3; i++) {\n        addSegment({ \n          rollDelta: (turn.angle > 0 ? -1 : 1) * Math.PI / 60\n        });\n      }\n    }\n    \n    // Big dune section - larger elevation changes\n    for (let dune = 0; dune < 3; dune++) {\n      // Climb\n      for (let i = 0; i < 15; i++) {\n        addSegment({ \n          pitchDelta: Math.PI / 65\n          // Removed speed pads\n        });\n      }\n      \n      // Crest\n      for (let i = 0; i < 5; i++) {\n        addSegment({ \n          pitchDelta: 0,\n          yawDelta: Math.PI / 150 // Slight turn on crest\n        });\n      }\n      \n      // Descent\n      for (let i = 0; i < 12; i++) {\n        addSegment({ \n          pitchDelta: -Math.PI / 55\n        });\n      }\n    }\n    \n    // Mirage straightaway\n    for (let i = 0; i < 20; i++) {\n      addSegment({\n        yawDelta: 0,\n        pitchDelta: 0,\n        rollDelta: 0\n        // Removed speed pads\n      });\n    }\n    \n    // Final technical section - tight turns between rock formations\n    const technicalTurns = [\n      { angle: Math.PI / 4, segments: 8 },    // 45° right\n      { angle: -Math.PI / 3.5, segments: 10 }, // ~51° left\n      { angle: Math.PI / 5, segments: 6 }      // 36° right\n    ];\n    \n    for (const turn of technicalTurns) {\n      for (let i = 0; i < turn.segments; i++) {\n        addSegment({ \n          yawDelta: turn.angle / turn.segments,\n          pitchDelta: Math.sin(i * 0.5) * Math.PI / 150 // Small bumps\n        });\n      }\n      \n      // Short straight between turns\n      for (let i = 0; i < 3; i++) {\n        addSegment({ yawDelta: 0, pitchDelta: 0 });\n      }\n    }\n    \n    // Finish approach - slight downhill for speed\n    for (let i = 0; i < 15; i++) {\n      addSegment({\n        yawDelta: 0,\n        pitchDelta: -Math.PI / 100,\n        rollDelta: 0,\n        isFinishLine: (i === 14)\n      });\n    }\n  }\n};"],"names":["Level12","addSegment","i","splitFactor","mergeFactor","serpentinePattern","turn","dune","technicalTurns"],"mappings":"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"}