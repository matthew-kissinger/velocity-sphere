{"version":3,"file":"Level13-DGml87M9.js","sources":["../../src/tracks/levels/Level13.js"],"sourcesContent":["/**\n * Level 13 - Forest Trail\n * Winding paths through dense forest\n * Medium difficulty with natural obstacles\n */\n\nexport default {\n  name: \"Forest Trail\",\n  description: \"Navigate the twisting paths through ancient woods\",\n  difficulty: 3,\n  shader: \"forest-floor\",\n  skybox: \"forest-canopy\", // High contrast forest skybox\n  \n  generateTrack(addSegment) {\n    // Forest entrance\n    for (let i = 0; i < 15; i++) {\n      addSegment({\n        yawDelta: 0,\n        pitchDelta: 0,\n        rollDelta: 0,\n        isStartLine: (i === 0)\n      });\n    }\n    \n    // Winding forest path - tight S-curves\n    const forestTurns = [\n      { angle: Math.PI / 2.5, segments: 20 },  // 72째 right\n      { angle: -Math.PI / 2, segments: 18 },    // 90째 left\n      { angle: Math.PI / 3, segments: 12 },     // 60째 right\n      { angle: -Math.PI / 2.8, segments: 15 }   // ~64째 left\n    ];\n    \n    for (const turn of forestTurns) {\n      // Approach with slight banking\n      for (let i = 0; i < 4; i++) {\n        addSegment({ \n          rollDelta: (turn.angle > 0 ? 1 : -1) * Math.PI / 80,\n          pitchDelta: Math.sin(i * 0.5) * Math.PI / 150 // Root bumps\n        });\n      }\n      \n      // Execute turn through trees\n      for (let i = 0; i < turn.segments; i++) {\n        addSegment({ \n          yawDelta: turn.angle / turn.segments,\n          pitchDelta: Math.cos(i * 0.3) * Math.PI / 120 // Uneven ground\n        });\n      }\n      \n      // Exit banking\n      for (let i = 0; i < 4; i++) {\n        addSegment({ \n          rollDelta: (turn.angle > 0 ? -1 : 1) * Math.PI / 80\n        });\n      }\n    }\n    \n    // Tree root jump section\n    for (let jump = 0; jump < 4; jump++) {\n      // Approach\n      for (let i = 0; i < 8; i++) {\n        addSegment({ \n          pitchDelta: i < 4 ? Math.PI / 50 : 0,\n          yawDelta: Math.sin(i * 0.2) * Math.PI / 100 // Weaving\n        });\n      }\n      \n      // Small gap\n      for (let i = 0; i < 2; i++) {\n        addSegment({ isGap: true });\n      }\n      \n      // Landing\n      for (let i = 0; i < 4; i++) {\n        addSegment({ pitchDelta: -Math.PI / 50 });\n      }\n    }\n    \n    // Split path through trees\n    for (let i = 0; i < 5; i++) {\n      const factor = i / 5;\n      addSegment({\n        lanes: [\n          { offset: -10 * factor, width: 6 },\n          { offset: 10 * factor, width: 6 }\n        ]\n      });\n    }\n    \n    // Different paths with different challenges\n    for (let i = 0; i < 30; i++) {\n      addSegment({\n        lanes: [\n          { offset: -10, width: 6 }, // Left: more turns\n          { offset: 10, width: 6 }   // Right: more jumps\n        ],\n        yawDelta: i < 15 ? Math.PI / 80 : -Math.PI / 80,\n        pitchDelta: Math.sin(i * 0.4) * Math.PI / 100\n      });\n    }\n    \n    // Merge paths\n    for (let i = 0; i < 5; i++) {\n      const factor = 1 - (i / 5);\n      addSegment({\n        lanes: [\n          { offset: -10 * factor, width: 6 },\n          { offset: 10 * factor, width: 6 }\n        ]\n      });\n    }\n    \n    // Final forest section with boost\n    for (let i = 0; i < 20; i++) {\n      addSegment({\n        yawDelta: Math.sin(i * 0.15) * Math.PI / 60,\n        pitchDelta: 0,\n        isBoost: (i >= 8 && i <= 11),\n        isFinishLine: (i === 19)\n      });\n    }\n  }\n};"],"names":["Level13","addSegment","i","forestTurns","turn","jump","factor"],"mappings":"AAMA,MAAAA,EAAe,CACb,KAAM,eACN,YAAa,oDACb,WAAY,EACZ,OAAQ,eACR,OAAQ,gBAER,cAAcC,EAAY,CAExB,QAASC,EAAI,EAAGA,EAAI,GAAIA,IACtBD,EAAW,CACT,SAAU,EACV,WAAY,EACZ,UAAW,EACX,YAAcC,IAAM,CAC5B,CAAO,EAIH,MAAMC,EAAc,CAClB,CAAE,MAAO,KAAK,GAAK,IAAK,SAAU,EAAE,EACpC,CAAE,MAAO,CAAC,KAAK,GAAK,EAAG,SAAU,EAAE,EACnC,CAAE,MAAO,KAAK,GAAK,EAAG,SAAU,EAAE,EAClC,CAAE,MAAO,CAAC,KAAK,GAAK,IAAK,SAAU,EAAE,CAC3C,EAEI,UAAWC,KAAQD,EAAa,CAE9B,QAASD,EAAI,EAAGA,EAAI,EAAGA,IACrBD,EAAW,CACT,WAAYG,EAAK,MAAQ,EAAI,EAAI,IAAM,KAAK,GAAK,GACjD,WAAY,KAAK,IAAIF,EAAI,EAAG,EAAI,KAAK,GAAK,GACpD,CAAS,EAIH,QAASA,EAAI,EAAGA,EAAIE,EAAK,SAAUF,IACjCD,EAAW,CACT,SAAUG,EAAK,MAAQA,EAAK,SAC5B,WAAY,KAAK,IAAIF,EAAI,EAAG,EAAI,KAAK,GAAK,GACpD,CAAS,EAIH,QAASA,EAAI,EAAGA,EAAI,EAAGA,IACrBD,EAAW,CACT,WAAYG,EAAK,MAAQ,EAAI,GAAK,GAAK,KAAK,GAAK,EAC3D,CAAS,CAEL,CAGA,QAASC,EAAO,EAAGA,EAAO,EAAGA,IAAQ,CAEnC,QAASH,EAAI,EAAGA,EAAI,EAAGA,IACrBD,EAAW,CACT,WAAYC,EAAI,EAAI,KAAK,GAAK,GAAK,EACnC,SAAU,KAAK,IAAIA,EAAI,EAAG,EAAI,KAAK,GAAK,GAClD,CAAS,EAIH,QAASA,EAAI,EAAGA,EAAI,EAAGA,IACrBD,EAAW,CAAE,MAAO,GAAM,EAI5B,QAASC,EAAI,EAAGA,EAAI,EAAGA,IACrBD,EAAW,CAAE,WAAY,CAAC,KAAK,GAAK,EAAE,CAAE,CAE5C,CAGA,QAASC,EAAI,EAAGA,EAAI,EAAGA,IAAK,CAC1B,MAAMI,EAASJ,EAAI,EACnBD,EAAW,CACT,MAAO,CACL,CAAE,OAAQ,IAAMK,EAAQ,MAAO,CAAC,EAChC,CAAE,OAAQ,GAAKA,EAAQ,MAAO,CAAC,CACzC,CACA,CAAO,CACH,CAGA,QAASJ,EAAI,EAAGA,EAAI,GAAIA,IACtBD,EAAW,CACT,MAAO,CACL,CAAE,OAAQ,IAAK,MAAO,CAAC,EACvB,CAAE,OAAQ,GAAI,MAAO,CAAC,CAChC,EACQ,SAAUC,EAAI,GAAK,KAAK,GAAK,GAAK,CAAC,KAAK,GAAK,GAC7C,WAAY,KAAK,IAAIA,EAAI,EAAG,EAAI,KAAK,GAAK,GAClD,CAAO,EAIH,QAASA,EAAI,EAAGA,EAAI,EAAGA,IAAK,CAC1B,MAAMI,EAAS,EAAKJ,EAAI,EACxBD,EAAW,CACT,MAAO,CACL,CAAE,OAAQ,IAAMK,EAAQ,MAAO,CAAC,EAChC,CAAE,OAAQ,GAAKA,EAAQ,MAAO,CAAC,CACzC,CACA,CAAO,CACH,CAGA,QAASJ,EAAI,EAAGA,EAAI,GAAIA,IACtBD,EAAW,CACT,SAAU,KAAK,IAAIC,EAAI,GAAI,EAAI,KAAK,GAAK,GACzC,WAAY,EACZ,QAAUA,GAAK,GAAKA,GAAK,GACzB,aAAeA,IAAM,EAC7B,CAAO,CAEL,CACF"}