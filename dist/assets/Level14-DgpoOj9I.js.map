{"version":3,"file":"Level14-DgpoOj9I.js","sources":["../../src/tracks/levels/Level14.js"],"sourcesContent":["/**\n * Level 14 - Metal Forge\n * Industrial metalworks with mechanical precision\n * Medium difficulty with gear-like patterns\n */\n\nexport default {\n  name: \"Metal Forge\",\n  description: \"Race through the industrial forge of steel and gears\",\n  difficulty: 3,\n  shader: \"tech-grid\", // Using existing tech shader for now\n  skybox: \"neon-city\", // Industrial atmosphere\n  \n  generateTrack(addSegment) {\n    // Factory entrance\n    for (let i = 0; i < 20; i++) {\n      addSegment({\n        yawDelta: 0,\n        pitchDelta: 0,\n        rollDelta: 0,\n        isStartLine: (i === 0)\n      });\n    }\n    \n    // Gear mechanism section - circular patterns\n    // Large gear rotation\n    for (let i = 0; i < 40; i++) {\n      addSegment({\n        yawDelta: Math.PI / 20, // Full circle\n        pitchDelta: Math.sin(i * Math.PI / 10) * Math.PI / 100, // Gear teeth\n        rollDelta: i < 10 ? Math.PI / 100 : (i > 30 ? -Math.PI / 100 : 0)\n      });\n    }\n    \n    // Straight conveyor section with speed boost\n    for (let i = 0; i < 15; i++) {\n      addSegment({\n        yawDelta: 0,\n        pitchDelta: 0,\n        isBoost: (i === 0 || i === 7 || i === 14) // Occasional conveyor belt speed zones\n      });\n    }\n    \n    // Piston section - rhythmic elevation changes\n    for (let piston = 0; piston < 5; piston++) {\n      // Up stroke\n      for (let i = 0; i < 8; i++) {\n        addSegment({\n          pitchDelta: Math.PI / 60,\n          yawDelta: piston % 2 ? Math.PI / 120 : -Math.PI / 120\n        });\n      }\n      // Down stroke\n      for (let i = 0; i < 8; i++) {\n        addSegment({\n          pitchDelta: -Math.PI / 60,\n          yawDelta: piston % 2 ? -Math.PI / 120 : Math.PI / 120\n        });\n      }\n    }\n    \n    // Assembly line split paths\n    for (let i = 0; i < 5; i++) {\n      const factor = i / 5;\n      addSegment({\n        lanes: [\n          { offset: -8 * factor, width: 7 },\n          { offset: 8 * factor, width: 7 }\n        ]\n      });\n    }\n    \n    // Parallel production lines\n    for (let i = 0; i < 25; i++) {\n      addSegment({\n        lanes: [\n          { offset: -8, width: 7 },\n          { offset: 8, width: 7 }\n        ],\n        pitchDelta: i % 10 < 5 ? Math.PI / 80 : -Math.PI / 80,\n        isBoost: i % 10 === 0 // Periodic boost\n      });\n    }\n    \n    // Merge at quality control\n    for (let i = 0; i < 5; i++) {\n      const factor = 1 - (i / 5);\n      addSegment({\n        lanes: [\n          { offset: -8 * factor, width: 7 },\n          { offset: 8 * factor, width: 7 }\n        ]\n      });\n    }\n    \n    // Precision turn section - 90 degree turns\n    const precisionTurns = [\n      { angle: Math.PI / 2, segments: 12 },   // 90° right\n      { angle: -Math.PI / 2, segments: 12 },  // 90° left\n      { angle: Math.PI / 2, segments: 12 }    // 90° right\n    ];\n    \n    for (const turn of precisionTurns) {\n      for (let i = 0; i < turn.segments; i++) {\n        addSegment({\n          yawDelta: turn.angle / turn.segments,\n          rollDelta: i < 4 ? (turn.angle > 0 ? Math.PI / 50 : -Math.PI / 50) : \n                    (i > 8 ? (turn.angle > 0 ? -Math.PI / 50 : Math.PI / 50) : 0)\n        });\n      }\n      \n      // Short straight between turns\n      for (let i = 0; i < 5; i++) {\n        addSegment({ yawDelta: 0, pitchDelta: 0 });\n      }\n    }\n    \n    // Final forge exit\n    for (let i = 0; i < 20; i++) {\n      addSegment({\n        yawDelta: 0,\n        pitchDelta: -Math.PI / 100, // Slight downhill\n        isBoost: (i >= 5 && i <= 8),\n        isFinishLine: (i === 19)\n      });\n    }\n  }\n};"],"names":["Level14","addSegment","i","piston","factor","precisionTurns","turn"],"mappings":"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"}