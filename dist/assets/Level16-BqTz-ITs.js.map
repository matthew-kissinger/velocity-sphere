{"version":3,"file":"Level16-BqTz-ITs.js","sources":["../../src/tracks/levels/Level16.js"],"sourcesContent":["/**\n * Level 16 - Cave Crystal (REDESIGNED)\n * Underground crystal exploration with logical flow\n * Medium difficulty with proper progression\n */\n\nexport default {\n  name: \"Cave Crystal\",\n  description: \"Explore the glowing crystal caverns in a thrilling underground race\",\n  difficulty: 4,\n  shader: \"crystal-surface\",\n  skybox: \"crystal-cavern\", // Vibrant crystal cave atmosphere\n  \n  generateTrack(addSegment) {\n    // Cave entrance - gentle slope into the cavern\n    for (let i = 0; i < 15; i++) {\n      addSegment({\n        yawDelta: 0,\n        pitchDelta: -Math.PI / 80, // Gentle descent\n        rollDelta: 0,\n        isStartLine: (i === 0)\n      });\n    }\n    \n    // First cavern chamber - wide turns with crystal formations\n    for (let i = 0; i < 25; i++) {\n      addSegment({\n        yawDelta: Math.sin(i * 0.15) * Math.PI / 60, // Gentle curves\n        pitchDelta: 0 // Flat for speed\n      });\n    }\n    \n    // Crystal gallery - sweeping turns around formations\n    const galleryTurns = [\n      { angle: Math.PI / 3, segments: 15 },    // 60째 right\n      { angle: -Math.PI / 2.5, segments: 18 }, // 72째 left\n      { angle: Math.PI / 4, segments: 12 },    // 45째 right\n      { angle: -Math.PI / 3.5, segments: 14 }  // ~51째 left\n    ];\n    \n    for (const turn of galleryTurns) {\n      // Bank into turn\n      for (let i = 0; i < 3; i++) {\n        addSegment({ \n          rollDelta: (turn.angle > 0 ? 1 : -1) * Math.PI / 60\n        });\n      }\n      \n      // Execute turn around crystal formations\n      for (let i = 0; i < turn.segments; i++) {\n        addSegment({\n          yawDelta: turn.angle / turn.segments,\n          pitchDelta: Math.sin(i * 0.2) * Math.PI / 150, // Slight undulation\n          lanes: [{ offset: 0, width: 8 }] // Good width for medium difficulty\n        });\n      }\n      \n      // Exit bank\n      for (let i = 0; i < 3; i++) {\n        addSegment({ \n          rollDelta: (turn.angle > 0 ? -1 : 1) * Math.PI / 60\n        });\n      }\n      \n      // Straight section between turns\n      for (let i = 0; i < 5; i++) {\n        addSegment({ });\n      }\n    }\n    \n    // Underground lake crossing - jumping between platforms\n    for (let platform = 0; platform < 4; platform++) {\n      // Platform approach\n      for (let i = 0; i < 8; i++) {\n        addSegment({\n          pitchDelta: 0,\n          yawDelta: 0\n        });\n      }\n      \n      // Ramp up for jump\n      for (let i = 0; i < 3; i++) {\n        addSegment({\n          pitchDelta: Math.PI / 50\n        });\n      }\n      \n      // Gap over water\n      for (let i = 0; i < 3 + platform; i++) { // Gaps get longer\n        addSegment({ isGap: true });\n      }\n      \n      // Landing platform\n      for (let i = 0; i < 6; i++) {\n        addSegment({ \n          pitchDelta: i < 3 ? -Math.PI / 50 : 0\n        });\n      }\n    }\n    \n    // Crystal slide section - flowing descent\n    for (let i = 0; i < 30; i++) {\n      const slideProgress = i / 30;\n      addSegment({\n        yawDelta: Math.sin(i * 0.15) * Math.PI / 50, // S-curves\n        pitchDelta: -Math.PI / 70, // Moderate descent\n        rollDelta: Math.sin(i * 0.15) * Math.PI / 80, // Banking\n        lanes: [{ offset: 0, width: 8 + slideProgress * 2 }] // Widening path\n      });\n    }\n    \n    // Glowing crystal chamber - spectacular finish\n    // Wide open racing with gentle curves\n    for (let i = 0; i < 40; i++) {\n      const chamberFlow = Math.sin(i * 0.1) * Math.PI / 60;\n      addSegment({\n        yawDelta: chamberFlow,\n        pitchDelta: 0, // Flat for final speed section\n        rollDelta: chamberFlow * 0.5,\n        lanes: [{ offset: 0, width: 12 }] // Wide open racing\n      });\n    }\n    \n    // Exit tunnel - climb back to surface\n    for (let i = 0; i < 20; i++) {\n      if (i === 5) {\n        // Single boost pad at start of climb (avoidable - center lane)\n        addSegment({\n          yawDelta: 0,\n          pitchDelta: Math.PI / 100,\n          rollDelta: 0,\n          lanes: [{ offset: 0, width: 4 }], // Half width - avoidable\n          isBoost: true\n        });\n      } else {\n        addSegment({\n          yawDelta: 0,\n          pitchDelta: Math.PI / 100, // Gentle climb\n          rollDelta: 0\n        });\n      }\n    }\n    \n    // Final sprint to daylight\n    for (let i = 0; i < 15; i++) {\n      addSegment({\n        yawDelta: 0,\n        pitchDelta: 0,\n        rollDelta: 0,\n        lanes: [{ offset: 0, width: 10 }],\n        isFinishLine: (i === 14)\n      });\n    }\n  }\n};"],"names":["Level16","addSegment","i","galleryTurns","turn","platform","slideProgress","chamberFlow"],"mappings":"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"}