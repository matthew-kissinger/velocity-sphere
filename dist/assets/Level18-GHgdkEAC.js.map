{"version":3,"file":"Level18-GHgdkEAC.js","sources":["../../src/tracks/levels/Level18.js"],"sourcesContent":["/**\n * Level 18 - Magma Core (REDESIGNED SECOND HALF)\n * Deep earth core racing with lava flows\n * EXTREME difficulty but fair and achievable\n */\n\nexport default {\n  name: \"Magma Core\",\n  description: \"Race through the molten heart of the earth\",\n  difficulty: 6,\n  shader: \"lava-flow\",\n  skybox: \"lava-storm\",\n  \n  generateTrack(addSegment) {\n    // Start at surface level - volcanic rim\n    for (let i = 0; i < 15; i++) {\n      addSegment({\n        yawDelta: Math.sin(i * 0.2) * Math.PI / 100,\n        pitchDelta: 0,\n        rollDelta: 0,\n        isStartLine: (i === 0)\n      });\n    }\n    \n    // Lava tube entrance - winding tunnel\n    for (let i = 0; i < 30; i++) {\n      addSegment({\n        yawDelta: Math.sin(i * 0.15) * Math.PI / 35,\n        pitchDelta: Math.cos(i * 0.1) * Math.PI / 90,\n        lanes: [{ offset: 0, width: 8 }]\n      });\n    }\n    \n    // Magma chamber - multiple lava flows to avoid\n    // Three parallel paths between lava flows\n    for (let i = 0; i < 5; i++) {\n      const factor = i / 5;\n      addSegment({\n        lanes: [\n          { offset: -10 * factor, width: 5 },\n          { offset: 0, width: 6 },\n          { offset: 10 * factor, width: 5 }\n        ]\n      });\n    }\n    \n    // Navigate between active lava flows\n    for (let i = 0; i < 40; i++) {\n      const lavaPattern = Math.sin(i * 0.1) * 0.5 + 0.5;\n      \n      if (i % 10 < 5) {\n        // Lava surges - paths temporarily blocked\n        addSegment({\n          lanes: [\n            { offset: -10, width: 5, isGap: lavaPattern > 0.7 },\n            { offset: 0, width: 6 },\n            { offset: 10, width: 5, isGap: lavaPattern < 0.3 }\n          ],\n          pitchDelta: Math.sin(i * 0.2) * Math.PI / 120\n        });\n      } else {\n        // Safe passages\n        addSegment({\n          lanes: [\n            { offset: -10, width: 5 },\n            { offset: 0, width: 6 },\n            { offset: 10, width: 5 }\n          ],\n          pitchDelta: Math.sin(i * 0.2) * Math.PI / 120\n        });\n      }\n    }\n    \n    // Merge paths\n    for (let i = 0; i < 5; i++) {\n      const factor = 1 - (i / 5);\n      addSegment({\n        lanes: [\n          { offset: -10 * factor, width: 5 },\n          { offset: 0, width: 6 },\n          { offset: 10 * factor, width: 5 }\n        ]\n      });\n    }\n    \n    // ==== COMPLETELY REDESIGNED SECOND HALF ====\n    \n    // SECTION 4: Obsidian Canyon\n    // Racing through cooled lava formations\n    for (let i = 0; i < 25; i++) {\n      addSegment({\n        yawDelta: 0,\n        pitchDelta: 0,\n        rollDelta: 0,\n        lanes: [{ offset: 0, width: 10 }]\n      });\n    }\n    \n    // Canyon weaving - sharp but manageable turns\n    const canyonTurns = [\n      { angle: Math.PI / 2.5, segments: 20 },\n      { angle: -Math.PI / 3, segments: 18 },\n      { angle: Math.PI / 2.8, segments: 22 },\n      { angle: -Math.PI / 2.2, segments: 25 }\n    ];\n    \n    for (const turn of canyonTurns) {\n      // Bank into turn\n      for (let i = 0; i < 4; i++) {\n        addSegment({\n          rollDelta: (turn.angle > 0 ? 1 : -1) * Math.PI / 60,\n          lanes: [{ offset: 0, width: 9 }]\n        });\n      }\n      \n      // Execute turn with varied width\n      for (let i = 0; i < turn.segments; i++) {\n        const progress = i / turn.segments;\n        addSegment({\n          yawDelta: turn.angle / turn.segments,\n          pitchDelta: Math.sin(progress * Math.PI * 2) * Math.PI / 150,\n          rollDelta: 0,\n          lanes: [{ \n            offset: 0, \n            width: 8 + Math.sin(progress * Math.PI) * 2 \n          }]\n        });\n      }\n      \n      // Exit bank\n      for (let i = 0; i < 4; i++) {\n        addSegment({\n          rollDelta: (turn.angle > 0 ? -1 : 1) * Math.PI / 60,\n          lanes: [{ offset: 0, width: 9 }]\n        });\n      }\n      \n      // Short straight\n      for (let i = 0; i < 10; i++) {\n        addSegment({\n          yawDelta: 0,\n          pitchDelta: 0,\n          rollDelta: 0\n        });\n      }\n    }\n    \n    // SECTION 5: Magma Rapids\n    // Fast flowing section with gentle curves\n    for (let i = 0; i < 60; i++) {\n      const flowPhase = i / 60;\n      const rapidFlow = Math.sin(flowPhase * Math.PI * 4);\n      \n      addSegment({\n        yawDelta: rapidFlow * Math.PI / 80,\n        pitchDelta: -Math.PI / 200 + Math.sin(i * 0.1) * Math.PI / 300,\n        rollDelta: rapidFlow * Math.PI / 120,\n        lanes: [{ \n          offset: 0,\n          width: 10\n        }],\n        isBoost: (i > 20 && i < 25) || (i > 40 && i < 45)\n      });\n    }\n    \n    // SECTION 6: Volcanic Ascent\n    // Climbing out of the magma chamber\n    for (let climb = 0; climb < 3; climb++) {\n      // Approach ramp\n      for (let i = 0; i < 15; i++) {\n        addSegment({\n          yawDelta: 0,\n          pitchDelta: 0,\n          rollDelta: 0,\n          lanes: [{ offset: 0, width: 11 }]\n        });\n      }\n      \n      // Climbing section with switchback\n      for (let i = 0; i < 20; i++) {\n        addSegment({\n          yawDelta: 0,\n          pitchDelta: Math.PI / 100,\n          rollDelta: 0,\n          lanes: [{ offset: 0, width: 9 }],\n          isBoost: (i > 12 && i < 16)\n        });\n      }\n      \n      // Switchback turn\n      const switchDir = climb % 2 ? 1 : -1;\n      for (let i = 0; i < 15; i++) {\n        addSegment({\n          yawDelta: switchDir * Math.PI / 15,\n          pitchDelta: 0,\n          rollDelta: switchDir * Math.PI / 60,\n          lanes: [{ offset: 0, width: 10 }]\n        });\n      }\n    }\n    \n    // SECTION 7: Eruption Escape\n    // Final sprint to the surface\n    for (let i = 0; i < 40; i++) {\n      const escapePhase = i / 40;\n      \n      addSegment({\n        yawDelta: Math.sin(i * 0.15) * Math.PI / 100,\n        pitchDelta: Math.PI / 120,\n        rollDelta: 0,\n        lanes: [{ \n          offset: 0, \n          width: 10 + escapePhase * 2\n        }],\n        isBoost: (i > 25 && i < 30)\n      });\n    }\n    \n    // Surface breakthrough - victory runway\n    for (let i = 0; i < 20; i++) {\n      addSegment({\n        yawDelta: 0,\n        pitchDelta: i < 5 ? Math.PI / 150 : 0,\n        rollDelta: 0,\n        lanes: [{ offset: 0, width: 14 }],\n        isFinishLine: (i === 19)\n      });\n    }\n  }\n};"],"names":["Level18","addSegment","i","factor","lavaPattern","canyonTurns","turn","progress","flowPhase","rapidFlow","climb","switchDir","escapePhase"],"mappings":"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"}