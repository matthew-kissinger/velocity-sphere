{"version":3,"file":"Level19-DvFvcO_c.js","sources":["../../src/tracks/levels/Level19.js"],"sourcesContent":["/**\n * Level 19 - Arctic Rush\n * Icy surface racing with challenging arctic conditions\n * Hard difficulty with slippery surfaces and precision required\n */\n\nexport default {\n  name: \"Arctic Rush\",\n  description: \"Master the ice in this frozen racing challenge\",\n  difficulty: 5,\n  shader: \"ice-surface\",\n  skybox: \"arctic-wind\", // High contrast arctic skybox\n  \n  generateTrack(addSegment) {\n    // Arctic entry - frozen wasteland\n    for (let i = 0; i < 20; i++) {\n      addSegment({\n        yawDelta: 0,\n        pitchDelta: 0,\n        rollDelta: 0,\n        isStartLine: (i === 0)\n      });\n    }\n    \n    // Ice sheet slalom - precise turns on slippery surface\n    const slalomGates = [\n      { angle: Math.PI / 3, segments: 12 },    // 60° right\n      { angle: -Math.PI / 2.5, segments: 15 }, // 72° left  \n      { angle: Math.PI / 2.2, segments: 14 },  // ~82° right\n      { angle: -Math.PI / 2.8, segments: 13 }, // ~64° left\n      { angle: Math.PI / 3.5, segments: 10 },  // ~51° right\n      { angle: -Math.PI / 3, segments: 12 }    // 60° left\n    ];\n    \n    for (const gate of slalomGates) {\n      // Sharp turn with banking\n      for (let i = 0; i < 4; i++) {\n        addSegment({ \n          rollDelta: (gate.angle > 0 ? 1 : -1) * Math.PI / 40\n        });\n      }\n      \n      for (let i = 0; i < gate.segments; i++) {\n        addSegment({\n          yawDelta: gate.angle / gate.segments,\n          lanes: [{ offset: 0, width: 7 }] // Narrower on ice\n        });\n      }\n      \n      for (let i = 0; i < 4; i++) {\n        addSegment({ \n          rollDelta: (gate.angle > 0 ? -1 : 1) * Math.PI / 40\n        });\n      }\n      \n      // Minimal recovery\n      for (let i = 0; i < 2; i++) {\n        addSegment({ yawDelta: 0, pitchDelta: 0 });\n      }\n    }\n    \n    // Glacier crevasse section - dangerous gaps (FIXED: gentler ramps)\n    for (let crevasse = 0; crevasse < 3; crevasse++) { // Reduced from 5 to 3 jumps\n      // Approach with slight descent\n      for (let i = 0; i < 10; i++) {\n        addSegment({\n          pitchDelta: -Math.PI / 150, // Gentler approach\n          yawDelta: Math.sin(i * 0.2) * Math.PI / 120 // Ice instability\n        });\n      }\n      \n      // Jump preparation - much gentler ramp\n      for (let i = 0; i < 8; i++) {\n        if (i === 2 || i === 5) {\n          // Multiple avoidable boosts on approach\n          addSegment({\n            pitchDelta: Math.PI / 90,\n            lanes: [\n              { offset: 0, width: 3, isBoost: true }, // Center boost\n              { offset: -4, width: 2 }, // Left clear\n              { offset: 4, width: 2 } // Right clear\n            ]\n          });\n        } else {\n          addSegment({\n            pitchDelta: Math.PI / 90, // Much gentler climb (2 degrees per segment)\n            isBoost: (i >= 6 && i <= 7) // Extra boosts at top of ramp\n          });\n        }\n      }\n      \n      // Crevasse gap\n      for (let i = 0; i < 3 + crevasse; i++) { // Still increasing difficulty but starting smaller\n        addSegment({ isGap: true });\n      }\n      \n      // Icy landing - gentler\n      for (let i = 0; i < 8; i++) {\n        addSegment({\n          pitchDelta: -Math.PI / 90, // Gentler landing angle\n          lanes: [{ offset: 0, width: 7 }] // Slightly wider landing\n        });\n      }\n    }\n    \n    // Frozen tunnel - tight ice cave\n    for (let i = 0; i < 40; i++) {\n      const tunnelCurve = Math.sin(i * 0.1) * Math.PI / 30;\n      const tunnelBank = Math.cos(i * 0.08) * Math.PI / 50;\n      \n      addSegment({\n        yawDelta: tunnelCurve,\n        pitchDelta: Math.sin(i * 0.15) * Math.PI / 120,\n        rollDelta: tunnelBank,\n        lanes: [{ offset: 0, width: 5 }] // Very tight!\n      });\n    }\n    \n    // Glacier slide - thrilling descent section\n    \n    // Start at glacier peak\n    for (let i = 0; i < 10; i++) {\n      addSegment({\n        pitchDelta: 0,\n        yawDelta: 0,\n        rollDelta: 0\n      });\n    }\n    \n    // Epic glacier slide down - FIXED camera issue with gentler angles\n    for (let i = 0; i < 45; i++) {\n      const slidePhase = i / 45;\n      const curveIntensity = Math.sin(slidePhase * Math.PI * 3);\n      \n      // Gradual increase then decrease in steepness to avoid camera lock\n      let pitchAngle;\n      if (i < 10) {\n        pitchAngle = -Math.PI / 80 * (i / 10); // Gradual steepening\n      } else if (i < 35) {\n        pitchAngle = -Math.PI / 80; // Manageable consistent descent\n      } else {\n        pitchAngle = -Math.PI / 80 * ((45 - i) / 10); // Gradual leveling\n      }\n      \n      addSegment({\n        pitchDelta: pitchAngle, // Much gentler descent\n        yawDelta: curveIntensity * Math.PI / 50, // Weaving path\n        rollDelta: curveIntensity * Math.PI / 60, // Banking\n        // Removed boosts - descent provides speed\n        lanes: [{ \n          offset: 0, \n          width: 7 + Math.sin(i * 0.1) * 2 // Variable width ice channels\n        }]\n      });\n    }\n    \n    // Ice bridge finale - narrow and precarious\n    // Approach\n    for (let i = 0; i < 10; i++) {\n      addSegment({\n        yawDelta: 0,\n        pitchDelta: 0,\n        rollDelta: 0\n      });\n    }\n    \n    // The bridge - precision required (reduced banking)\n    for (let i = 0; i < 6; i++) {\n      addSegment({ rollDelta: Math.PI / 60 }); // Gentler banking\n    }\n    \n    for (let i = 0; i < 30; i++) {\n      addSegment({\n        yawDelta: Math.PI / 60,\n        pitchDelta: Math.cos(i * 0.2) * Math.PI / 150,\n        lanes: [{ offset: 0, width: 5 }], // Still narrow but more manageable\n        rollDelta: 0\n      });\n    }\n    \n    for (let i = 0; i < 6; i++) {\n      addSegment({ rollDelta: -Math.PI / 60 });\n    }\n    \n    // Ice slide section - thrilling descent (fixed camera angle)\n    for (let i = 0; i < 20; i++) {\n      const slideIntensity = i / 20;\n      addSegment({\n        yawDelta: Math.sin(i * 0.15) * Math.PI / 80, // Weaving ice slide\n        pitchDelta: -Math.PI / 90, // Much gentler descent to avoid camera lock\n        rollDelta: Math.sin(i * 0.2) * Math.PI / 100,\n        lanes: [{ offset: 0, width: 6 + slideIntensity * 3 }] // Widens as you go faster\n      });\n    }\n    \n    // Transition to finish - proper ending instead of vertical climb\n    for (let i = 0; i < 10; i++) {\n      addSegment({\n        pitchDelta: i < 5 ? -Math.PI / 80 : 0, // Level out gradually\n        yawDelta: 0,\n        rollDelta: 0,\n        lanes: [{ offset: 0, width: 12 }] // Wide finish area\n      });\n    }\n    \n    // Victory straight\n    for (let i = 0; i < 15; i++) {\n      addSegment({\n        yawDelta: 0,\n        pitchDelta: 0,\n        rollDelta: 0,\n        lanes: [{ offset: 0, width: 12 }],\n        isFinishLine: (i === 14)\n      });\n    }\n  }\n};"],"names":["Level19","addSegment","i","slalomGates","gate","crevasse","tunnelCurve","tunnelBank","slidePhase","curveIntensity","pitchAngle","slideIntensity"],"mappings":"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"}