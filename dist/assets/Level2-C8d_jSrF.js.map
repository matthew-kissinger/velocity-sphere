{"version":3,"file":"Level2-C8d_jSrF.js","sources":["../../src/tracks/levels/Level2.js"],"sourcesContent":["/**\n * Level 2 - Neon Grid\n * Futuristic track with tech aesthetics\n */\n\nexport default {\n  name: \"Neon Grid\",\n  description: \"Navigate through digital pathways with precise timing\",\n  difficulty: 3,\n  shader: \"tech-grid\", // Tech grid shader for variety\n  skybox: \"neon-city\", // Futuristic skybox to match tech theme\n  \n  generateTrack(addSegment) {\n    // Level 2: original rainbow circuit with a moderate jump and split\n    // --- Section 1: Starting straight with boost pads ---\n    const startCount = 40;\n    for (let i = 0; i < startCount; i++) {\n      addSegment({\n        yawDelta: 0,\n        pitchDelta: 0,\n        rollDelta: 0,\n        isStartLine: (i === 0)\n      });\n    }\n    \n    // --- Section 2: Banked left curve (quarter turn) ---\n    const curveCount = 30;\n    const totalYawLeft = -Math.PI / 2;\n    const yawStepLeft = totalYawLeft / curveCount;\n    const bankAngle = -Math.PI / 6;\n    for (let i = 0; i < curveCount; i++) {\n      let rollDelta = 0;\n      if (i < curveCount / 3) {\n        rollDelta = bankAngle / (curveCount / 3);\n      } else if (i > 2 * curveCount / 3) {\n        rollDelta = -bankAngle / (curveCount / 3);\n      }\n      addSegment({ yawDelta: yawStepLeft, rollDelta });\n    }\n    \n    // --- Section 3: Hill up and down ---\n    const hillCount2 = 20;\n    const maxHillAngle2 = Math.PI / 18;\n    for (let i = 0; i < hillCount2; i++) {\n      const pitchDelta = (i < hillCount2 / 2 ? maxHillAngle2 / (hillCount2 / 2) : -maxHillAngle2 / (hillCount2 / 2));\n      addSegment({ pitchDelta });\n    }\n    \n    // --- Section 4: Big jump (hero moment) ---\n    // Ramp up\n    const rampCount = 10;\n    const rampAngle = Math.PI / 6;\n    for (let i = 0; i < rampCount; i++) {\n      addSegment({ pitchDelta: rampAngle / rampCount });\n    }\n    // Gap\n    const gapCount = 4;\n    for (let i = 0; i < gapCount; i++) {\n      addSegment({ isGap: true });\n    }\n    // Ramp down\n    const rampDownCount = 10;\n    for (let i = 0; i < rampDownCount; i++) {\n      addSegment({ pitchDelta: -rampAngle / rampDownCount });\n    }\n    \n    // --- Section 5: Split lanes (risk/reward) ---\n    const splitCount = 30;\n    for (let i = 0; i < splitCount; i++) {\n      const lanes = [\n        { offset: -6.0, width: 4.0 },  // Removed speed pads\n        { offset: 6.0,  width: 7.0 }\n      ];\n      addSegment({ lanes });\n    }\n    \n    // --- Section 6: Banked right curve ---\n    const rightCurveCount = 30;\n    const totalYawRight = Math.PI / 2;\n    const yawStepRight = totalYawRight / rightCurveCount;\n    const bankAngleRight = Math.PI / 6;\n    for (let i = 0; i < rightCurveCount; i++) {\n      let rollDelta = 0;\n      if (i < rightCurveCount / 3) {\n        rollDelta = bankAngleRight / (rightCurveCount / 3);\n      } else if (i > 2 * rightCurveCount / 3) {\n        rollDelta = -bankAngleRight / (rightCurveCount / 3);\n      }\n      addSegment({ yawDelta: yawStepRight, rollDelta });\n    }\n    \n    // --- Section 7: Final straight to the finish line ---\n    const finishCount2 = 30;\n    for (let i = 0; i < finishCount2; i++) {\n      addSegment({\n        yawDelta: 0,\n        pitchDelta: 0,\n        rollDelta: 0,\n        isFinishLine: (i === finishCount2 - 1)\n      });\n    }\n  }\n};"],"names":["Level2","addSegment","i","curveCount","yawStepLeft","bankAngle","rollDelta","hillCount2","maxHillAngle2","pitchDelta","rampCount","rampAngle","gapCount","rampDownCount","splitCount","rightCurveCount","yawStepRight","bankAngleRight","finishCount2"],"mappings":"AAKA,MAAAA,EAAe,CACb,KAAM,YACN,YAAa,wDACb,WAAY,EACZ,OAAQ,YACR,OAAQ,YAER,cAAcC,EAAY,CAIxB,QAASC,EAAI,EAAGA,EAAI,GAAYA,IAC9BD,EAAW,CACT,SAAU,EACV,WAAY,EACZ,UAAW,EACX,YAAcC,IAAM,CAC5B,CAAO,EAIH,MAAMC,EAAa,GAEbC,EADe,CAAC,KAAK,GAAK,EACGD,EAC7BE,EAAY,CAAC,KAAK,GAAK,EAC7B,QAASH,EAAI,EAAGA,EAAIC,EAAYD,IAAK,CACnC,IAAII,EAAY,EACZJ,EAAIC,EAAa,EACnBG,EAAYD,GAAaF,EAAa,GAC7BD,EAAI,EAAIC,EAAa,IAC9BG,EAAY,CAACD,GAAaF,EAAa,IAEzCF,EAAW,CAAE,SAAUG,EAAa,UAAAE,CAAS,CAAE,CACjD,CAGA,MAAMC,EAAa,GACbC,EAAgB,KAAK,GAAK,GAChC,QAASN,EAAI,EAAGA,EAAIK,EAAYL,IAAK,CACnC,MAAMO,EAAcP,EAAIK,EAAa,EAAIC,GAAiBD,EAAa,GAAK,CAACC,GAAiBD,EAAa,GAC3GN,EAAW,CAAE,WAAAQ,EAAY,CAC3B,CAIA,MAAMC,EAAY,GACZC,EAAY,KAAK,GAAK,EAC5B,QAAST,EAAI,EAAGA,EAAIQ,EAAWR,IAC7BD,EAAW,CAAE,WAAYU,EAAYD,CAAS,CAAE,EAGlD,MAAME,EAAW,EACjB,QAASV,EAAI,EAAGA,EAAIU,EAAUV,IAC5BD,EAAW,CAAE,MAAO,GAAM,EAG5B,MAAMY,EAAgB,GACtB,QAASX,EAAI,EAAGA,EAAIW,EAAeX,IACjCD,EAAW,CAAE,WAAY,CAACU,EAAYE,CAAa,CAAE,EAIvD,MAAMC,EAAa,GACnB,QAASZ,EAAI,EAAGA,EAAIY,EAAYZ,IAK9BD,EAAW,CAAE,MAJC,CACZ,CAAE,OAAQ,GAAM,MAAO,CAAG,EAC1B,CAAE,OAAQ,EAAM,MAAO,CAAG,CAClC,EAC0B,EAItB,MAAMc,EAAkB,GAElBC,EADgB,KAAK,GAAK,EACKD,EAC/BE,EAAiB,KAAK,GAAK,EACjC,QAASf,EAAI,EAAGA,EAAIa,EAAiBb,IAAK,CACxC,IAAII,EAAY,EACZJ,EAAIa,EAAkB,EACxBT,EAAYW,GAAkBF,EAAkB,GACvCb,EAAI,EAAIa,EAAkB,IACnCT,EAAY,CAACW,GAAkBF,EAAkB,IAEnDd,EAAW,CAAE,SAAUe,EAAc,UAAAV,CAAS,CAAE,CAClD,CAGA,MAAMY,EAAe,GACrB,QAAShB,EAAI,EAAGA,EAAIgB,EAAchB,IAChCD,EAAW,CACT,SAAU,EACV,WAAY,EACZ,UAAW,EACX,aAAeC,IAAMgB,EAAe,CAC5C,CAAO,CAEL,CACF"}