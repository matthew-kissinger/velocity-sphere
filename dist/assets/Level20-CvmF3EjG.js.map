{"version":3,"file":"Level20-CvmF3EjG.js","sources":["../../src/tracks/levels/Level20.js"],"sourcesContent":["/**\n * Level 20 - Elemental Nexus (COMPLETELY REDESIGNED)\n * The ultimate test combining all elements in a logical progression\n * Extreme difficulty but fair and achievable\n */\n\nexport default {\n  name: \"Elemental Nexus\",\n  description: \"Master all elements in the ultimate racing crucible\",\n  difficulty: 6,\n  shader: \"rainbow-flow\", \n  skybox: \"space-deep\",\n  \n  generateTrack(addSegment) {\n    // Grand entrance - epic start\n    for (let i = 0; i < 20; i++) {\n      addSegment({\n        yawDelta: 0,\n        pitchDelta: 0,\n        rollDelta: 0,\n        isStartLine: (i === 0),\n        lanes: [{ offset: 0, width: 12 }] // Wide grand start\n      });\n    }\n    \n    // SECTION 1: Fire & Ice Duality\n    // Split path - choose fire (left) or ice (right)\n    for (let i = 0; i < 5; i++) {\n      const factor = i / 5;\n      addSegment({\n        lanes: [\n          { offset: -12 * factor, width: 8 }, // Fire path\n          { offset: 12 * factor, width: 8 }   // Ice path\n        ]\n      });\n    }\n    \n    // Parallel elemental challenges\n    for (let i = 0; i < 40; i++) {\n      if (i < 20) {\n        // Fire path: flowing lava curves, Ice path: slippery straights\n        addSegment({\n          lanes: [\n            { offset: -12, width: 8 }, // Fire\n            { offset: 12, width: 8 }    // Ice\n          ],\n          yawDelta: i % 4 < 2 ? Math.PI / 50 : -Math.PI / 50, // Fire curves\n          pitchDelta: Math.sin(i * 0.2) * Math.PI / 120, // Both undulate\n          isBoost: (i === 10) // Mid-section boost\n        });\n      } else {\n        // Converging paths\n        const convergeFactor = 1 - ((i - 20) / 20);\n        addSegment({\n          lanes: [\n            { offset: -12 * convergeFactor, width: 8 },\n            { offset: 12 * convergeFactor, width: 8 }\n          ],\n          pitchDelta: -Math.PI / 100 // Gentle descent\n        });\n      }\n    }\n    \n    // SECTION 2: Wind Serpentine\n    // Flowing S-curves through wind currents\n    const windSections = [\n      { angle: Math.PI / 2, segments: 25 },\n      { angle: -Math.PI / 1.8, segments: 30 },\n      { angle: Math.PI / 2.2, segments: 22 },\n      { angle: -Math.PI / 2.5, segments: 20 }\n    ];\n    \n    for (const section of windSections) {\n      // Bank into turn\n      for (let i = 0; i < 4; i++) {\n        addSegment({ \n          rollDelta: (section.angle > 0 ? 1 : -1) * Math.PI / 40,\n          lanes: [{ offset: 0, width: 10 }]\n        });\n      }\n      \n      // Execute flowing turn\n      for (let i = 0; i < section.segments; i++) {\n        const progress = i / section.segments;\n        addSegment({\n          yawDelta: section.angle / section.segments,\n          pitchDelta: Math.sin(progress * Math.PI * 2) * Math.PI / 150,\n          rollDelta: Math.sin(progress * Math.PI) * Math.PI / 60 * (section.angle > 0 ? 1 : -1),\n          lanes: [{ offset: 0, width: 9 }],\n          isBoost: (i === Math.floor(section.segments / 2)) // Mid-turn boost\n        });\n      }\n      \n      // Exit bank\n      for (let i = 0; i < 4; i++) {\n        addSegment({ \n          rollDelta: (section.angle > 0 ? -1 : 1) * Math.PI / 40,\n          lanes: [{ offset: 0, width: 10 }]\n        });\n      }\n    }\n    \n    // SECTION 3: Earth Ascent\n    // Climbing mountain switchbacks\n    for (let switchback = 0; switchback < 4; switchback++) {\n      // Climb approach\n      for (let i = 0; i < 15; i++) {\n        addSegment({\n          pitchDelta: Math.PI / 90, // Moderate climb\n          yawDelta: 0,\n          lanes: [{ offset: 0, width: 8 }],\n          isBoost: (i === 0) // Boost at start of each climb\n        });\n      }\n      \n      // Hairpin turn\n      const turnDir = switchback % 2 ? 1 : -1;\n      for (let i = 0; i < 12; i++) {\n        addSegment({\n          yawDelta: turnDir * Math.PI / 12, // 180Â° turn\n          pitchDelta: 0,\n          rollDelta: turnDir * Math.PI / 30,\n          lanes: [{ offset: 0, width: 10 }] // Wider for the turn\n        });\n      }\n    }\n    \n    // SECTION 4: Lightning Sprint\n    // High-speed zigzag through energy field\n    for (let i = 0; i < 50; i++) {\n      const zigzag = Math.floor(i / 5) % 2 ? 1 : -1;\n      addSegment({\n        yawDelta: zigzag * Math.PI / 60,\n        pitchDelta: -Math.PI / 200, // Slight descent for speed\n        rollDelta: zigzag * Math.PI / 80,\n        lanes: [{ offset: 0, width: 11 }],\n        isBoost: (i % 10 === 0) // Regular boosts\n      });\n    }\n    \n    // SECTION 5: Void Drop\n    // Epic controlled descent through space\n    for (let i = 0; i < 30; i++) {\n      const spiralProgress = i / 30;\n      addSegment({\n        yawDelta: Math.PI / 40, // Gentle spiral\n        pitchDelta: -Math.PI / 35 - (spiralProgress * Math.PI / 100), // Accelerating descent\n        rollDelta: Math.PI / 50,\n        lanes: [{ offset: 0, width: 10 + spiralProgress * 5 }], // Widening path\n        isBoost: (i % 5 === 0) // Frequent boosts for epic speed\n      });\n    }\n    \n    // SECTION 6: Elemental Harmony\n    // All elements combined - the final test\n    for (let i = 0; i < 40; i++) {\n      // Bounce pads for variety\n      if (i === 10 || i === 25) {\n        addSegment({\n          isBouncePad: true,\n          lanes: [{ offset: 0, width: 12 }]\n        });\n      }\n      \n      // Varied geometry combining all previous elements\n      const phase = i / 40;\n      addSegment({\n        yawDelta: Math.sin(i * 0.1) * Math.PI / 50,\n        pitchDelta: Math.cos(i * 0.15) * Math.PI / 100,\n        rollDelta: Math.sin(i * 0.2) * Math.PI / 120,\n        lanes: [{ \n          offset: Math.sin(i * 0.05) * 2, \n          width: 10 + Math.sin(i * 0.1) * 2 \n        }],\n        isBoost: (i >= 30 && i <= 35) // Final boost section\n      });\n    }\n    \n    // Grand Finale - victory runway\n    for (let i = 0; i < 20; i++) {\n      addSegment({\n        yawDelta: 0,\n        pitchDelta: 0,\n        rollDelta: 0,\n        lanes: [{ offset: 0, width: 15 }], // Extra wide victory lane\n        isBoost: (i >= 10 && i <= 15), // Victory boost\n        isFinishLine: (i === 19)\n      });\n    }\n  }\n};"],"names":["Level20","addSegment","i","factor","convergeFactor","windSections","section","progress","switchback","turnDir","zigzag","spiralProgress"],"mappings":"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"}