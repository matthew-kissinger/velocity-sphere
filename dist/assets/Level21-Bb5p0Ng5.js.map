{"version":3,"file":"Level21-Bb5p0Ng5.js","sources":["../../src/tracks/levels/Level21.js"],"sourcesContent":["/**\r\n * Level 21 - Quantum Flux\r\n * Teleportation-inspired track with phasing lanes and quantum mechanics\r\n * Medium difficulty with mind-bending transitions\r\n */\r\n\r\nexport default {\r\n  name: \"Quantum Flux\",\r\n  description: \"Phase through quantum dimensions in this reality-bending race\",\r\n  difficulty: 4, // Increased to Hard\r\n  shader: \"energy-pulse\",\r\n  skybox: \"space-deep\",\r\n  \r\n  generateTrack(addSegment) {\r\n    // Quantum entrance - stable reality\r\n    for (let i = 0; i < 15; i++) {\r\n      addSegment({\r\n        yawDelta: 0,\r\n        pitchDelta: 0,\r\n        rollDelta: 0,\r\n        isStartLine: (i === 0)\r\n      });\r\n    }\r\n    \r\n    // First quantum split - lanes phase in and out\r\n    for (let i = 0; i < 5; i++) {\r\n      const factor = i / 5;\r\n      addSegment({\r\n        lanes: [\r\n          { offset: -8 * factor, width: 8 },\r\n          { offset: 8 * factor, width: 8 }\r\n        ]\r\n      });\r\n    }\r\n    \r\n    // Quantum tunneling section - alternating existence\r\n    for (let i = 0; i < 30; i++) {\r\n      const phase = Math.sin(i * 0.3);\r\n      const leftExists = phase > -0.3;\r\n      const rightExists = phase < 0.3;\r\n      \r\n      // Create phasing effect where lanes disappear and reappear\r\n      if (i % 6 < 2) {\r\n        // Both lanes exist\r\n        addSegment({\r\n          lanes: [\r\n            { offset: -8, width: 7 },\r\n            { offset: 8, width: 7 }\r\n          ],\r\n          yawDelta: Math.sin(i * 0.1) * Math.PI / 80\r\n        });\r\n      } else if (i % 6 < 4) {\r\n        // Only one lane exists at a time\r\n        addSegment({\r\n          lanes: [\r\n            { offset: -8, width: 7, isGap: !leftExists },\r\n            { offset: 8, width: 7, isGap: !rightExists }\r\n          ],\r\n          yawDelta: Math.sin(i * 0.1) * Math.PI / 80\r\n        });\r\n      } else {\r\n        // Quantum jump required\r\n        addSegment({\r\n          lanes: [\r\n            { offset: -8, width: 7, isGap: true },\r\n            { offset: 8, width: 7, isGap: true }\r\n          ]\r\n        });\r\n      }\r\n    }\r\n    \r\n    // Merge quantum states\r\n    for (let i = 0; i < 5; i++) {\r\n      const factor = 1 - (i / 5);\r\n      addSegment({\r\n        lanes: [\r\n          { offset: -8 * factor, width: 7 },\r\n          { offset: 8 * factor, width: 7 }\r\n        ]\r\n      });\r\n    }\r\n    \r\n    // Probability wave section - gentler undulating track\r\n    for (let i = 0; i < 40; i++) {\r\n      const wave = Math.sin(i * 0.15) * 0.5; // Reduced intensity\r\n      addSegment({\r\n        yawDelta: wave * Math.PI / 80, // Gentler turns\r\n        pitchDelta: Math.sin(i * 0.2) * Math.PI / 150, // Smaller elevation changes\r\n        rollDelta: wave * Math.PI / 120, // Much less banking\r\n        isBoost: (i === 20) // Quantum acceleration point\r\n      });\r\n    }\r\n    \r\n    // Entanglement curves - paired turns with recovery sections\r\n    const entangledTurns = [\r\n      { angle: Math.PI / 4, segments: 18 }, // Gentler angle, more segments\r\n      { angle: -Math.PI / 4, segments: 18 },\r\n      { angle: Math.PI / 5, segments: 15 },\r\n      { angle: -Math.PI / 5, segments: 15 }\r\n    ];\r\n    \r\n    for (let turnIndex = 0; turnIndex < entangledTurns.length; turnIndex++) {\r\n      const turn = entangledTurns[turnIndex];\r\n      \r\n      // Recovery straight before turn\r\n      for (let i = 0; i < 8; i++) {\r\n        addSegment({\r\n          yawDelta: 0,\r\n          pitchDelta: 0,\r\n          rollDelta: 0\r\n        });\r\n      }\r\n      \r\n      // Gradual bank into turn\r\n      for (let i = 0; i < 5; i++) {\r\n        addSegment({ \r\n          rollDelta: (turn.angle > 0 ? 1 : -1) * Math.PI / 100 // Gentler banking\r\n        });\r\n      }\r\n      \r\n      // Execute entangled turn\r\n      for (let i = 0; i < turn.segments; i++) {\r\n        addSegment({\r\n          yawDelta: turn.angle / turn.segments,\r\n          pitchDelta: 0, // Flat turns are easier\r\n          rollDelta: 0\r\n        });\r\n      }\r\n      \r\n      // Gradual exit bank\r\n      for (let i = 0; i < 5; i++) {\r\n        addSegment({ \r\n          rollDelta: (turn.angle > 0 ? -1 : 1) * Math.PI / 100\r\n        });\r\n      }\r\n    }\r\n    \r\n    // Superposition straightaway - multiple possible paths\r\n    for (let i = 0; i < 25; i++) {\r\n      if (i < 5) {\r\n        // Split into three possibilities\r\n        const factor = i / 5;\r\n        addSegment({\r\n          lanes: [\r\n            { offset: -10 * factor, width: 6 },\r\n            { offset: 0, width: 8 },\r\n            { offset: 10 * factor, width: 6 }\r\n          ]\r\n        });\r\n      } else if (i < 20) {\r\n        // Three parallel quantum states\r\n        addSegment({\r\n          lanes: [\r\n            { offset: -10, width: 6 },\r\n            { offset: 0, width: 8 },\r\n            { offset: 10, width: 6 }\r\n          ],\r\n          isBoost: (i === 12 && true) // Center lane boost\r\n        });\r\n      } else {\r\n        // Collapse back to single state\r\n        const factor = 1 - ((i - 20) / 5);\r\n        addSegment({\r\n          lanes: [\r\n            { offset: -10 * factor, width: 6 },\r\n            { offset: 0, width: 8 },\r\n            { offset: 10 * factor, width: 6 }\r\n          ]\r\n        });\r\n      }\r\n    }\r\n    \r\n    // Quantum leap finale - big jump with dimensional shift\r\n    for (let i = 0; i < 8; i++) {\r\n      addSegment({ \r\n        pitchDelta: Math.PI / 40,\r\n        isBoost: (i === 6)\r\n      });\r\n    }\r\n    \r\n    // Quantum void\r\n    for (let i = 0; i < 5; i++) {\r\n      addSegment({ isGap: true });\r\n    }\r\n    \r\n    // Reality stabilization landing\r\n    for (let i = 0; i < 8; i++) {\r\n      addSegment({ pitchDelta: -Math.PI / 40 });\r\n    }\r\n    \r\n    // Return to stable spacetime\r\n    for (let i = 0; i < 20; i++) {\r\n      addSegment({\r\n        yawDelta: 0,\r\n        pitchDelta: 0,\r\n        rollDelta: 0,\r\n        isBoost: (i >= 10 && i <= 15),\r\n        isFinishLine: (i === 19)\r\n      });\r\n    }\r\n  }\r\n};"],"names":["Level21","addSegment","i","factor","phase","leftExists","rightExists","wave","entangledTurns","turnIndex","turn"],"mappings":"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"}