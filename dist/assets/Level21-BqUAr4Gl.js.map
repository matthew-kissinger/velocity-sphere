{"version":3,"file":"Level21-BqUAr4Gl.js","sources":["../../src/tracks/levels/Level21.js"],"sourcesContent":["/**\n * Level 21 - Quantum Flux\n * Teleportation-inspired track with phasing lanes and quantum mechanics\n * Medium difficulty with mind-bending transitions\n */\n\nexport default {\n  name: \"Quantum Flux\",\n  description: \"Phase through quantum dimensions in this reality-bending race\",\n  difficulty: 4, // Increased to Hard\n  shader: \"energy-pulse\",\n  skybox: \"space-deep\",\n  \n  generateTrack(addSegment) {\n    // Quantum entrance - stable reality\n    for (let i = 0; i < 15; i++) {\n      addSegment({\n        yawDelta: 0,\n        pitchDelta: 0,\n        rollDelta: 0,\n        isStartLine: (i === 0)\n      });\n    }\n    \n    // First quantum split - lanes phase in and out\n    for (let i = 0; i < 5; i++) {\n      const factor = i / 5;\n      addSegment({\n        lanes: [\n          { offset: -8 * factor, width: 8 },\n          { offset: 8 * factor, width: 8 }\n        ]\n      });\n    }\n    \n    // Quantum tunneling section - alternating existence\n    for (let i = 0; i < 30; i++) {\n      const phase = Math.sin(i * 0.3);\n      const leftExists = phase > -0.3;\n      const rightExists = phase < 0.3;\n      \n      // Create phasing effect where lanes disappear and reappear\n      if (i % 6 < 2) {\n        // Both lanes exist\n        addSegment({\n          lanes: [\n            { offset: -8, width: 7 },\n            { offset: 8, width: 7 }\n          ],\n          yawDelta: Math.sin(i * 0.1) * Math.PI / 80\n        });\n      } else if (i % 6 < 4) {\n        // Only one lane exists at a time\n        addSegment({\n          lanes: [\n            { offset: -8, width: 7, isGap: !leftExists },\n            { offset: 8, width: 7, isGap: !rightExists }\n          ],\n          yawDelta: Math.sin(i * 0.1) * Math.PI / 80\n        });\n      } else {\n        // Quantum jump required\n        addSegment({\n          lanes: [\n            { offset: -8, width: 7, isGap: true },\n            { offset: 8, width: 7, isGap: true }\n          ]\n        });\n      }\n    }\n    \n    // Merge quantum states\n    for (let i = 0; i < 5; i++) {\n      const factor = 1 - (i / 5);\n      addSegment({\n        lanes: [\n          { offset: -8 * factor, width: 7 },\n          { offset: 8 * factor, width: 7 }\n        ]\n      });\n    }\n    \n    // Probability wave section - gentler undulating track\n    for (let i = 0; i < 40; i++) {\n      const wave = Math.sin(i * 0.15) * 0.5; // Reduced intensity\n      addSegment({\n        yawDelta: wave * Math.PI / 80, // Gentler turns\n        pitchDelta: Math.sin(i * 0.2) * Math.PI / 150, // Smaller elevation changes\n        rollDelta: wave * Math.PI / 120 // Much less banking\n      });\n    }\n    \n    // Entanglement curves - paired turns with recovery sections\n    const entangledTurns = [\n      { angle: Math.PI / 4, segments: 18 }, // Gentler angle, more segments\n      { angle: -Math.PI / 4, segments: 18 },\n      { angle: Math.PI / 5, segments: 15 },\n      { angle: -Math.PI / 5, segments: 15 }\n    ];\n    \n    for (let turnIndex = 0; turnIndex < entangledTurns.length; turnIndex++) {\n      const turn = entangledTurns[turnIndex];\n      \n      // Recovery straight before turn\n      for (let i = 0; i < 8; i++) {\n        addSegment({\n          yawDelta: 0,\n          pitchDelta: 0,\n          rollDelta: 0\n        });\n      }\n      \n      // Gradual bank into turn\n      for (let i = 0; i < 5; i++) {\n        addSegment({ \n          rollDelta: (turn.angle > 0 ? 1 : -1) * Math.PI / 100 // Gentler banking\n        });\n      }\n      \n      // Execute entangled turn\n      for (let i = 0; i < turn.segments; i++) {\n        addSegment({\n          yawDelta: turn.angle / turn.segments,\n          pitchDelta: 0, // Flat turns are easier\n          rollDelta: 0\n        });\n      }\n      \n      // Gradual exit bank\n      for (let i = 0; i < 5; i++) {\n        addSegment({ \n          rollDelta: (turn.angle > 0 ? -1 : 1) * Math.PI / 100\n        });\n      }\n    }\n    \n    // Superposition straightaway - multiple possible paths\n    for (let i = 0; i < 25; i++) {\n      if (i < 5) {\n        // Split into three possibilities\n        const factor = i / 5;\n        addSegment({\n          lanes: [\n            { offset: -10 * factor, width: 6 },\n            { offset: 0, width: 8 },\n            { offset: 10 * factor, width: 6 }\n          ]\n        });\n      } else if (i < 20) {\n        // Three parallel quantum states\n        addSegment({\n          lanes: [\n            { offset: -10, width: 6 },\n            { offset: 0, width: 8 },\n            { offset: 10, width: 6 }\n          ],\n          // No boost needed - choosing lanes is the challenge\n        });\n      } else {\n        // Collapse back to single state\n        const factor = 1 - ((i - 20) / 5);\n        addSegment({\n          lanes: [\n            { offset: -10 * factor, width: 6 },\n            { offset: 0, width: 8 },\n            { offset: 10 * factor, width: 6 }\n          ]\n        });\n      }\n    }\n    \n    // Quantum leap finale - big jump with dimensional shift\n    for (let i = 0; i < 8; i++) {\n      addSegment({ \n        pitchDelta: Math.PI / 40\n      });\n    }\n    \n    // Quantum void\n    for (let i = 0; i < 5; i++) {\n      addSegment({ isGap: true });\n    }\n    \n    // Reality stabilization landing\n    for (let i = 0; i < 8; i++) {\n      addSegment({ pitchDelta: -Math.PI / 40 });\n    }\n    \n    // Return to stable spacetime\n    for (let i = 0; i < 20; i++) {\n      addSegment({\n        yawDelta: 0,\n        pitchDelta: 0,\n        rollDelta: 0,\n        isFinishLine: (i === 19)\n      });\n    }\n  }\n};"],"names":["Level21","addSegment","i","factor","phase","leftExists","rightExists","wave","entangledTurns","turnIndex","turn"],"mappings":"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"}