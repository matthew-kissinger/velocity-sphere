{"version":3,"file":"Level23-C-UHBbRP.js","sources":["../../src/tracks/levels/Level23.js"],"sourcesContent":["/**\n * Level 23 - Channel 23\n * Chase the northern lights through icy canyons\n * Hard difficulty with flowing track design\n */\n\nexport default {\n  name: \"Channel 23\",\n  description: \"Follow the dancing lights through frozen valleys\",\n  difficulty: 4,\n  shader: \"crystal-surface\",\n  skybox: \"aurora-dance\",\n  \n  generateTrack(addSegment) {\n    // Scenic start - wide valley entrance\n    for (let i = 0; i < 20; i++) {\n      addSegment({\n        yawDelta: 0,\n        pitchDelta: 0,\n        rollDelta: 0,\n        isStartLine: (i === 0),\n        lanes: [{ offset: 0, width: 12 }]\n      });\n    }\n    \n    // First aurora ribbon - flowing S-curves\n    for (let i = 0; i < 40; i++) {\n      const ribbonFlow = Math.sin(i * 0.15);\n      addSegment({\n        yawDelta: ribbonFlow * Math.PI / 60,\n        pitchDelta: Math.cos(i * 0.1) * Math.PI / 200, // Gentle hills\n        rollDelta: ribbonFlow * Math.PI / 100, // Moderate banking\n        lanes: [{ offset: 0, width: 10 }]\n      });\n    }\n    \n    // Ice bridge section - narrow but straight\n    for (let i = 0; i < 15; i++) {\n      addSegment({\n        yawDelta: 0,\n        pitchDelta: 0,\n        rollDelta: 0,\n        lanes: [{ offset: 0, width: 6 }]\n      });\n    }\n    \n    // Canyon run - winding path with walls\n    const canyonTurns = [\n      { angle: Math.PI / 3, segments: 20 },\n      { angle: -Math.PI / 2.5, segments: 25 },\n      { angle: Math.PI / 4, segments: 18 },\n      { angle: -Math.PI / 3.5, segments: 22 }\n    ];\n    \n    for (const turn of canyonTurns) {\n      // Approach straight\n      for (let i = 0; i < 8; i++) {\n        addSegment({\n          yawDelta: 0,\n          pitchDelta: 0,\n          rollDelta: 0,\n          lanes: [{ offset: 0, width: 9 }]\n        });\n      }\n      \n      // Banked turn\n      for (let i = 0; i < 5; i++) {\n        addSegment({\n          rollDelta: (turn.angle > 0 ? 1 : -1) * Math.PI / 80\n        });\n      }\n      \n      for (let i = 0; i < turn.segments; i++) {\n        addSegment({\n          yawDelta: turn.angle / turn.segments,\n          pitchDelta: Math.sin(i * 0.2) * Math.PI / 250,\n          rollDelta: 0,\n          lanes: [{ offset: 0, width: 8 }]\n        });\n      }\n      \n      for (let i = 0; i < 5; i++) {\n        addSegment({\n          rollDelta: (turn.angle > 0 ? -1 : 1) * Math.PI / 80\n        });\n      }\n    }\n    \n    // Aurora dive - descending through light curtains\n    for (let i = 0; i < 30; i++) {\n      const diveProgress = i / 30;\n      addSegment({\n        yawDelta: Math.sin(i * 0.2) * Math.PI / 80,\n        pitchDelta: -Math.PI / 100, // Controlled descent\n        rollDelta: Math.sin(i * 0.2) * Math.PI / 120,\n        lanes: [{ offset: 0, width: 10 }] // Fixed width for performance\n      });\n    }\n    \n    // Ice field jumps - series of gaps\n    for (let jump = 0; jump < 4; jump++) {\n      // Run-up\n      for (let i = 0; i < 10; i++) {\n        addSegment({\n          yawDelta: 0,\n          pitchDelta: i > 6 ? Math.PI / 80 : 0,\n          rollDelta: 0,\n          lanes: [{ offset: 0, width: 9 }]\n        });\n      }\n      \n      // Gap\n      for (let i = 0; i < 2 + jump; i++) {\n        addSegment({ isGap: true });\n      }\n      \n      // Landing\n      for (let i = 0; i < 8; i++) {\n        addSegment({\n          pitchDelta: i < 4 ? -Math.PI / 60 : 0,\n          rollDelta: 0,\n          lanes: [{ offset: 0, width: 10 }]\n        });\n      }\n    }\n    \n    // Final aurora spiral - chase the lights\n    for (let i = 0; i < 50; i++) {\n      const spiralProgress = i / 50;\n      const lightChase = Math.sin(i * 0.12) * Math.cos(i * 0.08);\n      \n      addSegment({\n        yawDelta: Math.PI / 100, // Gentle continuous turn\n        pitchDelta: lightChase * Math.PI / 200,\n        rollDelta: Math.PI / 150, // Mild constant bank\n        lanes: [{ \n          offset: 0, // Fixed offset for performance \n          width: 9 \n        }]\n      });\n    }\n    \n    // Valley exit - wide finish\n    for (let i = 0; i < 20; i++) {\n      addSegment({\n        yawDelta: 0,\n        pitchDelta: 0,\n        rollDelta: 0,\n        lanes: [{ offset: 0, width: 12 }],\n        isFinishLine: (i === 19)\n      });\n    }\n  }\n};"],"names":["Level23","addSegment","i","ribbonFlow","canyonTurns","turn","jump","lightChase"],"mappings":"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"}