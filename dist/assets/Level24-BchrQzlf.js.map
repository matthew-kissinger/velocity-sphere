{"version":3,"file":"Level24-BchrQzlf.js","sources":["../../src/tracks/levels/Level24.js"],"sourcesContent":["/**\n * Level 24 - Street Racer\n * High-speed street racing without dynamic offsets\n * Performance optimized and more playable\n */\n\nexport default {\n  name: \"Street Racer\",\n  description: \"Race through city streets with speed and style\",\n  difficulty: 3,\n  shader: \"ocean-waves\",\n  skybox: \"neon-city\",\n  \n  generateTrack(addSegment) {\n    // City entrance - build speed\n    for (let i = 0; i < 20; i++) {\n      addSegment({\n        yawDelta: 0,\n        pitchDelta: 0,\n        rollDelta: 0,\n        isStartLine: (i === 0),\n        lanes: [{ offset: 0, width: 12 }]\n      });\n    }\n    \n    // Street corner series - clean banking without dynamic offsets\n    const streetCorners = [\n      { angle: Math.PI / 4, segments: 12 },    // 45° right\n      { angle: -Math.PI / 3, segments: 15 },   // 60° left\n      { angle: Math.PI / 2.5, segments: 18 },  // 72° right\n      { angle: -Math.PI / 4, segments: 12 }    // 45° left\n    ];\n    \n    for (const corner of streetCorners) {\n      // Approach straight\n      for (let i = 0; i < 8; i++) {\n        addSegment({\n          yawDelta: 0,\n          pitchDelta: 0,\n          rollDelta: 0,\n          lanes: [{ offset: 0, width: 11 }]\n        });\n      }\n      \n      // Bank into corner\n      const maxBank = Math.PI / 6; // 30° banking\n      for (let i = 0; i < 3; i++) {\n        addSegment({\n          rollDelta: (corner.angle > 0 ? 1 : -1) * maxBank / 3\n        });\n      }\n      \n      // The corner - NO dynamic offsets, just clean racing line\n      for (let i = 0; i < corner.segments; i++) {\n        addSegment({\n          yawDelta: corner.angle / corner.segments,\n          pitchDelta: 0,\n          rollDelta: 0,\n          lanes: [{ offset: 0, width: 10 }] // Fixed offset = performance!\n        });\n      }\n      \n      // Bank out\n      for (let i = 0; i < 3; i++) {\n        addSegment({\n          rollDelta: (corner.angle > 0 ? -1 : 1) * maxBank / 3\n        });\n      }\n      \n      // Exit straight\n      for (let i = 0; i < 6; i++) {\n        addSegment({\n          yawDelta: 0,\n          pitchDelta: 0,\n          rollDelta: 0\n        });\n      }\n    }\n    \n    // Highway section - high speed straight\n    for (let i = 0; i < 25; i++) {\n      const gentleWeave = Math.sin(i * 0.1) * Math.PI / 120;\n      \n      addSegment({\n        yawDelta: gentleWeave,\n        pitchDelta: 0,\n        rollDelta: 0,\n        lanes: [{ offset: 0, width: 14 }] // Wide highway\n      });\n    }\n    \n    // Urban chicane - quick left-right-left\n    const chicaneAngles = [\n      -Math.PI / 6, Math.PI / 4, -Math.PI / 6\n    ];\n    \n    for (const angle of chicaneAngles) {\n      // Quick turn\n      for (let i = 0; i < 8; i++) {\n        addSegment({\n          yawDelta: angle / 8,\n          pitchDelta: 0,\n          rollDelta: 0,\n          lanes: [{ offset: 0, width: 9 }]\n        });\n      }\n      \n      // Recovery\n      for (let i = 0; i < 4; i++) {\n        addSegment({\n          yawDelta: 0,\n          pitchDelta: 0,\n          rollDelta: 0\n        });\n      }\n    }\n    \n    // Overpass climb - gentle elevation gain\n    for (let i = 0; i < 15; i++) {\n      addSegment({\n        yawDelta: 0,\n        pitchDelta: Math.PI / 100,\n        rollDelta: 0,\n        lanes: [{ offset: 0, width: 11 }]\n      });\n    }\n    \n    // Overpass sweeper - banked curve at height\n    // Bank in\n    for (let i = 0; i < 4; i++) {\n      addSegment({ rollDelta: Math.PI / 16 });\n    }\n    \n    // Sweeping curve\n    for (let i = 0; i < 20; i++) {\n      addSegment({\n        yawDelta: Math.PI / 40,\n        pitchDelta: 0,\n        rollDelta: 0,\n        lanes: [{ offset: 0, width: 12 }]\n      });\n    }\n    \n    // Bank out\n    for (let i = 0; i < 4; i++) {\n      addSegment({ rollDelta: -Math.PI / 16 });\n    }\n    \n    // Bridge jump - moderate skill test\n    for (let i = 0; i < 8; i++) {\n      addSegment({\n        pitchDelta: i > 5 ? Math.PI / 50 : 0,\n        lanes: [{ offset: 0, width: 10 }]\n      });\n    }\n    \n    // Gap\n    for (let i = 0; i < 4; i++) {\n      addSegment({ isGap: true });\n    }\n    \n    // Landing\n    for (let i = 0; i < 8; i++) {\n      addSegment({\n        pitchDelta: i < 3 ? -Math.PI / 60 : 0,\n        lanes: [{ offset: 0, width: 13 }]\n      });\n    }\n    \n    // Downtown descent - gentle slope down\n    for (let i = 0; i < 20; i++) {\n      const cityFlow = Math.sin(i * 0.15) * Math.PI / 150;\n      \n      addSegment({\n        yawDelta: cityFlow,\n        pitchDelta: -Math.PI / 120,\n        rollDelta: 0,\n        lanes: [{ offset: 0, width: 11 }]\n      });\n    }\n    \n    // Final corner complex - technical but fair\n    const finalTurns = [\n      { angle: Math.PI / 3, segments: 15 },   // 60° right\n      { angle: -Math.PI / 2, segments: 18 }   // 90° left\n    ];\n    \n    for (const turn of finalTurns) {\n      // Bank in\n      for (let i = 0; i < 3; i++) {\n        addSegment({\n          rollDelta: (turn.angle > 0 ? 1 : -1) * Math.PI / 12\n        });\n      }\n      \n      // Turn\n      for (let i = 0; i < turn.segments; i++) {\n        addSegment({\n          yawDelta: turn.angle / turn.segments,\n          pitchDelta: 0,\n          rollDelta: 0,\n          lanes: [{ offset: 0, width: 10 }]\n        });\n      }\n      \n      // Bank out\n      for (let i = 0; i < 3; i++) {\n        addSegment({\n          rollDelta: (turn.angle > 0 ? -1 : 1) * Math.PI / 12\n        });\n      }\n      \n      // Recovery\n      for (let i = 0; i < 5; i++) {\n        addSegment({\n          yawDelta: 0,\n          pitchDelta: 0,\n          rollDelta: 0\n        });\n      }\n    }\n    \n    // Victory straight - finish in style\n    for (let i = 0; i < 20; i++) {\n      addSegment({\n        yawDelta: 0,\n        pitchDelta: 0,\n        rollDelta: 0,\n        lanes: [{ offset: 0, width: 14 }],\n        isFinishLine: (i === 19)\n      });\n    }\n  }\n};"],"names":["Level24","addSegment","i","streetCorners","corner","maxBank","gentleWeave","chicaneAngles","angle","cityFlow","finalTurns","turn"],"mappings":"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"}