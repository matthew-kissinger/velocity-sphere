{"version":3,"file":"Level27-CgUhuai4.js","sources":["../../src/tracks/levels/Level27.js"],"sourcesContent":["/**\r\n * Level 27 - Ice Canyon\r\n * Race through frozen canyons with ice bridges and crystal caves\r\n * Fixed to prevent track inversions and ensure proper banking\r\n */\r\n\r\nexport default {\r\n  name: \"Ice Canyon\",\r\n  description: \"Navigate frozen canyons and ice bridges at high speed\",\r\n  difficulty: 5,\r\n  shader: \"ice-crystal\",\r\n  skybox: \"arctic-night\",\r\n  \r\n  generateTrack(addSegment) {\r\n    const MAX_BANKING = Math.PI / 4; // 45 degrees maximum\r\n    \r\n    // Ice canyon entrance - wide starting straight\r\n    for (let i = 0; i < 20; i++) {\r\n      addSegment({\r\n        yawDelta: 0,\r\n        pitchDelta: 0,\r\n        rollDelta: 0,\r\n        isStartLine: (i === 0),\r\n        lanes: [{ offset: 0, width: 12 }]\r\n      });\r\n    }\r\n    \r\n    // First canyon turn - gentle right with proper banking\r\n    // Banking in\r\n    for (let i = 0; i < 6; i++) {\r\n      const bankProgress = i / 6;\r\n      addSegment({\r\n        yawDelta: 0,\r\n        pitchDelta: 0,\r\n        rollDelta: bankProgress * MAX_BANKING * 0.6\r\n      });\r\n    }\r\n    \r\n    // Banked turn\r\n    for (let i = 0; i < 25; i++) {\r\n      addSegment({\r\n        yawDelta: Math.PI / 50,\r\n        pitchDelta: 0,\r\n        rollDelta: 0,\r\n        lanes: [{ offset: 0, width: 10 }]\r\n      });\r\n    }\r\n    \r\n    // Banking out - must completely reset\r\n    for (let i = 0; i < 6; i++) {\r\n      const unbankProgress = (6 - i) / 6;\r\n      addSegment({\r\n        yawDelta: 0,\r\n        pitchDelta: 0,\r\n        rollDelta: unbankProgress * MAX_BANKING * 0.6\r\n      });\r\n    }\r\n    \r\n    // Stabilization straight\r\n    for (let i = 0; i < 8; i++) {\r\n      addSegment({\r\n        yawDelta: 0,\r\n        pitchDelta: 0,\r\n        rollDelta: 0,\r\n        lanes: [{ offset: 0, width: 11 }]\r\n      });\r\n    }\r\n    \r\n    // Snow drift corners - S-curve with proper banking reset\r\n    for (let turn = 0; turn < 2; turn++) {\r\n      const direction = turn === 0 ? 1 : -1;\r\n      \r\n      // Bank into turn\r\n      for (let i = 0; i < 5; i++) {\r\n        const bankProgress = i / 5;\r\n        addSegment({\r\n          yawDelta: 0,\r\n          pitchDelta: 0,\r\n          rollDelta: direction * bankProgress * MAX_BANKING * 0.7\r\n        });\r\n      }\r\n      \r\n      // The turn - no additional roll\r\n      for (let i = 0; i < 20; i++) {\r\n        addSegment({\r\n          yawDelta: direction * Math.PI / 60,\r\n          pitchDelta: Math.sin(i * 0.15) * Math.PI / 200,\r\n          rollDelta: 0,\r\n          lanes: [{ offset: 0, width: 11 }]\r\n        });\r\n      }\r\n      \r\n      // Unbank - complete reset\r\n      for (let i = 0; i < 5; i++) {\r\n        const unbankProgress = (5 - i) / 5;\r\n        addSegment({\r\n          yawDelta: 0,\r\n          pitchDelta: 0,\r\n          rollDelta: direction * unbankProgress * MAX_BANKING * 0.7\r\n        });\r\n      }\r\n      \r\n      // Stabilization between turns\r\n      for (let i = 0; i < 10; i++) {\r\n        addSegment({\r\n          yawDelta: 0,\r\n          pitchDelta: 0,\r\n          rollDelta: 0,\r\n          isBoostPowerup: (i === 5 && turn === 0)\r\n        });\r\n      }\r\n    }\r\n    \r\n    // Descent into canyon - gentle slope\r\n    for (let i = 0; i < 15; i++) {\r\n      addSegment({\r\n        yawDelta: 0,\r\n        pitchDelta: -Math.PI / 100,\r\n        rollDelta: 0,\r\n        lanes: [{ offset: 0, width: 10 }]\r\n      });\r\n    }\r\n    \r\n    // Frozen waterfall section - FIXED: no accumulating roll\r\n    for (let i = 0; i < 30; i++) {\r\n      // Create gentle weaving with yaw only - no roll accumulation\r\n      const weavePattern = Math.sin(i * 0.2) * 0.5;\r\n      addSegment({\r\n        yawDelta: weavePattern * Math.PI / 120,\r\n        pitchDelta: 0,\r\n        rollDelta: 0, // REMOVED problematic rolling\r\n        lanes: [{ offset: weavePattern * 1.5, width: 8 }]\r\n      });\r\n    }\r\n    \r\n    // Wide sweeping left turn with controlled banking\r\n    // Banking in\r\n    for (let i = 0; i < 6; i++) {\r\n      const bankProgress = i / 6;\r\n      addSegment({\r\n        yawDelta: 0,\r\n        pitchDelta: 0,\r\n        rollDelta: -bankProgress * MAX_BANKING * 0.8\r\n      });\r\n    }\r\n    \r\n    // Banked turn\r\n    for (let i = 0; i < 30; i++) {\r\n      addSegment({\r\n        yawDelta: -Math.PI / 45,\r\n        pitchDelta: 0,\r\n        rollDelta: 0,\r\n        lanes: [{ offset: 0, width: 12 }],\r\n        isBoost: (i === 15)\r\n      });\r\n    }\r\n    \r\n    // Banking out - complete reset\r\n    for (let i = 0; i < 6; i++) {\r\n      const unbankProgress = (6 - i) / 6;\r\n      addSegment({\r\n        yawDelta: 0,\r\n        pitchDelta: 0,\r\n        rollDelta: -unbankProgress * MAX_BANKING * 0.8\r\n      });\r\n    }\r\n    \r\n    // Canyon straight with boost\r\n    for (let i = 0; i < 20; i++) {\r\n      addSegment({\r\n        yawDelta: 0,\r\n        pitchDelta: 0,\r\n        rollDelta: 0,\r\n        lanes: [{ offset: 0, width: 10 }],\r\n        isBoost: (i >= 8 && i <= 12)\r\n      });\r\n    }\r\n    \r\n    // Ice bridge section - elevated with gentle curves\r\n    // Rise onto bridge\r\n    for (let i = 0; i < 10; i++) {\r\n      addSegment({\r\n        yawDelta: 0,\r\n        pitchDelta: Math.PI / 80,\r\n        rollDelta: 0\r\n      });\r\n    }\r\n    \r\n    // Bridge crossing - gentle S-curve with minimal banking\r\n    for (let i = 0; i < 25; i++) {\r\n      const curvePhase = i / 25;\r\n      let yawDelta = 0;\r\n      let rollDelta = 0;\r\n      \r\n      // First half: gentle right\r\n      if (curvePhase < 0.5) {\r\n        yawDelta = Math.sin(curvePhase * Math.PI) * Math.PI / 150;\r\n        rollDelta = Math.sin(curvePhase * Math.PI) * MAX_BANKING * 0.3;\r\n      }\r\n      // Second half: gentle left\r\n      else {\r\n        const secondPhase = (curvePhase - 0.5) * 2;\r\n        yawDelta = -Math.sin(secondPhase * Math.PI) * Math.PI / 150;\r\n        rollDelta = -Math.sin(secondPhase * Math.PI) * MAX_BANKING * 0.3;\r\n      }\r\n      \r\n      addSegment({\r\n        yawDelta: yawDelta,\r\n        pitchDelta: 0,\r\n        rollDelta: rollDelta,\r\n        lanes: [{ offset: 0, width: 9 }],\r\n        isBoostPowerup: (i === 12)\r\n      });\r\n    }\r\n    \r\n    // Descent from bridge\r\n    for (let i = 0; i < 10; i++) {\r\n      addSegment({\r\n        yawDelta: 0,\r\n        pitchDelta: -Math.PI / 80,\r\n        rollDelta: 0\r\n      });\r\n    }\r\n    \r\n    // Crystal cave section - FIXED: controlled winding\r\n    for (let i = 0; i < 40; i++) {\r\n      // Create winding path with yaw only - no dangerous roll accumulation\r\n      const caveWind = Math.sin(i * 0.1) * Math.cos(i * 0.07);\r\n      addSegment({\r\n        yawDelta: caveWind * Math.PI / 80,\r\n        pitchDelta: Math.sin(i * 0.08) * Math.PI / 200,\r\n        rollDelta: 0, // REMOVED problematic cave rolling\r\n        lanes: [{ offset: 0, width: 8 }]\r\n      });\r\n    }\r\n    \r\n    // Canyon exit - series of properly banked turns\r\n    const exitTurns = [\r\n      { angle: Math.PI / 3, segments: 20, bankingFactor: 0.7 },\r\n      { angle: -Math.PI / 4, segments: 18, bankingFactor: 0.6 }\r\n    ];\r\n    \r\n    for (const turn of exitTurns) {\r\n      // Approach straight\r\n      for (let i = 0; i < 8; i++) {\r\n        addSegment({\r\n          yawDelta: 0,\r\n          pitchDelta: 0,\r\n          rollDelta: 0\r\n        });\r\n      }\r\n      \r\n      // Banking in\r\n      for (let i = 0; i < 5; i++) {\r\n        const bankProgress = i / 5;\r\n        addSegment({\r\n          yawDelta: 0,\r\n          pitchDelta: 0,\r\n          rollDelta: (turn.angle > 0 ? 1 : -1) * bankProgress * MAX_BANKING * turn.bankingFactor\r\n        });\r\n      }\r\n      \r\n      // Banked turn\r\n      for (let i = 0; i < turn.segments; i++) {\r\n        addSegment({\r\n          yawDelta: turn.angle / turn.segments,\r\n          pitchDelta: 0,\r\n          rollDelta: 0,\r\n          lanes: [{ offset: 0, width: 11 }]\r\n        });\r\n      }\r\n      \r\n      // Banking out - complete reset\r\n      for (let i = 0; i < 5; i++) {\r\n        const unbankProgress = (5 - i) / 5;\r\n        addSegment({\r\n          yawDelta: 0,\r\n          pitchDelta: 0,\r\n          rollDelta: (turn.angle > 0 ? 1 : -1) * unbankProgress * MAX_BANKING * turn.bankingFactor\r\n        });\r\n      }\r\n    }\r\n    \r\n    // Final hairpin - challenging but safe\r\n    // Banking in\r\n    for (let i = 0; i < 7; i++) {\r\n      const bankProgress = i / 7;\r\n      addSegment({\r\n        yawDelta: 0,\r\n        pitchDelta: 0,\r\n        rollDelta: bankProgress * MAX_BANKING * 0.9\r\n      });\r\n    }\r\n    \r\n    // Hairpin turn\r\n    for (let i = 0; i < 35; i++) {\r\n      addSegment({\r\n        yawDelta: Math.PI / 35,\r\n        pitchDelta: 0,\r\n        rollDelta: 0,\r\n        lanes: [{ offset: 0, width: 10 }]\r\n      });\r\n    }\r\n    \r\n    // Banking out - complete reset\r\n    for (let i = 0; i < 7; i++) {\r\n      const unbankProgress = (7 - i) / 7;\r\n      addSegment({\r\n        yawDelta: 0,\r\n        pitchDelta: 0,\r\n        rollDelta: unbankProgress * MAX_BANKING * 0.9\r\n      });\r\n    }\r\n    \r\n    // Final stabilization\r\n    for (let i = 0; i < 8; i++) {\r\n      addSegment({\r\n        yawDelta: 0,\r\n        pitchDelta: 0,\r\n        rollDelta: 0,\r\n        lanes: [{ offset: 0, width: 11 }]\r\n      });\r\n    }\r\n    \r\n    // Finish straight through ice canyon\r\n    for (let i = 0; i < 25; i++) {\r\n      addSegment({\r\n        yawDelta: 0,\r\n        pitchDelta: 0,\r\n        rollDelta: 0,\r\n        lanes: [{ offset: 0, width: 12 }],\r\n        isBoost: (i >= 10 && i <= 15),\r\n        isFinishLine: (i === 24)\r\n      });\r\n    }\r\n  }\r\n};"],"names":["Level27","addSegment","MAX_BANKING","i","bankProgress","unbankProgress","turn","direction","weavePattern","curvePhase","yawDelta","rollDelta","secondPhase","caveWind","exitTurns"],"mappings":"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"}