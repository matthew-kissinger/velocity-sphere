{"version":3,"file":"Level27-DWjidTgw.js","sources":["../../src/tracks/levels/Level27.js"],"sourcesContent":["/**\n * Level 27 - Ice Canyon (COMPLETELY REDESIGNED)\n * Flowing ice canyon racing with proper banking and no corkscrews\n * Hard difficulty with challenging but fair turns\n */\n\nexport default {\n  name: \"Ice Canyon\",\n  description: \"Navigate frozen canyons and ice bridges at high speed\",\n  difficulty: 5,\n  shader: \"ice-crystal\",\n  skybox: \"arctic-wind\",\n  \n  generateTrack(addSegment) {\n    // Ice canyon entrance - wide starting area\n    for (let i = 0; i < 25; i++) {\n      addSegment({\n        yawDelta: 0,\n        pitchDelta: 0,\n        rollDelta: 0,\n        isStartLine: (i === 0),\n        lanes: [{ offset: 0, width: 14 }]\n      });\n    }\n    \n    // SECTION 1: Frozen Valley Run\n    // Flowing S-curves through ice formations\n    const valleyTurns = [\n      { angle: Math.PI / 3, segments: 35 },\n      { angle: -Math.PI / 2.5, segments: 40 },\n      { angle: Math.PI / 2.8, segments: 32 },\n      { angle: -Math.PI / 3.5, segments: 28 }\n    ];\n    \n    for (const turn of valleyTurns) {\n      // Approach straight\n      for (let i = 0; i < 10; i++) {\n        addSegment({\n          yawDelta: 0,\n          pitchDelta: 0,\n          rollDelta: 0,\n          lanes: [{ offset: 0, width: 12 }]\n        });\n      }\n      \n      // Gentle banking entry\n      for (let i = 0; i < 5; i++) {\n        addSegment({\n          rollDelta: (turn.angle > 0 ? 1 : -1) * Math.PI / 100,\n          lanes: [{ offset: 0, width: 11 }]\n        });\n      }\n      \n      // Smooth turn\n      for (let i = 0; i < turn.segments; i++) {\n        const progress = i / turn.segments;\n        addSegment({\n          yawDelta: turn.angle / turn.segments,\n          pitchDelta: Math.sin(progress * Math.PI) * Math.PI / 200,\n          rollDelta: 0,\n          lanes: [{ offset: 0, width: 10 }]\n        });\n      }\n      \n      // Banking exit\n      for (let i = 0; i < 5; i++) {\n        addSegment({\n          rollDelta: (turn.angle > 0 ? -1 : 1) * Math.PI / 100,\n          lanes: [{ offset: 0, width: 11 }]\n        });\n      }\n    }\n    \n    // SECTION 2: Ice Bridge Crossing\n    // Elevated ice bridge with gentle curves\n    for (let i = 0; i < 15; i++) {\n      addSegment({\n        pitchDelta: Math.PI / 150, // Gentle climb\n        lanes: [{ offset: 0, width: 10 }]\n      });\n    }\n    \n    // Bridge section with mild weaving\n    for (let i = 0; i < 40; i++) {\n      const bridgePhase = i / 40;\n      const bridgeWeave = Math.sin(bridgePhase * Math.PI * 2) * Math.PI / 150;\n      \n      addSegment({\n        yawDelta: bridgeWeave,\n        pitchDelta: 0,\n        rollDelta: 0,\n        lanes: [{ offset: 0, width: 9 }]\n      });\n    }\n    \n    // Descent from bridge\n    for (let i = 0; i < 15; i++) {\n      addSegment({\n        pitchDelta: -Math.PI / 150,\n        lanes: [{ offset: 0, width: 10 }]\n      });\n    }\n    \n    // SECTION 3: Frozen Rapids\n    // Fast flowing section with gentle curves\n    for (let i = 0; i < 60; i++) {\n      const rapidsPhase = i / 60;\n      const rapidFlow = Math.sin(rapidsPhase * Math.PI * 3) * Math.PI / 120;\n      \n      addSegment({\n        yawDelta: rapidFlow,\n        pitchDelta: Math.cos(rapidsPhase * Math.PI * 4) * Math.PI / 250,\n        rollDelta: rapidFlow * 0.5, // Very gentle banking\n        lanes: [{ offset: 0, width: 11 }],\n        isBoost: (i > 25 && i < 30) // Speed section\n      });\n    }\n    \n    // SECTION 4: Canyon Hairpin\n    // Single challenging but fair hairpin turn\n    \n    // Approach\n    for (let i = 0; i < 15; i++) {\n      addSegment({\n        yawDelta: 0,\n        pitchDelta: 0,\n        rollDelta: 0,\n        lanes: [{ offset: 0, width: 12 }]\n      });\n    }\n    \n    // Bank into hairpin\n    for (let i = 0; i < 8; i++) {\n      addSegment({\n        rollDelta: Math.PI / 80,\n        lanes: [{ offset: 0, width: 10 }]\n      });\n    }\n    \n    // Execute hairpin turn\n    for (let i = 0; i < 40; i++) {\n      addSegment({\n        yawDelta: Math.PI / 40, // 180 degree turn\n        pitchDelta: 0,\n        rollDelta: 0,\n        lanes: [{ offset: 0, width: 11 }]\n      });\n    }\n    \n    // Bank out\n    for (let i = 0; i < 8; i++) {\n      addSegment({\n        rollDelta: -Math.PI / 80,\n        lanes: [{ offset: 0, width: 10 }]\n      });\n    }\n    \n    // SECTION 5: Ice Field Sprint\n    // Final high-speed section through ice field\n    for (let i = 0; i < 50; i++) {\n      const sprintPhase = i / 50;\n      \n      addSegment({\n        yawDelta: Math.sin(sprintPhase * Math.PI * 2) * Math.PI / 200,\n        pitchDelta: -Math.PI / 300, // Slight downhill for speed\n        rollDelta: 0,\n        lanes: [{ offset: 0, width: 12 + sprintPhase * 3 }], // Widening track\n        isBoost: (i > 35 && i < 40) // Final boost\n      });\n    }\n    \n    // Canyon exit - finish line\n    for (let i = 0; i < 20; i++) {\n      addSegment({\n        yawDelta: 0,\n        pitchDelta: 0,\n        rollDelta: 0,\n        lanes: [{ offset: 0, width: 15 }],\n        isFinishLine: (i === 19)\n      });\n    }\n  }\n};"],"names":["Level27","addSegment","i","valleyTurns","turn","progress","bridgePhase","bridgeWeave","rapidsPhase","rapidFlow","sprintPhase"],"mappings":"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"}