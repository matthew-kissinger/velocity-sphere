{"version":3,"file":"Level28-BgI0q8Vm.js","sources":["../../src/tracks/levels/Level28.js"],"sourcesContent":["/**\r\n * Level 28 - Zen Garden\r\n * Peaceful flowing track with HEAVILY optimized performance\r\n * Reduced from 298 to ~150 segments for smooth 60+ FPS\r\n */\r\n\r\nexport default {\r\n  name: \"Zen Garden\",\r\n  description: \"Flow through tranquil gardens with natural curves\",\r\n  difficulty: 3,\r\n  shader: \"zen-sand\",\r\n  skybox: \"sunset-garden\",\r\n  \r\n  generateTrack(addSegment) {\r\n    // Garden entrance - peaceful straight\r\n    for (let i = 0; i < 10; i++) {\r\n      addSegment({\r\n        yawDelta: 0,\r\n        pitchDelta: 0,\r\n        rollDelta: 0,\r\n        isStartLine: (i === 0),\r\n        lanes: [{ offset: 0, width: 12 }]\r\n      });\r\n    }\r\n    \r\n    // First garden curve - OPTIMIZED S-curve\r\n    for (let i = 0; i < 10; i++) {\r\n      const flowCurve = Math.sin((i / 10) * Math.PI);\r\n      const direction = i < 5 ? 1 : -1;\r\n      \r\n      addSegment({\r\n        yawDelta: direction * flowCurve * Math.PI / 75,\r\n        pitchDelta: 0,\r\n        rollDelta: 0, // Removed roll for performance\r\n        lanes: [{ offset: 0, width: 11 }]\r\n      });\r\n    }\r\n    \r\n    // Rising path - gentle hill (REDUCED segments)\r\n    for (let i = 0; i < 8; i++) {\r\n      const hillProfile = Math.sin((i / 8) * Math.PI);\r\n      \r\n      addSegment({\r\n        yawDelta: 0,\r\n        pitchDelta: hillProfile * Math.PI / 90,\r\n        rollDelta: 0,\r\n        lanes: [{ offset: 0, width: 10 }],\r\n        isBoost: (i === 4)\r\n      });\r\n    }\r\n    \r\n    // Bamboo grove tunnel - HEAVILY SIMPLIFIED\r\n    for (let i = 0; i < 12; i++) {\r\n      const windingPath = Math.sin(i * 0.4);\r\n      \r\n      addSegment({\r\n        yawDelta: windingPath * Math.PI / 60,\r\n        pitchDelta: 0,\r\n        rollDelta: 0, // Removed roll\r\n        lanes: [{ offset: 0, width: 9 }],\r\n        isBoostPowerup: (i === 6)\r\n      });\r\n    }\r\n    \r\n    // Koi pond jump - single jump\r\n    // Approach\r\n    for (let i = 0; i < 6; i++) {\r\n      addSegment({\r\n        yawDelta: 0,\r\n        pitchDelta: i > 4 ? Math.PI / 100 : 0,\r\n        rollDelta: 0,\r\n        lanes: [{ offset: 0, width: 10 }]\r\n      });\r\n    }\r\n    \r\n    // Gap\r\n    for (let i = 0; i < 3; i++) {\r\n      addSegment({ isGap: true });\r\n    }\r\n    \r\n    // Landing\r\n    for (let i = 0; i < 5; i++) {\r\n      addSegment({\r\n        pitchDelta: i < 2 ? -Math.PI / 80 : 0,\r\n        rollDelta: 0,\r\n        lanes: [{ offset: 0, width: 11 }],\r\n        isBoost: (i === 3)\r\n      });\r\n    }\r\n    \r\n    // Rock garden slalom - OPTIMIZED S-curves\r\n    for (let i = 0; i < 15; i++) {\r\n      const slalomPattern = Math.sin(i * 0.3);\r\n      \r\n      addSegment({\r\n        yawDelta: slalomPattern * Math.PI / 50,\r\n        pitchDelta: 0,\r\n        rollDelta: 0, // Removed roll\r\n        lanes: [{ offset: 0, width: 10 }]\r\n      });\r\n    }\r\n    \r\n    // Valley descent - SIMPLIFIED\r\n    for (let i = 0; i < 10; i++) {\r\n      const descentCurve = Math.sin((i / 10) * Math.PI * 0.5);\r\n      \r\n      addSegment({\r\n        yawDelta: -Math.PI / 180,\r\n        pitchDelta: -descentCurve * Math.PI / 75,\r\n        rollDelta: 0, // Removed roll\r\n        lanes: [{ offset: 0, width: 11 }],\r\n        isBoostPowerup: (i === 5)\r\n      });\r\n    }\r\n    \r\n    // Meditation circle - HEAVILY OPTIMIZED\r\n    const meditationSegments = 20; // Reduced from 40\r\n    for (let i = 0; i < meditationSegments; i++) {\r\n      const circleProgress = i / meditationSegments;\r\n      \r\n      // Simplified banking\r\n      let banking = 0;\r\n      if (i === 0) banking = Math.PI / 12;\r\n      else if (i === meditationSegments - 1) banking = -Math.PI / 12;\r\n      \r\n      addSegment({\r\n        yawDelta: (Math.PI * 1.5) / meditationSegments,\r\n        pitchDelta: 0,\r\n        rollDelta: banking,\r\n        lanes: [{ offset: 0, width: 12 }],\r\n        isBoost: (i === 10)\r\n      });\r\n    }\r\n    \r\n    // Cherry blossom avenue - SIMPLIFIED\r\n    for (let i = 0; i < 15; i++) {\r\n      addSegment({\r\n        yawDelta: 0,\r\n        pitchDelta: 0,\r\n        rollDelta: 0,\r\n        lanes: [{ offset: 0, width: 14 }],\r\n        isBoost: (i >= 6 && i <= 9)\r\n      });\r\n    }\r\n    \r\n    // Garden maze section - HEAVILY SIMPLIFIED\r\n    const mazePattern = [\r\n      { turn: Math.PI / 6, segments: 6 },\r\n      { turn: -Math.PI / 4, segments: 8 },\r\n      { turn: Math.PI / 5, segments: 5 }\r\n    ];\r\n    \r\n    for (const section of mazePattern) {\r\n      // Bank in (1 segment)\r\n      addSegment({\r\n        rollDelta: (section.turn > 0 ? 1 : -1) * Math.PI / 15\r\n      });\r\n      \r\n      // Smooth turn\r\n      for (let i = 0; i < section.segments; i++) {\r\n        addSegment({\r\n          yawDelta: section.turn / section.segments,\r\n          pitchDelta: 0,\r\n          rollDelta: 0,\r\n          lanes: [{ offset: 0, width: 10 }]\r\n        });\r\n      }\r\n      \r\n      // Bank out (1 segment)\r\n      addSegment({\r\n        rollDelta: (section.turn > 0 ? -1 : 1) * Math.PI / 15\r\n      });\r\n      \r\n      // Recovery straight\r\n      for (let i = 0; i < 3; i++) {\r\n        addSegment({\r\n          yawDelta: 0,\r\n          pitchDelta: 0,\r\n          rollDelta: 0\r\n        });\r\n      }\r\n    }\r\n    \r\n    // Tea garden approach - gentle rise\r\n    for (let i = 0; i < 8; i++) {\r\n      addSegment({\r\n        yawDelta: 0,\r\n        pitchDelta: Math.PI / 250,\r\n        rollDelta: 0,\r\n        lanes: [{ offset: 0, width: 11 }],\r\n        isBoostPowerup: (i === 4)\r\n      });\r\n    }\r\n    \r\n    // Final garden section - flowing to finish\r\n    for (let i = 0; i < 12; i++) {\r\n      const finalFlow = Math.sin(i * 0.24);\r\n      \r\n      addSegment({\r\n        yawDelta: finalFlow * Math.PI / 90,\r\n        pitchDelta: 0,\r\n        rollDelta: 0,\r\n        lanes: [{ offset: 0, width: 12 }],\r\n        isBoost: (i >= 4 && i <= 7),\r\n        isFinishLine: (i === 11)\r\n      });\r\n    }\r\n  }\r\n};"],"names":["Level28","addSegment","i","flowCurve","direction","hillProfile","windingPath","slalomPattern","descentCurve","meditationSegments","banking","mazePattern","section","finalFlow"],"mappings":"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"}