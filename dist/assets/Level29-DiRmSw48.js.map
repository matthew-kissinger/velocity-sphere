{"version":3,"file":"Level29-DiRmSw48.js","sources":["../../src/tracks/levels/Level29.js"],"sourcesContent":["/**\n * Level 29 - Quantum Tunnels\n * Simplified portal-based racing with clear mechanics\n * Focus on teleportation as understandable gameplay element\n */\n\nexport default {\n  name: \"Quantum Tunnels\",\n  description: \"Navigate through quantum portals and energy fields\",\n  difficulty: 4,\n  shader: \"energy-pulse\",\n  skybox: \"space-deep\",\n  \n  generateTrack(addSegment) {\n    // Particle accelerator entrance - wide starting area\n    for (let i = 0; i < 15; i++) {\n      addSegment({\n        yawDelta: 0,\n        pitchDelta: 0,\n        rollDelta: 0,\n        isStartLine: (i === 0),\n        lanes: [{ offset: 0, width: 12 }]\n      });\n    }\n    \n    // First quantum tunnel - visual pulsing effect\n    for (let i = 0; i < 30; i++) {\n      const pulseEffect = Math.sin(i * 0.3) * 0.5 + 1;\n      \n      addSegment({\n        yawDelta: Math.sin(i * 0.1) * Math.PI / 120,\n        pitchDelta: 0,\n        rollDelta: 0,\n        lanes: [{ offset: 0, width: 9 }] // Fixed width for performance\n      });\n    }\n    \n    // Portal jump 1 - clear teleportation point\n    // Wide approach with visual indicator\n    for (let i = 0; i < 8; i++) {\n      addSegment({\n        yawDelta: 0,\n        pitchDelta: i > 5 ? Math.PI / 80 : 0,\n        rollDelta: 0,\n        lanes: [{ offset: 0, width: 14 }] // Wide for clear portal entry\n      });\n    }\n    \n    // Portal gap\n    for (let i = 0; i < 8; i++) {\n      addSegment({ isGap: true });\n    }\n    \n    // Portal exit - accelerator straight\n    for (let i = 0; i < 25; i++) {\n      addSegment({\n        yawDelta: 0,\n        pitchDelta: i < 3 ? -Math.PI / 60 : 0,\n        rollDelta: 0,\n        lanes: [{ offset: 0, width: 10 }]\n      });\n    }\n    \n    // Quantum split paths - three-lane choice system\n    for (let i = 0; i < 35; i++) {\n      const splitProgress = i / 35;\n      \n      // Three distinct lanes that reconverge\n      const laneOptions = [\n        { offset: -4, width: 8 }, // Left path\n        { offset: 0, width: 8 },  // Center path\n        { offset: 4, width: 8 }   // Right path\n      ];\n      \n      // Merge back together gradually\n      const mergeOffset = splitProgress > 0.7 ? (1 - splitProgress) / 0.3 : 1;\n      \n      addSegment({\n        yawDelta: Math.sin(i * 0.08) * Math.PI / 150,\n        pitchDelta: Math.cos(i * 0.1) * Math.PI / 200,\n        rollDelta: 0,\n        lanes: laneOptions.map(lane => ({\n          offset: lane.offset * mergeOffset,\n          width: lane.width\n        }))\n      });\n    }\n    \n    // Curved quantum tunnel with energy fields\n    for (let i = 0; i < 40; i++) {\n      const tunnelCurve = Math.sin(i * 0.12);\n      const energyPulse = Math.sin(i * 0.4) * 0.3 + 1;\n      \n      addSegment({\n        yawDelta: tunnelCurve * Math.PI / 100,\n        pitchDelta: Math.sin(i * 0.15) * Math.PI / 250,\n        rollDelta: tunnelCurve * Math.PI / 150, // Gentle banking\n        lanes: [{ offset: 0, width: 10 }] // Fixed width for performance\n      });\n    }\n    \n    // Portal jump 2 - longer teleportation\n    // Buildup section\n    for (let i = 0; i < 12; i++) {\n      addSegment({\n        yawDelta: 0,\n        pitchDelta: i > 8 ? Math.PI / 60 : 0,\n        rollDelta: 0,\n        lanes: [{ offset: 0, width: 11 }]\n      });\n    }\n    \n    // Extended portal gap\n    for (let i = 0; i < 12; i++) {\n      addSegment({ isGap: true });\n    }\n    \n    // Unstable exit - slight turbulence\n    for (let i = 0; i < 15; i++) {\n      const turbulence = Math.max(0, 1 - i / 15);\n      \n      addSegment({\n        yawDelta: Math.sin(i * 0.5) * Math.PI / 200 * turbulence,\n        pitchDelta: i < 4 ? -Math.PI / 50 : 0,\n        rollDelta: Math.sin(i * 0.3) * Math.PI / 300 * turbulence,\n        lanes: [{ offset: 0, width: 10 }]\n      });\n    }\n    \n    // Particle accelerator complex - high-speed section\n    for (let section = 0; section < 3; section++) {\n      // Accelerator straight\n      for (let i = 0; i < 20; i++) {\n        addSegment({\n          yawDelta: 0,\n          pitchDelta: 0,\n          rollDelta: 0,\n          lanes: [{ offset: 0, width: 9 }],\n          // No boost needed\n        });\n      }\n      \n      // Banked turn between sections\n      if (section < 2) {\n        const turnDirection = section === 0 ? 1 : -1;\n        \n        // Bank in\n        for (let i = 0; i < 4; i++) {\n          addSegment({\n            rollDelta: turnDirection * Math.PI / 24\n          });\n        }\n        \n        // Turn\n        for (let i = 0; i < 18; i++) {\n          addSegment({\n            yawDelta: turnDirection * Math.PI / 36,\n            pitchDelta: 0,\n            rollDelta: 0,\n            lanes: [{ offset: 0, width: 10 }]\n          });\n        }\n        \n        // Bank out\n        for (let i = 0; i < 4; i++) {\n          addSegment({\n            rollDelta: -turnDirection * Math.PI / 24\n          });\n        }\n      }\n    }\n    \n    // Final portal sequence - rapid succession\n    for (let portal = 0; portal < 4; portal++) {\n      // Short approach\n      for (let i = 0; i < 6; i++) {\n        addSegment({\n          yawDelta: 0,\n          pitchDelta: i > 4 ? Math.PI / 100 : 0,\n          rollDelta: 0,\n          lanes: [{ offset: 0, width: 11 }]\n        });\n      }\n      \n      // Short portal\n      for (let i = 0; i < 3; i++) {\n        addSegment({ isGap: true });\n      }\n      \n      // Quick recovery\n      for (let i = 0; i < 5; i++) {\n        addSegment({\n          pitchDelta: i < 2 ? -Math.PI / 80 : 0,\n          rollDelta: 0,\n          lanes: [{ offset: 0, width: 10 }],\n          // No boost needed\n        });\n      }\n    }\n    \n    // Quantum tunnel finale - pulsing finish\n    for (let i = 0; i < 30; i++) {\n      const finalPulse = Math.sin(i * 0.2) * 0.4 + 1;\n      \n      addSegment({\n        yawDelta: Math.sin(i * 0.1) * Math.PI / 180,\n        pitchDelta: 0,\n        rollDelta: 0,\n        lanes: [{ offset: 0, width: 12 }], // Fixed width for performance\n        isFinishLine: (i === 29)\n      });\n    }\n  }\n};"],"names":["Level29","addSegment","i","splitProgress","laneOptions","mergeOffset","lane","tunnelCurve","turbulence","section","turnDirection","portal"],"mappings":"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"}