{"version":3,"file":"Level3-BsMdy-tj.js","sources":["../../src/tracks/levels/Level3.js"],"sourcesContent":["/**\n * Level 3 - Spectrum\n * Classic rainbow track with balanced challenge\n */\n\nexport default {\n  name: \"Spectrum\",\n  description: \"Flowing curves and rhythmic sections with rainbow aesthetics\",\n  difficulty: 3,\n  shader: \"rainbow-flow\", // Default rainbow shader\n  skybox: \"sunset-vibes\", // Default bright skybox\n  \n  generateTrack(addSegment, addLoop) {\n    // Level 3: Advanced track with challenging but manageable elements\n    // --- Section 1: Starting straight ---\n    const startCount3 = 30;\n    for (let i = 0; i < startCount3; i++) {\n      addSegment({\n        yawDelta: 0,\n        pitchDelta: 0,\n        rollDelta: 0,\n        isStartLine: (i === 0)\n      });\n    }\n    \n    // --- Section 2: Wide sweeping curves with banking ---\n    const sweepingCurves = [\n      { angle: Math.PI / 3, segments: 18, bank: Math.PI / 12 },  // 60 degree right turn\n      { angle: -Math.PI / 4, segments: 15, bank: -Math.PI / 12 }, // 45 degree left turn\n    ];\n    \n    for (const curve of sweepingCurves) {\n      const yawPerSegment = curve.angle / curve.segments;\n      const bankPerSegment = curve.bank / curve.segments;\n      \n      // Enter banking\n      for (let i = 0; i < 3; i++) {\n        addSegment({ \n          yawDelta: 0,\n          pitchDelta: 0,\n          rollDelta: bankPerSegment\n        });\n      }\n      \n      // Main curve with full banking\n      for (let i = 0; i < curve.segments; i++) {\n        addSegment({ \n          yawDelta: yawPerSegment,\n          pitchDelta: 0,\n          rollDelta: 0\n        });\n      }\n      \n      // Exit banking\n      for (let i = 0; i < 3; i++) {\n        addSegment({ \n          yawDelta: 0,\n          pitchDelta: 0,\n          rollDelta: -bankPerSegment\n        });\n      }\n      \n      // Short straight between curves\n      for (let i = 0; i < 5; i++) {\n        addSegment({ yawDelta: 0, pitchDelta: 0, rollDelta: 0 });\n      }\n    }\n    \n    // --- Section 3: Moderate hills (not too high) ---\n    const hills = [\n      { up: 8, down: 8, angle: Math.PI / 12 },  // Small hill\n      { up: 10, down: 10, angle: Math.PI / 10 } // Medium hill\n    ];\n    \n    for (const hill of hills) {\n      // Up\n      for (let i = 0; i < hill.up; i++) {\n        addSegment({ pitchDelta: hill.angle / hill.up });\n      }\n      // Down\n      for (let i = 0; i < hill.down; i++) {\n        addSegment({ pitchDelta: -hill.angle / hill.down });\n      }\n    }\n    \n    // --- Section 4: Major jump ---\n    const rampUp3 = 10;\n    const rampAngle3 = Math.PI / 6; // 30 degrees\n    for (let i = 0; i < rampUp3; i++) {\n      addSegment({ pitchDelta: rampAngle3 / rampUp3 });\n    }\n    // Gap\n    const gap3 = 4;\n    for (let i = 0; i < gap3; i++) {\n      addSegment({ isGap: true });\n    }\n    const rampDown3 = 10;\n    for (let i = 0; i < rampDown3; i++) {\n      addSegment({ pitchDelta: -rampAngle3 / rampDown3 });\n    }\n    \n    // --- Section 5: Horizontal Spiral (stays at same height) ---\n    // Wide turning spiral that doesn't descend\n    const spiralSegments = 40;\n    const spiralTurns = 1.25; // 1.25 complete turns\n    \n    // Entry to spiral - establish banking\n    for (let i = 0; i < 3; i++) {\n      addSegment({\n        yawDelta: 0,\n        pitchDelta: 0,\n        rollDelta: Math.PI / 36 // Gentle banking\n      });\n    }\n    \n    // Main spiral - constant height\n    const yawPerSegment = (Math.PI * 2 * spiralTurns) / spiralSegments;\n    for (let i = 0; i < spiralSegments; i++) {\n      addSegment({\n        yawDelta: yawPerSegment,\n        pitchDelta: 0, // Stay level\n        rollDelta: 0\n      });\n    }\n    \n    // Exit spiral - remove banking\n    for (let i = 0; i < 3; i++) {\n      addSegment({\n        yawDelta: 0,\n        pitchDelta: 0,\n        rollDelta: -Math.PI / 36\n      });\n    }\n    \n    // Recovery straight\n    for (let i = 0; i < 8; i++) {\n      addSegment({ yawDelta: 0, pitchDelta: 0, rollDelta: 0 });\n    }\n    \n    // --- Section 6: Chicane Section ---\n    const chicane = [\n      { yaw: Math.PI / 6, segments: 6 },   // 30 degree right\n      { yaw: -Math.PI / 3, segments: 8 },  // 60 degree left  \n      { yaw: Math.PI / 6, segments: 6 }    // 30 degree right back to straight\n    ];\n    \n    for (const turn of chicane) {\n      const yawPerSegment = turn.yaw / turn.segments;\n      \n      for (let i = 0; i < turn.segments; i++) {\n        addSegment({ \n          yawDelta: yawPerSegment,\n          pitchDelta: 0,\n          rollDelta: 0\n        });\n      }\n    }\n    \n    // --- Section 7: Double Jump ---\n    const jumps = [\n      { ramp: 6, gap: 3, land: 6 },\n      { straight: 8 },\n      { ramp: 8, gap: 4, land: 8 }\n    ];\n    \n    for (const section of jumps) {\n      if (section.ramp) {\n        // Ramp up\n        for (let i = 0; i < section.ramp; i++) {\n          addSegment({ pitchDelta: (Math.PI / 7) / section.ramp });\n        }\n        // Gap\n        for (let i = 0; i < section.gap; i++) {\n          addSegment({ isGap: true });\n        }\n        // Landing\n        for (let i = 0; i < section.land; i++) {\n          addSegment({ pitchDelta: -(Math.PI / 7) / section.land });\n        }\n      } else if (section.straight) {\n        for (let i = 0; i < section.straight; i++) {\n          addSegment({ yawDelta: 0, pitchDelta: 0, rollDelta: 0 });\n        }\n      }\n    }\n    \n    // --- Section 8: Split Path ---\n    const splitSection = 25;\n    for (let i = 0; i < splitSection; i++) {\n      let lanes;\n      if (i < 5) {\n        // Gradual split\n        const splitFactor = i / 5;\n        lanes = [\n          { offset: -6.0 * splitFactor, width: 5.0 },\n          { offset: 6.0 * splitFactor, width: 5.0 }\n        ];\n      } else if (i < 20) {\n        // Full split\n        lanes = [\n          { offset: -6.0, width: 5.0 },\n          { offset: 6.0, width: 5.0 }\n        ];\n      } else {\n        // Merge back\n        const mergeFactor = 1 - (i - 20) / 5;\n        lanes = [\n          { offset: -6.0 * mergeFactor, width: 5.0 },\n          { offset: 6.0 * mergeFactor, width: 5.0 }\n        ];\n      }\n      addSegment({ lanes });\n    }\n    \n    // --- Section 9: Final Sprint ---\n    const finalSprint = 20;\n    for (let i = 0; i < finalSprint; i++) {\n      addSegment({ \n        yawDelta: 0,\n        pitchDelta: 0,\n        rollDelta: 0,\n        isFinishLine: (i === finalSprint - 1) \n      });\n    }\n  }\n};"],"names":["Level3","addSegment","addLoop","i","sweepingCurves","curve","yawPerSegment","bankPerSegment","hills","hill","rampUp3","rampAngle3","gap3","rampDown3","spiralSegments","spiralTurns","chicane","turn","jumps","section","splitSection","lanes","splitFactor","mergeFactor","finalSprint"],"mappings":"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"}