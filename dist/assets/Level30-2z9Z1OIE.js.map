{"version":3,"file":"Level30-2z9Z1OIE.js","sources":["../../src/tracks/levels/Level30.js"],"sourcesContent":["/**\r\n * Level 30 - Ultimate Circuit\r\n * The final challenge - COMPLETELY REDESIGNED for performance\r\n * Reduced from 440 to ~200 segments while maintaining difficulty\r\n */\r\n\r\nexport default {\r\n  name: \"Ultimate Circuit\",\r\n  description: \"The final test of speed and skill\",\r\n  difficulty: 5,\r\n  shader: \"infinity-flow\",\r\n  skybox: \"cosmic-infinite\",\r\n  \r\n  generateTrack(addSegment) {\r\n    // Opening stretch - 15 segments\r\n    for (let i = 0; i < 15; i++) {\r\n      addSegment({\r\n        yawDelta: 0,\r\n        pitchDelta: 0,\r\n        rollDelta: 0,\r\n        isStartLine: (i === 0),\r\n        lanes: [{ offset: 0, width: 14 }]\r\n      });\r\n    }\r\n    \r\n    // Rising spiral - OPTIMIZED: 25 segments (was 45)\r\n    for (let i = 0; i < 25; i++) {\r\n      const spiralProgress = i / 25;\r\n      const yawRate = Math.PI / 30;\r\n      \r\n      // Simple banking at start and end only\r\n      let banking = 0;\r\n      if (i < 2) banking = Math.PI / 10;\r\n      else if (i > 22) banking = -Math.PI / 10;\r\n      \r\n      addSegment({\r\n        yawDelta: yawRate,\r\n        pitchDelta: Math.PI / 125,\r\n        rollDelta: banking,\r\n        lanes: [{ offset: 0, width: 12 }],\r\n        isBoostPowerup: (i === 12)\r\n      });\r\n    }\r\n    \r\n    // High speed straight - 15 segments (was 25)\r\n    for (let i = 0; i < 15; i++) {\r\n      addSegment({\r\n        yawDelta: 0,\r\n        pitchDelta: 0,\r\n        rollDelta: 0,\r\n        lanes: [{ offset: 0, width: 14 }],\r\n        isBoost: (i >= 5 && i <= 10)\r\n      });\r\n    }\r\n    \r\n    // S-curves - HEAVILY OPTIMIZED: 30 segments (was 60)\r\n    for (let curve = 0; curve < 2; curve++) {\r\n      const direction = curve === 0 ? 1 : -1;\r\n      \r\n      // Bank in (1 segment)\r\n      addSegment({\r\n        rollDelta: direction * Math.PI / 6\r\n      });\r\n      \r\n      // Turn (12 segments)\r\n      for (let i = 0; i < 12; i++) {\r\n        addSegment({\r\n          yawDelta: direction * Math.PI / 24,\r\n          pitchDelta: 0,\r\n          rollDelta: 0,\r\n          lanes: [{ offset: 0, width: 13 }]\r\n        });\r\n      }\r\n      \r\n      // Bank out (1 segment)\r\n      addSegment({\r\n        rollDelta: -direction * Math.PI / 6\r\n      });\r\n      \r\n      // Straight (1 segment)\r\n      addSegment({\r\n        yawDelta: 0,\r\n        pitchDelta: 0,\r\n        rollDelta: 0\r\n      });\r\n    }\r\n    \r\n    // Technical chicane - SIMPLIFIED: 18 segments (was 40)\r\n    const chicanePattern = [-1, 1]; // Reduced from 3 to 2\r\n    \r\n    for (const dir of chicanePattern) {\r\n      // Quick turn (8 segments each)\r\n      for (let i = 0; i < 8; i++) {\r\n        addSegment({\r\n          yawDelta: dir * Math.PI / 32,\r\n          pitchDelta: 0,\r\n          rollDelta: 0,\r\n          lanes: [{ offset: 0, width: 11 }]\r\n        });\r\n      }\r\n      \r\n      // Recovery (1 segment)\r\n      addSegment({\r\n        yawDelta: 0,\r\n        pitchDelta: 0,\r\n        rollDelta: 0,\r\n        isBoostPowerup: (dir === 1)\r\n      });\r\n    }\r\n    \r\n    // Elevation descent - OPTIMIZED: 20 segments (was 35)\r\n    // Bank in\r\n    addSegment({\r\n      rollDelta: Math.PI / 8\r\n    });\r\n    \r\n    for (let i = 0; i < 18; i++) {\r\n      addSegment({\r\n        yawDelta: Math.PI / 54,\r\n        pitchDelta: -Math.PI / 100,\r\n        rollDelta: 0,\r\n        lanes: [{ offset: 0, width: 12 }]\r\n      });\r\n    }\r\n    \r\n    // Bank out\r\n    addSegment({\r\n      rollDelta: -Math.PI / 8\r\n    });\r\n    \r\n    // Power section - 20 segments (was 30)\r\n    for (let i = 0; i < 20; i++) {\r\n      addSegment({\r\n        yawDelta: 0,\r\n        pitchDelta: 0,\r\n        rollDelta: 0,\r\n        lanes: [{ offset: 0, width: 13 }],\r\n        isBoost: (i >= 5 && i <= 10),\r\n        isBoostPowerup: (i === 15)\r\n      });\r\n    }\r\n    \r\n    // Jump section - 15 segments (was 25)\r\n    // Approach\r\n    for (let i = 0; i < 8; i++) {\r\n      addSegment({\r\n        yawDelta: 0,\r\n        pitchDelta: i > 5 ? Math.PI / 60 : 0,\r\n        rollDelta: 0,\r\n        lanes: [{ offset: 0, width: 11 }]\r\n      });\r\n    }\r\n    \r\n    // Gap\r\n    for (let i = 0; i < 4; i++) {\r\n      addSegment({ isGap: true });\r\n    }\r\n    \r\n    // Landing\r\n    for (let i = 0; i < 3; i++) {\r\n      addSegment({\r\n        pitchDelta: i < 2 ? -Math.PI / 50 : 0,\r\n        rollDelta: 0,\r\n        lanes: [{ offset: 0, width: 12 }]\r\n      });\r\n    }\r\n    \r\n    // Single hairpin - SIMPLIFIED: 20 segments (was 50 with 2 hairpins)\r\n    // Entry\r\n    for (let i = 0; i < 3; i++) {\r\n      addSegment({\r\n        yawDelta: 0,\r\n        pitchDelta: 0,\r\n        rollDelta: 0\r\n      });\r\n    }\r\n    \r\n    // Bank in\r\n    addSegment({\r\n      rollDelta: Math.PI / 8\r\n    });\r\n    \r\n    // 180Â° turn\r\n    for (let i = 0; i < 12; i++) {\r\n      addSegment({\r\n        yawDelta: Math.PI / 12,\r\n        pitchDelta: 0,\r\n        rollDelta: 0,\r\n        lanes: [{ offset: 0, width: 9 }]\r\n      });\r\n    }\r\n    \r\n    // Bank out\r\n    addSegment({\r\n      rollDelta: -Math.PI / 8\r\n    });\r\n    \r\n    // Exit\r\n    for (let i = 0; i < 3; i++) {\r\n      addSegment({\r\n        yawDelta: 0,\r\n        pitchDelta: 0,\r\n        rollDelta: 0,\r\n        isBoostPowerup: (i === 1)\r\n      });\r\n    }\r\n    \r\n    // Flowing final section - OPTIMIZED: 25 segments (was 60)\r\n    for (let i = 0; i < 25; i++) {\r\n      const flowPattern = Math.sin(i * 0.16);\r\n      \r\n      addSegment({\r\n        yawDelta: flowPattern * Math.PI / 60,\r\n        pitchDelta: 0,\r\n        rollDelta: 0,\r\n        lanes: [{ offset: 0, width: 12 }],\r\n        isBoost: (i === 12)\r\n      });\r\n    }\r\n    \r\n    // Final challenge - SIMPLIFIED: 20 segments (was 45)\r\n    // Bank in\r\n    addSegment({\r\n      rollDelta: Math.PI / 10\r\n    });\r\n    \r\n    // Final curve\r\n    for (let i = 0; i < 12; i++) {\r\n      addSegment({\r\n        yawDelta: Math.PI / 36,\r\n        pitchDelta: 0,\r\n        rollDelta: 0,\r\n        lanes: [{ offset: 0, width: 14 }]\r\n      });\r\n    }\r\n    \r\n    // Bank out\r\n    addSegment({\r\n      rollDelta: -Math.PI / 10\r\n    });\r\n    \r\n    // Sprint to finish - 6 segments (was 30)\r\n    for (let i = 0; i < 6; i++) {\r\n      addSegment({\r\n        yawDelta: 0,\r\n        pitchDelta: 0,\r\n        rollDelta: 0,\r\n        lanes: [{ offset: 0, width: 16 }],\r\n        isBoost: (i >= 1 && i <= 4),\r\n        isFinishLine: (i === 5)\r\n      });\r\n    }\r\n  }\r\n};"],"names":["Level30","addSegment","i","yawRate","banking","curve","direction","chicanePattern","dir","flowPattern"],"mappings":"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"}