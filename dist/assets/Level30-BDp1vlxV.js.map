{"version":3,"file":"Level30-BDp1vlxV.js","sources":["../../src/tracks/levels/Level30.js"],"sourcesContent":["/**\n * Level 30 - Ultimate Circuit\n * The final challenge - COMPLETELY REDESIGNED for performance\n * Reduced from 440 to ~200 segments while maintaining difficulty\n */\n\nexport default {\n  name: \"Ultimate Circuit\",\n  description: \"The final test of speed and skill\",\n  difficulty: 5,\n  shader: \"infinity-flow\",\n  skybox: \"space-deep\",\n  \n  generateTrack(addSegment) {\n    // Opening stretch - 15 segments\n    for (let i = 0; i < 15; i++) {\n      addSegment({\n        yawDelta: 0,\n        pitchDelta: 0,\n        rollDelta: 0,\n        isStartLine: (i === 0),\n        lanes: [{ offset: 0, width: 14 }]\n      });\n    }\n    \n    // Rising spiral - OPTIMIZED: 25 segments (was 45)\n    for (let i = 0; i < 25; i++) {\n      const spiralProgress = i / 25;\n      const yawRate = Math.PI / 30;\n      \n      // Simple banking at start and end only\n      let banking = 0;\n      if (i < 2) banking = Math.PI / 10;\n      else if (i > 22) banking = -Math.PI / 10;\n      \n      addSegment({\n        yawDelta: yawRate,\n        pitchDelta: Math.PI / 125,\n        rollDelta: banking,\n        lanes: [{ offset: 0, width: 12 }]\n      });\n    }\n    \n    // High speed straight - 15 segments (was 25)\n    for (let i = 0; i < 15; i++) {\n      addSegment({\n        yawDelta: 0,\n        pitchDelta: 0,\n        rollDelta: 0,\n        lanes: [{ offset: 0, width: 14 }]\n      });\n    }\n    \n    // S-curves - HEAVILY OPTIMIZED: 30 segments (was 60)\n    for (let curve = 0; curve < 2; curve++) {\n      const direction = curve === 0 ? 1 : -1;\n      \n      // Bank in (1 segment)\n      addSegment({\n        rollDelta: direction * Math.PI / 6\n      });\n      \n      // Turn (12 segments)\n      for (let i = 0; i < 12; i++) {\n        addSegment({\n          yawDelta: direction * Math.PI / 24,\n          pitchDelta: 0,\n          rollDelta: 0,\n          lanes: [{ offset: 0, width: 13 }]\n        });\n      }\n      \n      // Bank out (1 segment)\n      addSegment({\n        rollDelta: -direction * Math.PI / 6\n      });\n      \n      // Straight (1 segment)\n      addSegment({\n        yawDelta: 0,\n        pitchDelta: 0,\n        rollDelta: 0\n      });\n    }\n    \n    // Technical chicane - SIMPLIFIED: 18 segments (was 40)\n    const chicanePattern = [-1, 1]; // Reduced from 3 to 2\n    \n    for (const dir of chicanePattern) {\n      // Quick turn (8 segments each)\n      for (let i = 0; i < 8; i++) {\n        addSegment({\n          yawDelta: dir * Math.PI / 32,\n          pitchDelta: 0,\n          rollDelta: 0,\n          lanes: [{ offset: 0, width: 11 }]\n        });\n      }\n      \n      // Recovery (1 segment)\n      addSegment({\n        yawDelta: 0,\n        pitchDelta: 0,\n        rollDelta: 0,\n        // No boost needed\n      });\n    }\n    \n    // Elevation descent - OPTIMIZED: 20 segments (was 35)\n    // Bank in\n    addSegment({\n      rollDelta: Math.PI / 8\n    });\n    \n    for (let i = 0; i < 18; i++) {\n      addSegment({\n        yawDelta: Math.PI / 54,\n        pitchDelta: -Math.PI / 100,\n        rollDelta: 0,\n        lanes: [{ offset: 0, width: 12 }]\n      });\n    }\n    \n    // Bank out\n    addSegment({\n      rollDelta: -Math.PI / 8\n    });\n    \n    // Power section - 20 segments (was 30)\n    for (let i = 0; i < 20; i++) {\n      addSegment({\n        yawDelta: 0,\n        pitchDelta: 0,\n        rollDelta: 0,\n        lanes: [{ offset: 0, width: 13 }]\n      });\n    }\n    \n    // Jump section - 15 segments (was 25)\n    // Approach\n    for (let i = 0; i < 8; i++) {\n      addSegment({\n        yawDelta: 0,\n        pitchDelta: i > 5 ? Math.PI / 60 : 0,\n        rollDelta: 0,\n        lanes: [{ offset: 0, width: 11 }]\n      });\n    }\n    \n    // Gap\n    for (let i = 0; i < 4; i++) {\n      addSegment({ isGap: true });\n    }\n    \n    // Landing\n    for (let i = 0; i < 3; i++) {\n      addSegment({\n        pitchDelta: i < 2 ? -Math.PI / 50 : 0,\n        rollDelta: 0,\n        lanes: [{ offset: 0, width: 12 }]\n      });\n    }\n    \n    // Single hairpin - SIMPLIFIED: 20 segments (was 50 with 2 hairpins)\n    // Entry\n    for (let i = 0; i < 3; i++) {\n      addSegment({\n        yawDelta: 0,\n        pitchDelta: 0,\n        rollDelta: 0\n      });\n    }\n    \n    // Bank in\n    addSegment({\n      rollDelta: Math.PI / 8\n    });\n    \n    // 180Â° turn\n    for (let i = 0; i < 12; i++) {\n      addSegment({\n        yawDelta: Math.PI / 12,\n        pitchDelta: 0,\n        rollDelta: 0,\n        lanes: [{ offset: 0, width: 9 }]\n      });\n    }\n    \n    // Bank out\n    addSegment({\n      rollDelta: -Math.PI / 8\n    });\n    \n    // Exit\n    for (let i = 0; i < 3; i++) {\n      addSegment({\n        yawDelta: 0,\n        pitchDelta: 0,\n        rollDelta: 0,\n        // No boost needed\n      });\n    }\n    \n    // Flowing final section - OPTIMIZED: 25 segments (was 60)\n    for (let i = 0; i < 25; i++) {\n      const flowPattern = Math.sin(i * 0.16);\n      \n      addSegment({\n        yawDelta: flowPattern * Math.PI / 60,\n        pitchDelta: 0,\n        rollDelta: 0,\n        lanes: [{ offset: 0, width: 12 }]\n      });\n    }\n    \n    // Final challenge - SIMPLIFIED: 20 segments (was 45)\n    // Bank in\n    addSegment({\n      rollDelta: Math.PI / 10\n    });\n    \n    // Final curve\n    for (let i = 0; i < 12; i++) {\n      addSegment({\n        yawDelta: Math.PI / 36,\n        pitchDelta: 0,\n        rollDelta: 0,\n        lanes: [{ offset: 0, width: 14 }]\n      });\n    }\n    \n    // Bank out\n    addSegment({\n      rollDelta: -Math.PI / 10\n    });\n    \n    // Sprint to finish - 6 segments (was 30)\n    for (let i = 0; i < 6; i++) {\n      addSegment({\n        yawDelta: 0,\n        pitchDelta: 0,\n        rollDelta: 0,\n        lanes: [{ offset: 0, width: 16 }],\n        isFinishLine: (i === 5)\n      });\n    }\n  }\n};"],"names":["Level30","addSegment","i","yawRate","banking","curve","direction","chicanePattern","dir","flowPattern"],"mappings":"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"}