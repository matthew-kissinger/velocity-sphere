{"version":3,"file":"Level31-Bp_DVI4G.js","sources":["../../src/tracks/levels/Level31.js"],"sourcesContent":["/**\n * Level 31 - Zen Garden Path\n * Opening level of Circuit Tranquil\n * Wide, flowing paths through a Japanese zen garden\n */\n\nexport default {\n  name: \"Zen Garden Path\",\n  description: \"Find your flow through peaceful garden paths\",\n  difficulty: 3,\n  shader: \"zen-garden\",\n  skybox: \"sunset-vibes\",\n  \n  generateTrack(addSegment) {\n    // Peaceful entrance through garden gates\n    for (let i = 0; i < 30; i++) {\n      addSegment({\n        yawDelta: 0,\n        pitchDelta: 0,\n        rollDelta: 0,\n        isStartLine: (i === 0),\n        lanes: [{ offset: 0, width: 12 }] // Wide comfortable track\n      });\n    }\n    \n    // First flowing S-curve around rock gardens\n    const gardenCurves = [\n      { angle: Math.PI / 3, segments: 25, width: 12 },   // 60° right\n      { angle: -Math.PI / 2.5, segments: 30, width: 14 }, // 72° left, wider\n      { angle: Math.PI / 4, segments: 20, width: 12 }    // 45° right\n    ];\n    \n    for (const curve of gardenCurves) {\n      const yawPerSegment = curve.angle / curve.segments;\n      \n      // Gentle banking entry\n      for (let i = 0; i < 4; i++) {\n        addSegment({ \n          rollDelta: (curve.angle > 0 ? 1 : -1) * Math.PI / 60,\n          lanes: [{ offset: 0, width: curve.width }]\n        });\n      }\n      \n      // Smooth curve\n      for (let i = 0; i < curve.segments; i++) {\n        addSegment({ \n          yawDelta: yawPerSegment,\n          lanes: [{ offset: 0, width: curve.width }]\n        });\n      }\n      \n      // Gentle banking exit\n      for (let i = 0; i < 4; i++) {\n        addSegment({ \n          rollDelta: (curve.angle > 0 ? -1 : 1) * Math.PI / 60,\n          lanes: [{ offset: 0, width: curve.width }]\n        });\n      }\n      \n      // Peaceful straight between curves\n      for (let i = 0; i < 10; i++) {\n        addSegment({ \n          lanes: [{ offset: 0, width: 12 }],\n          // No boost needed - peaceful track\n        });\n      }\n    }\n    \n    // Stone bridge section - gentle elevation\n    for (let i = 0; i < 8; i++) {\n      addSegment({ \n        pitchDelta: Math.PI / 120, // Very gentle climb\n        lanes: [{ offset: 0, width: 10 }]\n      });\n    }\n    \n    // Elevated bridge crossing\n    for (let i = 0; i < 15; i++) {\n      addSegment({ \n        lanes: [{ offset: 0, width: 10 }],\n        // No boost needed\n      });\n    }\n    \n    // Gentle descent from bridge\n    for (let i = 0; i < 8; i++) {\n      addSegment({ \n        pitchDelta: -Math.PI / 120,\n        lanes: [{ offset: 0, width: 10 }]\n      });\n    }\n    \n    // Meditation circle - large circular path\n    const circleSegments = 50;\n    const circleAngle = Math.PI * 2;\n    \n    // Gentle bank into circle\n    for (let i = 0; i < 5; i++) {\n      addSegment({ \n        rollDelta: Math.PI / 50,\n        lanes: [{ offset: 0, width: 14 }]\n      });\n    }\n    \n    // Perfect circle around central garden\n    for (let i = 0; i < circleSegments; i++) {\n      const progress = i / circleSegments;\n      addSegment({ \n        yawDelta: circleAngle / circleSegments,\n        lanes: [{ offset: 0, width: 14 }],\n        // No boost needed - meditation circle\n      });\n    }\n    \n    // Gentle bank out of circle\n    for (let i = 0; i < 5; i++) {\n      addSegment({ \n        rollDelta: -Math.PI / 50,\n        lanes: [{ offset: 0, width: 14 }]\n      });\n    }\n    \n    // Split path around koi pond\n    for (let i = 0; i < 35; i++) {\n      if (i < 8) {\n        // Gradual split\n        const factor = i / 8;\n        addSegment({\n          lanes: [\n            { offset: -8 * factor, width: 10 },\n            { offset: 8 * factor, width: 10 }\n          ]\n        });\n      } else if (i < 27) {\n        // Parallel paths around pond\n        const curve = Math.sin((i - 8) * 0.15) * Math.PI / 100;\n        addSegment({\n          lanes: [\n            { offset: -8, width: 10 },\n            { offset: 8, width: 10 }\n          ],\n          yawDelta: curve\n        });\n      } else {\n        // Merge back\n        const factor = 1 - (i - 27) / 8;\n        addSegment({\n          lanes: [\n            { offset: -8 * factor, width: 10 },\n            { offset: 8 * factor, width: 10 }\n          ]\n        });\n      }\n    }\n    \n    // Final approach through bamboo grove\n    for (let i = 0; i < 20; i++) {\n      addSegment({\n        yawDelta: Math.sin(i * 0.2) * Math.PI / 150, // Gentle weaving\n        lanes: [{ offset: 0, width: 12 }],\n        isFinishLine: (i === 19)\n      });\n    }\n  }\n};"],"names":["Level31","addSegment","i","gardenCurves","curve","yawPerSegment","circleSegments","circleAngle","factor"],"mappings":"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"}