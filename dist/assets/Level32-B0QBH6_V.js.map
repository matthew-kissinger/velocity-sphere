{"version":3,"file":"Level32-B0QBH6_V.js","sources":["../../src/tracks/levels/Level32.js"],"sourcesContent":["/**\r\n * Level 32 - Sakura Spiral\r\n * Cherry blossom grove with ascending spiral path\r\n * Beautiful and flowing with petal-strewn track\r\n */\r\n\r\nexport default {\r\n  name: \"Sakura Spiral\",\r\n  description: \"Ascend through blooming cherry blossoms\",\r\n  difficulty: 3,\r\n  shader: \"sakura-bloom\",\r\n  skybox: \"sunset-vibes\",\r\n  \r\n  generateTrack(addSegment) {\r\n    // Entrance through blossom grove\r\n    for (let i = 0; i < 25; i++) {\r\n      addSegment({\r\n        yawDelta: 0,\r\n        pitchDelta: 0,\r\n        rollDelta: 0,\r\n        isStartLine: (i === 0),\r\n        lanes: [{ offset: 0, width: 15 }] // Extra wide for beauty\r\n      });\r\n    }\r\n    \r\n    // Begin gentle spiral ascent\r\n    const spiralLevels = 3; // Three full rotations\r\n    const segmentsPerLevel = 60;\r\n    const totalHeight = Math.PI / 8; // Total climb angle\r\n    \r\n    for (let level = 0; level < spiralLevels; level++) {\r\n      const levelProgress = level / spiralLevels;\r\n      \r\n      for (let i = 0; i < segmentsPerLevel; i++) {\r\n        const segmentProgress = i / segmentsPerLevel;\r\n        const overallProgress = (level * segmentsPerLevel + i) / (spiralLevels * segmentsPerLevel);\r\n        \r\n        // Spiral parameters\r\n        const yawDelta = (Math.PI * 2) / segmentsPerLevel;\r\n        const pitchDelta = totalHeight / (spiralLevels * segmentsPerLevel);\r\n        \r\n        // Width varies for interest\r\n        const width = 12 + Math.sin(segmentProgress * Math.PI * 2) * 2;\r\n        \r\n        // Gentle banking on the spiral\r\n        const rollDelta = Math.sin(segmentProgress * Math.PI * 2) * Math.PI / 80;\r\n        \r\n        addSegment({\r\n          yawDelta: yawDelta,\r\n          pitchDelta: pitchDelta,\r\n          rollDelta: rollDelta,\r\n          lanes: [{ offset: 0, width: width }],\r\n          isBoost: (i % 20 === 10) // Regular boost placement\r\n        });\r\n      }\r\n      \r\n      // Platform between levels\r\n      for (let i = 0; i < 10; i++) {\r\n        addSegment({\r\n          yawDelta: 0,\r\n          pitchDelta: 0,\r\n          rollDelta: 0,\r\n          lanes: [{ offset: 0, width: 20 }], // Extra wide platform\r\n          isBoostPowerup: (level === 1 && i === 5) // Powerup on middle platform\r\n        });\r\n      }\r\n    }\r\n    \r\n    // Summit celebration area\r\n    for (let i = 0; i < 15; i++) {\r\n      addSegment({\r\n        yawDelta: 0,\r\n        pitchDelta: 0,\r\n        rollDelta: 0,\r\n        lanes: [{ offset: 0, width: 25 }], // Massive summit area\r\n        isBoost: (i >= 5 && i <= 9) // Boost zone at summit\r\n      });\r\n    }\r\n    \r\n    // Petal fall descent - gentle winding path down\r\n    const descentSections = [\r\n      { angle: -Math.PI / 3, segments: 20 },\r\n      { angle: Math.PI / 4, segments: 18 },\r\n      { angle: -Math.PI / 3.5, segments: 22 },\r\n      { angle: Math.PI / 2.8, segments: 24 }\r\n    ];\r\n    \r\n    for (const section of descentSections) {\r\n      // Smooth turn with descent\r\n      for (let i = 0; i < section.segments; i++) {\r\n        const progress = i / section.segments;\r\n        \r\n        addSegment({\r\n          yawDelta: section.angle / section.segments,\r\n          pitchDelta: -Math.PI / 200, // Much gentler descent - half the steepness\r\n          rollDelta: (section.angle > 0 ? 1 : -1) * Math.PI / 60 * Math.sin(progress * Math.PI),\r\n          lanes: [{ offset: 0, width: 14 }]\r\n        });\r\n      }\r\n      \r\n      // Straight section between turns\r\n      for (let i = 0; i < 8; i++) {\r\n        addSegment({\r\n          yawDelta: 0,\r\n          pitchDelta: -Math.PI / 240, // Much gentler descent\r\n          rollDelta: 0,\r\n          lanes: [{ offset: 0, width: 12 }]\r\n        });\r\n      }\r\n    }\r\n    \r\n    // Blossom tunnel finale\r\n    for (let i = 0; i < 30; i++) {\r\n      const tunnelProgress = i / 30;\r\n      \r\n      // Create gentle side-to-side motion\r\n      const weave = Math.sin(tunnelProgress * Math.PI * 3) * Math.PI / 200;\r\n      \r\n      addSegment({\r\n        yawDelta: weave,\r\n        pitchDelta: 0,\r\n        rollDelta: 0,\r\n        lanes: [{ offset: 0, width: 10 + tunnelProgress * 5 }], // Widening to finish\r\n        isBoost: (i >= 20 && i <= 25), // Final boost\r\n        isFinishLine: (i === 29)\r\n      });\r\n    }\r\n  }\r\n};"],"names":["Level32","addSegment","i","spiralLevels","segmentsPerLevel","totalHeight","level","segmentProgress","yawDelta","pitchDelta","width","rollDelta","descentSections","section","progress","tunnelProgress","weave"],"mappings":"AAMA,MAAAA,EAAe,CACb,KAAM,gBACN,YAAa,0CACb,WAAY,EACZ,OAAQ,eACR,OAAQ,eAER,cAAcC,EAAY,CAExB,QAASC,EAAI,EAAGA,EAAI,GAAIA,IACtBD,EAAW,CACT,SAAU,EACV,WAAY,EACZ,UAAW,EACX,YAAcC,IAAM,EACpB,MAAO,CAAC,CAAE,OAAQ,EAAG,MAAO,EAAE,CAAE,CACxC,CAAO,EAIH,MAAMC,EAAe,EACfC,EAAmB,GACnBC,EAAc,KAAK,GAAK,EAE9B,QAASC,EAAQ,EAAGA,EAAQH,EAAcG,IAAS,CAGjD,QAASJ,EAAI,EAAGA,EAAIE,EAAkBF,IAAK,CACzC,MAAMK,EAAkBL,EAAIE,EAItBI,EAAY,KAAK,GAAK,EAAKJ,EAC3BK,EAAaJ,GAAeF,EAAeC,GAG3CM,EAAQ,GAAK,KAAK,IAAIH,EAAkB,KAAK,GAAK,CAAC,EAAI,EAGvDI,EAAY,KAAK,IAAIJ,EAAkB,KAAK,GAAK,CAAC,EAAI,KAAK,GAAK,GAEtEN,EAAW,CACT,SAAUO,EACV,WAAYC,EACZ,UAAWE,EACX,MAAO,CAAC,CAAE,OAAQ,EAAG,MAAOD,CAAK,CAAE,EACnC,QAAUR,EAAI,KAAO,EAC/B,CAAS,CACH,CAGA,QAASA,EAAI,EAAGA,EAAI,GAAIA,IACtBD,EAAW,CACT,SAAU,EACV,WAAY,EACZ,UAAW,EACX,MAAO,CAAC,CAAE,OAAQ,EAAG,MAAO,EAAE,CAAE,EAChC,eAAiBK,IAAU,GAAKJ,IAAM,CAChD,CAAS,CAEL,CAGA,QAASA,EAAI,EAAGA,EAAI,GAAIA,IACtBD,EAAW,CACT,SAAU,EACV,WAAY,EACZ,UAAW,EACX,MAAO,CAAC,CAAE,OAAQ,EAAG,MAAO,EAAE,CAAE,EAChC,QAAUC,GAAK,GAAKA,GAAK,CACjC,CAAO,EAIH,MAAMU,EAAkB,CACtB,CAAE,MAAO,CAAC,KAAK,GAAK,EAAG,SAAU,EAAE,EACnC,CAAE,MAAO,KAAK,GAAK,EAAG,SAAU,EAAE,EAClC,CAAE,MAAO,CAAC,KAAK,GAAK,IAAK,SAAU,EAAE,EACrC,CAAE,MAAO,KAAK,GAAK,IAAK,SAAU,EAAE,CAC1C,EAEI,UAAWC,KAAWD,EAAiB,CAErC,QAASV,EAAI,EAAGA,EAAIW,EAAQ,SAAUX,IAAK,CACzC,MAAMY,EAAWZ,EAAIW,EAAQ,SAE7BZ,EAAW,CACT,SAAUY,EAAQ,MAAQA,EAAQ,SAClC,WAAY,CAAC,KAAK,GAAK,IACvB,WAAYA,EAAQ,MAAQ,EAAI,EAAI,IAAM,KAAK,GAAK,GAAK,KAAK,IAAIC,EAAW,KAAK,EAAE,EACpF,MAAO,CAAC,CAAE,OAAQ,EAAG,MAAO,EAAE,CAAE,CAC1C,CAAS,CACH,CAGA,QAASZ,EAAI,EAAGA,EAAI,EAAGA,IACrBD,EAAW,CACT,SAAU,EACV,WAAY,CAAC,KAAK,GAAK,IACvB,UAAW,EACX,MAAO,CAAC,CAAE,OAAQ,EAAG,MAAO,EAAE,CAAE,CAC1C,CAAS,CAEL,CAGA,QAASC,EAAI,EAAGA,EAAI,GAAIA,IAAK,CAC3B,MAAMa,EAAiBb,EAAI,GAGrBc,EAAQ,KAAK,IAAID,EAAiB,KAAK,GAAK,CAAC,EAAI,KAAK,GAAK,IAEjEd,EAAW,CACT,SAAUe,EACV,WAAY,EACZ,UAAW,EACX,MAAO,CAAC,CAAE,OAAQ,EAAG,MAAO,GAAKD,EAAiB,EAAG,EACrD,QAAUb,GAAK,IAAMA,GAAK,GAC1B,aAAeA,IAAM,EAC7B,CAAO,CACH,CACF,CACF"}