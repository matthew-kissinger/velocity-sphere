const n={name:"Bamboo Grove",description:"Wind through towering bamboo in dappled sunlight",difficulty:4,shader:"bamboo-forest",skybox:"forest-canopy",generateTrack(e){for(let t=0;t<20;t++)e({yawDelta:0,pitchDelta:0,rollDelta:0,isStartLine:t===0,lanes:[{offset:0,width:11}]});const i=[{pattern:"gentle_left",segments:25},{pattern:"straight",segments:15},{pattern:"s_curve",segments:35},{pattern:"gentle_right",segments:20},{pattern:"tight_weave",segments:30}];for(const t of i)switch(t.pattern){case"gentle_left":for(let s=0;s<t.segments;s++){const a=Math.sin(s*.3)*Math.PI/300;e({yawDelta:-Math.PI/(t.segments*2)+a,pitchDelta:Math.sin(s*.2)*Math.PI/200,lanes:[{offset:0,width:10+Math.sin(s*.1)}]})}break;case"gentle_right":for(let s=0;s<t.segments;s++){const a=Math.sin(s*.25)*Math.PI/280;e({yawDelta:Math.PI/(t.segments*2.2)+a,pitchDelta:Math.cos(s*.15)*Math.PI/180,lanes:[{offset:0,width:10+Math.cos(s*.12)}]})}break;case"s_curve":for(let s=0;s<t.segments;s++){const a=s/t.segments,o=Math.sin(a*Math.PI)*Math.PI/25;e({yawDelta:o,pitchDelta:Math.sin(a*Math.PI*2)*Math.PI/150,lanes:[{offset:0,width:11}],isBoost:s===Math.floor(t.segments/2)})}break;case"tight_weave":for(let s=0;s<t.segments;s++){const a=Math.sin(s*.4)*Math.PI/60,o=9+Math.abs(Math.sin(s*.4))*3;e({yawDelta:a,lanes:[{offset:0,width:o}]})}break;case"straight":for(let s=0;s<t.segments;s++)e({yawDelta:Math.sin(s*.1)*Math.PI/500,lanes:[{offset:0,width:12}],isBoost:s>=5&&s<=9});break}for(let t=0;t<40;t++){const s=t/40,a=Math.sin(s*Math.PI*1.5)*Math.PI/40;e({yawDelta:a,pitchDelta:Math.sin(s*Math.PI)*Math.PI/100,lanes:[{offset:0,width:8}],isBoostPowerup:t===20})}for(let t=0;t<45;t++)if(t<8)e({lanes:[{offset:0,width:12+t*2}]});else if(t<12){const s=(t-8)/4;e({lanes:[{offset:-10*s,width:9},{offset:10*s,width:9}]})}else if(t<33)e({lanes:[{offset:-10,width:9},{offset:10,width:9}],yawDelta:Math.sin((t-12)*.15)*Math.PI/150});else if(t<37){const s=1-(t-33)/4;e({lanes:[{offset:-10*s,width:9},{offset:10*s,width:9}]})}else e({lanes:[{offset:0,width:20-(t-37)*2}]});for(let t=0;t<35;t++){const s=Math.sin(t*.08)*Math.PI/70;e({yawDelta:s,pitchDelta:0,rollDelta:s*.3,lanes:[{offset:0,width:14}],isBoost:t%12===6})}for(let t=0;t<25;t++){const s=t/25;e({yawDelta:0,pitchDelta:-Math.sin(s*Math.PI)*Math.PI/200,lanes:[{offset:0,width:11+s*4}],isBoost:t>=15&&t<=20,isFinishLine:t===24})}}};export{n as default};
//# sourceMappingURL=Level34-DUXTbBqy.js.map
