{"version":3,"file":"Level34-DqnTPIY7.js","sources":["../../src/tracks/levels/Level34.js"],"sourcesContent":["/**\n * Level 34 - Bamboo Grove\n * Natural winding path through dense bamboo forest\n * Dappled light and organic track flow\n */\n\nexport default {\n  name: \"Bamboo Grove\",\n  description: \"Wind through towering bamboo in dappled sunlight\",\n  difficulty: 4,\n  shader: \"bamboo-forest\",\n  skybox: \"forest-canopy\",\n  \n  generateTrack(addSegment) {\n    // Forest entrance\n    for (let i = 0; i < 20; i++) {\n      addSegment({\n        yawDelta: 0,\n        pitchDelta: 0,\n        rollDelta: 0,\n        isStartLine: (i === 0),\n        lanes: [{ offset: 0, width: 11 }]\n      });\n    }\n    \n    // Natural meandering path through bamboo\n    const bambooSections = [\n      { pattern: \"gentle_left\", segments: 25 },\n      { pattern: \"straight\", segments: 15 },\n      { pattern: \"s_curve\", segments: 35 },\n      { pattern: \"gentle_right\", segments: 20 },\n      { pattern: \"tight_weave\", segments: 30 }\n    ];\n    \n    for (const section of bambooSections) {\n      switch (section.pattern) {\n        case \"gentle_left\":\n          for (let i = 0; i < section.segments; i++) {\n            const naturalVariation = Math.sin(i * 0.3) * Math.PI / 300;\n            addSegment({\n              yawDelta: -Math.PI / (section.segments * 2) + naturalVariation,\n              pitchDelta: Math.sin(i * 0.2) * Math.PI / 200, // Gentle terrain\n              lanes: [{ offset: 0, width: 10 + Math.sin(i * 0.1) }]\n            });\n          }\n          break;\n          \n        case \"gentle_right\":\n          for (let i = 0; i < section.segments; i++) {\n            const naturalVariation = Math.sin(i * 0.25) * Math.PI / 280;\n            addSegment({\n              yawDelta: Math.PI / (section.segments * 2.2) + naturalVariation,\n              pitchDelta: Math.cos(i * 0.15) * Math.PI / 180,\n              lanes: [{ offset: 0, width: 10 + Math.cos(i * 0.12) }]\n            });\n          }\n          break;\n          \n        case \"s_curve\":\n          for (let i = 0; i < section.segments; i++) {\n            const progress = i / section.segments;\n            const sCurve = Math.sin(progress * Math.PI) * Math.PI / 25;\n            addSegment({\n              yawDelta: sCurve,\n              pitchDelta: Math.sin(progress * Math.PI * 2) * Math.PI / 150,\n              lanes: [{ offset: 0, width: 11 }],\n              // No boost needed - natural flow\n            });\n          }\n          break;\n          \n        case \"tight_weave\":\n          for (let i = 0; i < section.segments; i++) {\n            const weave = Math.sin(i * 0.4) * Math.PI / 60;\n            const width = 9 + Math.abs(Math.sin(i * 0.4)) * 3; // Wider on straights\n            addSegment({\n              yawDelta: weave,\n              lanes: [{ offset: 0, width: width }]\n            });\n          }\n          break;\n          \n        case \"straight\":\n          for (let i = 0; i < section.segments; i++) {\n            addSegment({\n              yawDelta: Math.sin(i * 0.1) * Math.PI / 500, // Very slight variation\n              lanes: [{ offset: 0, width: 12 }],\n              // No boost needed\n            });\n          }\n          break;\n      }\n    }\n    \n    // Bamboo tunnel section - tighter but beautiful\n    for (let i = 0; i < 40; i++) {\n      const tunnelProgress = i / 40;\n      const tunnelCurve = Math.sin(tunnelProgress * Math.PI * 1.5) * Math.PI / 40;\n      \n      addSegment({\n        yawDelta: tunnelCurve,\n        pitchDelta: Math.sin(tunnelProgress * Math.PI) * Math.PI / 100, // Gentle hill\n        lanes: [{ offset: 0, width: 8 }], // Narrower in tunnel\n        // No powerup needed\n      });\n    }\n    \n    // Clearing with split paths\n    for (let i = 0; i < 45; i++) {\n      if (i < 8) {\n        // Enter clearing - widen track\n        addSegment({\n          lanes: [{ offset: 0, width: 12 + i * 2 }]\n        });\n      } else if (i < 12) {\n        // Split around bamboo cluster\n        const factor = (i - 8) / 4;\n        addSegment({\n          lanes: [\n            { offset: -10 * factor, width: 9 },\n            { offset: 10 * factor, width: 9 }\n          ]\n        });\n      } else if (i < 33) {\n        // Parallel paths through grove\n        addSegment({\n          lanes: [\n            { offset: -10, width: 9 },\n            { offset: 10, width: 9 }\n          ],\n          yawDelta: Math.sin((i - 12) * 0.15) * Math.PI / 150\n        });\n      } else if (i < 37) {\n        // Merge paths\n        const factor = 1 - (i - 33) / 4;\n        addSegment({\n          lanes: [\n            { offset: -10 * factor, width: 9 },\n            { offset: 10 * factor, width: 9 }\n          ]\n        });\n      } else {\n        // Exit clearing\n        addSegment({\n          lanes: [{ offset: 0, width: 20 - (i - 37) * 2 }]\n        });\n      }\n    }\n    \n    // Ancient grove section - wider, majestic\n    for (let i = 0; i < 35; i++) {\n      const groveFlow = Math.sin(i * 0.08) * Math.PI / 70;\n      \n      addSegment({\n        yawDelta: groveFlow,\n        pitchDelta: 0,\n        rollDelta: groveFlow * 0.3, // Gentle banking with turns\n        lanes: [{ offset: 0, width: 14 }],\n        // No boost needed - peaceful grove\n      });\n    }\n    \n    // Final zen pathway to finish\n    for (let i = 0; i < 25; i++) {\n      const finalProgress = i / 25;\n      \n      addSegment({\n        yawDelta: 0,\n        pitchDelta: -Math.sin(finalProgress * Math.PI) * Math.PI / 200, // Gentle dip\n        lanes: [{ offset: 0, width: 11 + finalProgress * 4 }], // Widening to finish\n        isFinishLine: (i === 24)\n      });\n    }\n  }\n};"],"names":["Level34","addSegment","i","bambooSections","section","naturalVariation","progress","sCurve","weave","width","tunnelProgress","tunnelCurve","factor","groveFlow","finalProgress"],"mappings":"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"}