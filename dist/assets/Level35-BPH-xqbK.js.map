{"version":3,"file":"Level35-BPH-xqbK.js","sources":["../../src/tracks/levels/Level35.js"],"sourcesContent":["/**\n * Level 35 - Cloud Temple\n * Floating temple in the clouds with ethereal pathways\n * Wide platforms connected by gentle bridges\n */\n\nexport default {\n  name: \"Cloud Temple\",\n  description: \"Race through heavenly temple grounds above the clouds\",\n  difficulty: 4,\n  shader: \"cloud-surface\",\n  skybox: \"crystal-sky\",\n  \n  generateTrack(addSegment) {\n    // Temple entrance platform\n    for (let i = 0; i < 25; i++) {\n      addSegment({\n        yawDelta: 0,\n        pitchDelta: 0,\n        rollDelta: 0,\n        isStartLine: (i === 0),\n        lanes: [{ offset: 0, width: 16 }] // Wide temple platform\n      });\n    }\n    \n    // First bridge to outer courtyard\n    for (let i = 0; i < 20; i++) {\n      const bridgeProgress = i / 20;\n      const bridgeArch = Math.sin(bridgeProgress * Math.PI) * Math.PI / 80; // Gentle arch\n      \n      addSegment({\n        pitchDelta: i < 10 ? bridgeArch : -bridgeArch,\n        lanes: [{ offset: 0, width: 12 }]\n      });\n    }\n    \n    // Outer courtyard - figure-8 around temple spires\n    const figure8Segments = 80;\n    const figure8Half = figure8Segments / 2;\n    \n    // First loop around left spire\n    for (let i = 0; i < figure8Half; i++) {\n      const progress = i / figure8Half;\n      const angle = Math.PI * 2 * progress;\n      \n      addSegment({\n        yawDelta: Math.PI * 2 / figure8Half,\n        pitchDelta: Math.sin(angle) * Math.PI / 200, // Gentle wave\n        rollDelta: Math.sin(angle) * Math.PI / 60, // Soft banking\n        lanes: [{ offset: 0, width: 14 }],\n        // No boost needed\n      });\n    }\n    \n    // Crossover section\n    for (let i = 0; i < 10; i++) {\n      addSegment({\n        yawDelta: 0,\n        pitchDelta: i < 5 ? Math.PI / 200 : -Math.PI / 200, // Small hill\n        lanes: [{ offset: 0, width: 16 }]\n      });\n    }\n    \n    // Second loop around right spire\n    for (let i = 0; i < figure8Half; i++) {\n      const progress = i / figure8Half;\n      const angle = Math.PI * 2 * progress;\n      \n      addSegment({\n        yawDelta: -Math.PI * 2 / figure8Half, // Opposite direction\n        pitchDelta: Math.sin(angle) * Math.PI / 200,\n        rollDelta: -Math.sin(angle) * Math.PI / 60,\n        lanes: [{ offset: 0, width: 14 }],\n        // No powerup needed\n      });\n    }\n    \n    // Sacred garden section - multiple peaceful paths\n    for (let i = 0; i < 50; i++) {\n      if (i < 8) {\n        // Split into garden paths\n        const factor = i / 8;\n        addSegment({\n          lanes: [\n            { offset: -12 * factor, width: 10 },\n            { offset: 0, width: 10 },\n            { offset: 12 * factor, width: 10 }\n          ]\n        });\n      } else if (i < 42) {\n        // Three paths through gardens\n        const gardenProgress = (i - 8) / 34;\n        const gentleCurve = Math.sin(gardenProgress * Math.PI * 2) * Math.PI / 200;\n        \n        addSegment({\n          lanes: [\n            { offset: -12, width: 10 },\n            { offset: 0, width: 10 },\n            { offset: 12, width: 10 }\n          ],\n          yawDelta: gentleCurve,\n          pitchDelta: Math.sin(gardenProgress * Math.PI * 3) * Math.PI / 300\n        });\n      } else {\n        // Merge garden paths\n        const factor = 1 - (i - 42) / 8;\n        addSegment({\n          lanes: [\n            { offset: -12 * factor, width: 10 },\n            { offset: 0, width: 10 },\n            { offset: 12 * factor, width: 10 }\n          ]\n        });\n      }\n    }\n    \n    // Inner sanctum approach - climbing to main temple\n    for (let i = 0; i < 25; i++) {\n      const climbProgress = i / 25;\n      \n      addSegment({\n        pitchDelta: Math.PI / 120, // Steady climb\n        yawDelta: Math.sin(climbProgress * Math.PI) * Math.PI / 150, // Slight weave\n        lanes: [{ offset: 0, width: 15 }],\n        // No boost needed for climb\n      });\n    }\n    \n    // Temple summit - wide ceremonial platform\n    for (let i = 0; i < 20; i++) {\n      addSegment({\n        lanes: [{ offset: 0, width: 25 }], // Massive platform\n        // No boost needed on platform\n      });\n    }\n    \n    // Heavenly descent - gentle winding path down\n    for (let i = 0; i < 60; i++) {\n      const descentProgress = i / 60;\n      \n      // Gentle S-curves instead of spiral\n      const curveDelta = Math.sin(descentProgress * Math.PI * 3) * Math.PI / 80;\n      \n      addSegment({\n        yawDelta: curveDelta,\n        pitchDelta: -Math.PI / 150, // Gentler descent\n        rollDelta: curveDelta * 0.3, // Mild banking that follows the curves\n        lanes: [{ offset: 0, width: 12 + Math.sin(descentProgress * Math.PI * 2) * 2 }]\n      });\n    }\n    \n    // Cloud bridge finale\n    for (let i = 0; i < 30; i++) {\n      const finalProgress = i / 30;\n      \n      addSegment({\n        yawDelta: 0,\n        pitchDelta: 0,\n        rollDelta: 0,\n        lanes: [{ offset: 0, width: 14 + finalProgress * 6 }], // Expanding to finish\n        isFinishLine: (i === 29)\n      });\n    }\n  }\n};"],"names":["Level35","addSegment","i","bridgeProgress","bridgeArch","figure8Half","progress","angle","factor","gardenProgress","gentleCurve","climbProgress","descentProgress","curveDelta","finalProgress"],"mappings":"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"}