{"version":3,"file":"Level36-w9jB4t87.js","sources":["../../src/tracks/levels/Level36.js"],"sourcesContent":["/**\r\n * Level 36 - Aurora Fields\r\n * Open fields under northern lights with flowing terrain\r\n * Wide paths with gentle elevation changes\r\n */\r\n\r\nexport default {\r\n  name: \"Aurora Fields\",\r\n  description: \"Flow through endless fields beneath dancing lights\",\r\n  difficulty: 5,\r\n  shader: \"aurora-zen\",\r\n  railShader: \"aurora-rails\", // Special glowing rails for visibility\r\n  skybox: \"aurora-dance\",\r\n  \r\n  generateTrack(addSegment) {\r\n    // Open field start\r\n    for (let i = 0; i < 30; i++) {\r\n      addSegment({\r\n        yawDelta: 0,\r\n        pitchDelta: 0,\r\n        rollDelta: 0,\r\n        isStartLine: (i === 0),\r\n        lanes: [{ offset: 0, width: 18 }] // Very wide open track\r\n      });\r\n    }\r\n    \r\n    // Rolling hills section - natural terrain flow\r\n    const hillSections = [\r\n      { length: 40, pattern: \"rolling\" },\r\n      { length: 35, pattern: \"valley\" },\r\n      { length: 45, pattern: \"plateau\" },\r\n      { length: 30, pattern: \"descent\" }\r\n    ];\r\n    \r\n    for (const section of hillSections) {\r\n      switch (section.pattern) {\r\n        case \"rolling\":\r\n          for (let i = 0; i < section.length; i++) {\r\n            const hillProgress = i / section.length;\r\n            const elevation = Math.sin(hillProgress * Math.PI * 3) * Math.PI / 100;\r\n            const curve = Math.sin(hillProgress * Math.PI * 2) * Math.PI / 120;\r\n            \r\n            addSegment({\r\n              yawDelta: curve,\r\n              pitchDelta: elevation,\r\n              rollDelta: curve * 0.5, // Natural banking\r\n              lanes: [{ offset: 0, width: 16 }],\r\n              isBoost: (i % 15 === 7)\r\n            });\r\n          }\r\n          break;\r\n          \r\n        case \"valley\":\r\n          for (let i = 0; i < section.length; i++) {\r\n            const valleyProgress = i / section.length;\r\n            let pitch = 0;\r\n            \r\n            if (valleyProgress < 0.4) {\r\n              pitch = -Math.PI / 80; // Descend into valley\r\n            } else if (valleyProgress > 0.6) {\r\n              pitch = Math.PI / 80; // Climb out\r\n            }\r\n            \r\n            addSegment({\r\n              pitchDelta: pitch,\r\n              yawDelta: Math.sin(valleyProgress * Math.PI) * Math.PI / 100,\r\n              lanes: [{ offset: 0, width: 14 + Math.sin(valleyProgress * Math.PI) * 4 }]\r\n            });\r\n          }\r\n          break;\r\n          \r\n        case \"plateau\":\r\n          for (let i = 0; i < section.length; i++) {\r\n            const plateauProgress = i / section.length;\r\n            \r\n            addSegment({\r\n              yawDelta: Math.sin(plateauProgress * Math.PI * 1.5) * Math.PI / 90,\r\n              pitchDelta: 0, // Flat on top\r\n              lanes: [{ offset: 0, width: 20 }], // Extra wide on plateau\r\n              isBoostPowerup: (i === section.length / 2)\r\n            });\r\n          }\r\n          break;\r\n          \r\n        case \"descent\":\r\n          for (let i = 0; i < section.length; i++) {\r\n            const descentProgress = i / section.length;\r\n            \r\n            addSegment({\r\n              pitchDelta: -Math.PI / 100 * (1 - descentProgress * 0.5), // Easing descent\r\n              yawDelta: 0,\r\n              lanes: [{ offset: 0, width: 15 }],\r\n              isBoost: (i >= 20 && i <= 25)\r\n            });\r\n          }\r\n          break;\r\n      }\r\n    }\r\n    \r\n    // Aurora dance section - multiple flowing paths\r\n    for (let i = 0; i < 60; i++) {\r\n      if (i < 10) {\r\n        // Create three aurora streams\r\n        const factor = i / 10;\r\n        addSegment({\r\n          lanes: [\r\n            { offset: -16 * factor, width: 12 },\r\n            { offset: 0, width: 14 },\r\n            { offset: 16 * factor, width: 12 }\r\n          ]\r\n        });\r\n      } else if (i < 50) {\r\n        // Flowing parallel paths like aurora ribbons\r\n        const flowProgress = (i - 10) / 40;\r\n        const flow = Math.sin(flowProgress * Math.PI * 2.5);\r\n        \r\n        addSegment({\r\n          lanes: [\r\n            { offset: -16 + flow * 3, width: 12 },\r\n            { offset: 0, width: 14 },\r\n            { offset: 16 - flow * 3, width: 12 }\r\n          ],\r\n          yawDelta: flow * Math.PI / 150,\r\n          pitchDelta: Math.sin(flowProgress * Math.PI * 4) * Math.PI / 300\r\n        });\r\n      } else {\r\n        // Merge aurora streams\r\n        const factor = 1 - (i - 50) / 10;\r\n        addSegment({\r\n          lanes: [\r\n            { offset: -16 * factor, width: 12 },\r\n            { offset: 0, width: 14 },\r\n            { offset: 16 * factor, width: 12 }\r\n          ]\r\n        });\r\n      }\r\n    }\r\n    \r\n    // Wind swept plains - gentle S-curves\r\n    const windSections = 40;\r\n    for (let i = 0; i < windSections; i++) {\r\n      const windProgress = i / windSections;\r\n      const windCurve = Math.sin(windProgress * Math.PI * 2) * Math.PI / 60;\r\n      \r\n      addSegment({\r\n        yawDelta: windCurve,\r\n        pitchDelta: Math.sin(windProgress * Math.PI * 3) * Math.PI / 200,\r\n        rollDelta: windCurve * 0.7,\r\n        lanes: [{ offset: 0, width: 17 }]\r\n      });\r\n    }\r\n    \r\n    // Final aurora corridor - majestic finish\r\n    for (let i = 0; i < 35; i++) {\r\n      const corridorProgress = i / 35;\r\n      \r\n      addSegment({\r\n        yawDelta: 0,\r\n        pitchDelta: -Math.sin(corridorProgress * Math.PI) * Math.PI / 150, // Gentle dip\r\n        lanes: [{ offset: 0, width: 15 + corridorProgress * 10 }], // Expanding width\r\n        isBoost: (i >= 25 && i <= 30),\r\n        isFinishLine: (i === 34)\r\n      });\r\n    }\r\n  }\r\n};"],"names":["Level36","addSegment","i","hillSections","section","hillProgress","elevation","curve","valleyProgress","pitch","plateauProgress","descentProgress","factor","flowProgress","flow","windSections","windProgress","windCurve","corridorProgress"],"mappings":"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"}