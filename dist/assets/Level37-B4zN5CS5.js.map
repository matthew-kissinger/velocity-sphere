{"version":3,"file":"Level37-B4zN5CS5.js","sources":["../../src/tracks/levels/Level37.js"],"sourcesContent":["/**\n * Level 37 - Crystal Cavern Zen (COMPLETELY REDESIGNED)\n * Peaceful crystal cave with gentle curves and no inversions\n * Wide paths through luminous formations\n */\n\nexport default {\n  name: \"Crystal Cavern Zen\",\n  description: \"Glide through serene crystal formations\",\n  difficulty: 5,\n  shader: \"crystal-surface\",\n  skybox: \"crystal-cavern\",\n  \n  generateTrack(addSegment) {\n    // Cave entrance\n    for (let i = 0; i < 25; i++) {\n      addSegment({\n        yawDelta: 0,\n        pitchDelta: 0,\n        rollDelta: 0,\n        isStartLine: (i === 0),\n        lanes: [{ offset: 0, width: 14 }]\n      });\n    }\n    \n    // SECTION 1: Crystal Gallery\n    // Wide paths between crystal formations\n    const galleryTurns = [\n      { angle: Math.PI / 3.5, segments: 30 },\n      { angle: -Math.PI / 2.5, segments: 35 },\n      { angle: Math.PI / 3, segments: 28 },\n      { angle: -Math.PI / 2.8, segments: 32 }\n    ];\n    \n    for (const turn of galleryTurns) {\n      // Straight approach\n      for (let i = 0; i < 12; i++) {\n        addSegment({\n          yawDelta: 0,\n          pitchDelta: 0,\n          rollDelta: 0,\n          lanes: [{ offset: 0, width: 15 }]\n        });\n      }\n      \n      // Gentle banking entry\n      for (let i = 0; i < 5; i++) {\n        addSegment({\n          rollDelta: (turn.angle > 0 ? 1 : -1) * Math.PI / 120,\n          lanes: [{ offset: 0, width: 14 }]\n        });\n      }\n      \n      // Smooth turn through crystals\n      for (let i = 0; i < turn.segments; i++) {\n        const progress = i / turn.segments;\n        addSegment({\n          yawDelta: turn.angle / turn.segments,\n          pitchDelta: Math.sin(progress * Math.PI) * Math.PI / 300,\n          rollDelta: 0,\n          lanes: [{ offset: 0, width: 13 }]\n        });\n      }\n      \n      // Banking exit\n      for (let i = 0; i < 5; i++) {\n        addSegment({\n          rollDelta: (turn.angle > 0 ? -1 : 1) * Math.PI / 120,\n          lanes: [{ offset: 0, width: 14 }]\n        });\n      }\n    }\n    \n    // SECTION 2: Reflection Pool\n    // Wide peaceful section\n    for (let i = 0; i < 40; i++) {\n      const poolPhase = i / 40;\n      \n      addSegment({\n        yawDelta: Math.sin(poolPhase * Math.PI * 2) * Math.PI / 200,\n        pitchDelta: 0,\n        rollDelta: 0,\n        lanes: [{ offset: 0, width: 20 }]\n      });\n    }\n    \n    // SECTION 3: Crystal Rapids\n    // Flowing section with gentle waves\n    for (let i = 0; i < 50; i++) {\n      const rapidPhase = i / 50;\n      const rapidFlow = Math.sin(rapidPhase * Math.PI * 4) * Math.PI / 100;\n      \n      addSegment({\n        yawDelta: rapidFlow,\n        pitchDelta: Math.cos(rapidPhase * Math.PI * 3) * Math.PI / 250,\n        rollDelta: rapidFlow * 0.4, // Very mild banking\n        lanes: [{ offset: 0, width: 12 }],\n        isBoost: (i > 20 && i < 25) // Speed section\n      });\n    }\n    \n    // SECTION 4: Geode Chamber\n    // Large open area with circular path\n    for (let i = 0; i < 60; i++) {\n      const chamberProgress = i / 60;\n      \n      // Simple circular path\n      addSegment({\n        yawDelta: Math.PI * 2 / 60, // Full circle\n        pitchDelta: Math.sin(chamberProgress * Math.PI * 2) * Math.PI / 200,\n        rollDelta: Math.PI / 100 * Math.sin(chamberProgress * Math.PI * 2),\n        lanes: [{ offset: 0, width: 16 }]\n      });\n    }\n    \n    // SECTION 5: Crystal Climb\n    // Gentle ascent to surface\n    for (let i = 0; i < 40; i++) {\n      const climbProgress = i / 40;\n      \n      addSegment({\n        yawDelta: Math.sin(climbProgress * Math.PI * 2) * Math.PI / 150,\n        pitchDelta: Math.PI / 180, // Steady gentle climb\n        rollDelta: 0,\n        lanes: [{ offset: 0, width: 14 }],\n        isBoost: (i > 25 && i < 30) // Help with climb\n      });\n    }\n    \n    // SECTION 6: Crystal Field Finale\n    // Wide open finish area\n    for (let i = 0; i < 30; i++) {\n      const finaleProgress = i / 30;\n      \n      addSegment({\n        yawDelta: 0,\n        pitchDelta: 0,\n        rollDelta: 0,\n        lanes: [{ offset: 0, width: 15 + finaleProgress * 8 }],\n        isFinishLine: (i === 29)\n      });\n    }\n  }\n};"],"names":["Level37","addSegment","i","galleryTurns","turn","progress","poolPhase","rapidPhase","rapidFlow","chamberProgress","climbProgress","finaleProgress"],"mappings":"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"}