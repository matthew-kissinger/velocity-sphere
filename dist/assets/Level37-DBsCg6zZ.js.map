{"version":3,"file":"Level37-DBsCg6zZ.js","sources":["../../src/tracks/levels/Level37.js"],"sourcesContent":["/**\r\n * Level 37 - Crystal Cavern Zen\r\n * Peaceful crystal cave with soft glows and reflections\r\n * Wide paths through luminous formations\r\n */\r\n\r\nexport default {\r\n  name: \"Crystal Cavern Zen\",\r\n  description: \"Glide through serene crystal formations\",\r\n  difficulty: 5,\r\n  shader: \"crystal-surface\",\r\n  railShader: \"aurora-rails\", // Glowing rails for visibility on clear track\r\n  skybox: \"crystal-cavern\",\r\n  \r\n  generateTrack(addSegment) {\r\n    // Cave entrance\r\n    for (let i = 0; i < 25; i++) {\r\n      addSegment({\r\n        yawDelta: 0,\r\n        pitchDelta: 0,\r\n        rollDelta: 0,\r\n        isStartLine: (i === 0),\r\n        lanes: [{ offset: 0, width: 14 }]\r\n      });\r\n    }\r\n    \r\n    // Descend into crystal chamber\r\n    for (let i = 0; i < 20; i++) {\r\n      const descentProgress = i / 20;\r\n      \r\n      addSegment({\r\n        pitchDelta: -Math.PI / 90, // Gentle descent\r\n        yawDelta: Math.sin(descentProgress * Math.PI) * Math.PI / 150,\r\n        lanes: [{ offset: 0, width: 13 + Math.sin(descentProgress * Math.PI) * 2 }]\r\n      });\r\n    }\r\n    \r\n    // Main crystal chamber - wide spiral around formations\r\n    const chamberSegments = 70;\r\n    for (let i = 0; i < chamberSegments; i++) {\r\n      const chamberProgress = i / chamberSegments;\r\n      const spiralAngle = Math.PI * 2.5 * chamberProgress; // 1.25 rotations\r\n      \r\n      addSegment({\r\n        yawDelta: Math.PI * 2.5 / chamberSegments,\r\n        pitchDelta: Math.sin(spiralAngle * 2) * Math.PI / 250, // Gentle undulation\r\n        rollDelta: Math.sin(spiralAngle) * Math.PI / 80, // Soft banking\r\n        lanes: [{ offset: 0, width: 16 }],\r\n        isBoost: (i % 20 === 10)\r\n      });\r\n    }\r\n    \r\n    // Crystal gallery - multiple paths between formations\r\n    for (let i = 0; i < 55; i++) {\r\n      if (i < 10) {\r\n        // Split into crystal paths\r\n        const factor = i / 10;\r\n        addSegment({\r\n          lanes: [\r\n            { offset: -14 * factor, width: 11 },\r\n            { offset: 0, width: 12 },\r\n            { offset: 14 * factor, width: 11 }\r\n          ]\r\n        });\r\n      } else if (i < 45) {\r\n        // Weaving between crystal formations\r\n        const weaveProgress = (i - 10) / 35;\r\n        const crystalWeave = Math.sin(weaveProgress * Math.PI * 3) * Math.PI / 180;\r\n        \r\n        addSegment({\r\n          lanes: [\r\n            { offset: -14, width: 11 },\r\n            { offset: 0, width: 12 },\r\n            { offset: 14, width: 11 }\r\n          ],\r\n          yawDelta: crystalWeave,\r\n          pitchDelta: Math.cos(weaveProgress * Math.PI * 2) * Math.PI / 300,\r\n          isBoostPowerup: (i === 27) // Center path powerup\r\n        });\r\n      } else {\r\n        // Merge crystal paths\r\n        const factor = 1 - (i - 45) / 10;\r\n        addSegment({\r\n          lanes: [\r\n            { offset: -14 * factor, width: 11 },\r\n            { offset: 0, width: 12 },\r\n            { offset: 14 * factor, width: 11 }\r\n          ]\r\n        });\r\n      }\r\n    }\r\n    \r\n    // Reflection pool section - mirror-like track\r\n    for (let i = 0; i < 30; i++) {\r\n      const poolProgress = i / 30;\r\n      \r\n      addSegment({\r\n        yawDelta: 0,\r\n        pitchDelta: 0,\r\n        rollDelta: 0,\r\n        lanes: [{ offset: 0, width: 20 }], // Very wide for reflection effect\r\n        isBoost: (i >= 12 && i <= 17)\r\n      });\r\n    }\r\n    \r\n    // Crystal cathedral - large open chamber\r\n    const cathedralCurve = [\r\n      { angle: Math.PI / 3, segments: 25 },\r\n      { angle: -Math.PI / 2, segments: 30 },\r\n      { angle: Math.PI / 3, segments: 25 }\r\n    ];\r\n    \r\n    for (const section of cathedralCurve) {\r\n      for (let i = 0; i < section.segments; i++) {\r\n        const sectionProgress = i / section.segments;\r\n        \r\n        addSegment({\r\n          yawDelta: section.angle / section.segments,\r\n          pitchDelta: Math.sin(sectionProgress * Math.PI) * Math.PI / 200,\r\n          rollDelta: (section.angle > 0 ? 1 : -1) * Math.PI / 90 * Math.sin(sectionProgress * Math.PI),\r\n          lanes: [{ offset: 0, width: 18 }] // Wide cathedral space\r\n        });\r\n      }\r\n    }\r\n    \r\n    // Luminous tunnel - simplified gentle curves\r\n    for (let i = 0; i < 35; i++) {\r\n      const tunnelProgress = i / 35;\r\n      const tunnelCurve = Math.sin(tunnelProgress * Math.PI * 1.5) * Math.PI / 120; // Gentler curves\r\n      \r\n      addSegment({\r\n        yawDelta: tunnelCurve,\r\n        pitchDelta: 0,\r\n        rollDelta: tunnelCurve * 0.3, // Less banking\r\n        lanes: [{ offset: 0, width: 14 }] // Wider track\r\n      });\r\n    }\r\n    \r\n    // Ascent to surface - climbing back up\r\n    for (let i = 0; i < 25; i++) {\r\n      const ascentProgress = i / 25;\r\n      \r\n      addSegment({\r\n        pitchDelta: Math.PI / 100,\r\n        yawDelta: Math.sin(ascentProgress * Math.PI * 1.5) * Math.PI / 150,\r\n        lanes: [{ offset: 0, width: 13 }],\r\n        isBoost: (i >= 15 && i <= 20)\r\n      });\r\n    }\r\n    \r\n    // Crystal field finale - straightforward finish\r\n    for (let i = 0; i < 30; i++) {\r\n      const finaleProgress = i / 30;\r\n      \r\n      // Gentle weaving instead of twist\r\n      const gentleWeave = Math.sin(finaleProgress * Math.PI * 2) * Math.PI / 300;\r\n      \r\n      addSegment({\r\n        yawDelta: gentleWeave,\r\n        pitchDelta: 0,\r\n        rollDelta: 0,\r\n        lanes: [{ offset: 0, width: 15 + finaleProgress * 8 }], // Expanding to finish\r\n        isBoost: (i >= 20 && i <= 25),\r\n        isFinishLine: (i === 29)\r\n      });\r\n    }\r\n  }\r\n};"],"names":["Level37","addSegment","i","descentProgress","chamberSegments","chamberProgress","spiralAngle","factor","weaveProgress","crystalWeave","cathedralCurve","section","sectionProgress","tunnelProgress","tunnelCurve","ascentProgress","finaleProgress","gentleWeave"],"mappings":"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"}