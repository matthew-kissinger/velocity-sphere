{"version":3,"file":"Level38-DKZGuNW4.js","sources":["../../src/tracks/levels/Level38.js"],"sourcesContent":["/**\n * Level 38 - Sunset Coast\n * Coastal highway at golden hour with sweeping ocean views\n * Wide comfortable racing with scenic beauty\n */\n\nexport default {\n  name: \"Sunset Coast\",\n  description: \"Cruise the coastal highway as the sun sets\",\n  difficulty: 5,\n  shader: \"ocean-waves\",\n  skybox: \"sunset-vibes\",\n  \n  generateTrack(addSegment) {\n    // Coastal highway start\n    for (let i = 0; i < 30; i++) {\n      addSegment({\n        yawDelta: 0,\n        pitchDelta: 0,\n        rollDelta: 0,\n        isStartLine: (i === 0),\n        lanes: [{ offset: 0, width: 16 }] // Wide highway\n      });\n    }\n    \n    // First coastal sweep - following cliff edge\n    const coastalSweep1 = [\n      { angle: Math.PI / 3, segments: 35, description: \"around first headland\" },\n      { straight: 15 },\n      { angle: -Math.PI / 4, segments: 25, description: \"into bay\" },\n      { straight: 10 },\n      { angle: -Math.PI / 5, segments: 20, description: \"around point\" }\n    ];\n    \n    for (const section of coastalSweep1) {\n      if (section.straight) {\n        for (let i = 0; i < section.straight; i++) {\n          addSegment({\n            lanes: [{ offset: 0, width: 15 }],\n            // No boost needed\n          });\n        }\n      } else {\n        // Sweeping coastal curves with gentle banking\n        for (let i = 0; i < section.segments; i++) {\n          const progress = i / section.segments;\n          const banking = Math.sin(progress * Math.PI) * Math.PI / 50;\n          \n          addSegment({\n            yawDelta: section.angle / section.segments,\n            pitchDelta: Math.sin(progress * Math.PI * 2) * Math.PI / 300, // Gentle road undulation\n            rollDelta: (section.angle > 0 ? 1 : -1) * banking,\n            lanes: [{ offset: 0, width: 14 + Math.sin(progress * Math.PI) * 2 }]\n          });\n        }\n      }\n    }\n    \n    // Beach section - lower elevation near water\n    for (let i = 0; i < 15; i++) {\n      addSegment({\n        pitchDelta: -Math.PI / 200, // Gentle descent to beach\n        lanes: [{ offset: 0, width: 18 }]\n      });\n    }\n    \n    // Beach cruise - extra wide and flat\n    for (let i = 0; i < 40; i++) {\n      const beachProgress = i / 40;\n      const gentleWeave = Math.sin(beachProgress * Math.PI * 2) * Math.PI / 200;\n      \n      addSegment({\n        yawDelta: gentleWeave,\n        pitchDelta: 0,\n        lanes: [{ offset: 0, width: 20 }], // Very wide beach section\n        // No boost needed on beach\n      });\n    }\n    \n    // Climb back to cliffs\n    for (let i = 0; i < 15; i++) {\n      addSegment({\n        pitchDelta: Math.PI / 180, // Moderate climb\n        lanes: [{ offset: 0, width: 16 }]\n      });\n    }\n    \n    // Rocky outcrop section - split paths\n    for (let i = 0; i < 45; i++) {\n      if (i < 8) {\n        // Split around rocks\n        const factor = i / 8;\n        addSegment({\n          lanes: [\n            { offset: -12 * factor, width: 12 },\n            { offset: 12 * factor, width: 12 }\n          ]\n        });\n      } else if (i < 37) {\n        // Parallel paths with different views\n        const pathProgress = (i - 8) / 29;\n        const oceanPath = Math.sin(pathProgress * Math.PI * 2.5) * Math.PI / 150;\n        \n        addSegment({\n          lanes: [\n            { offset: -12, width: 12 }, // Inland path\n            { offset: 12, width: 12 }   // Ocean view path\n          ],\n          yawDelta: oceanPath\n        });\n      } else {\n        // Merge paths\n        const factor = 1 - (i - 37) / 8;\n        addSegment({\n          lanes: [\n            { offset: -12 * factor, width: 12 },\n            { offset: 12 * factor, width: 12 }\n          ]\n        });\n      }\n    }\n    \n    // Sunset ridge - elevated section with panoramic views\n    const ridgeSegments = 50;\n    for (let i = 0; i < ridgeSegments; i++) {\n      const ridgeProgress = i / ridgeSegments;\n      const ridgeCurve = Math.sin(ridgeProgress * Math.PI * 1.5) * Math.PI / 60;\n      \n      addSegment({\n        yawDelta: ridgeCurve,\n        pitchDelta: Math.sin(ridgeProgress * Math.PI * 3) * Math.PI / 250,\n        rollDelta: ridgeCurve * 0.6,\n        lanes: [{ offset: 0, width: 15 }],\n        // No boost needed - scenic ridge\n      });\n    }\n    \n    // Lighthouse approach - gentle curve\n    for (let i = 0; i < 15; i++) {\n      addSegment({\n        yawDelta: 0,\n        pitchDelta: 0,\n        rollDelta: 0,\n        lanes: [{ offset: 0, width: 15 }]\n      });\n    }\n    \n    // Lighthouse sweep - simplified without weird banking\n    for (let i = 0; i < 40; i++) {\n      const sweepProgress = i / 40;\n      \n      // Gentle S-curve instead of dramatic sweep\n      const yawDelta = Math.sin(sweepProgress * Math.PI) * Math.PI / 50;\n      \n      addSegment({\n        yawDelta: yawDelta,\n        pitchDelta: 0,\n        rollDelta: yawDelta * 0.5, // Mild banking that follows the curve\n        lanes: [{ offset: 0, width: 14 }]\n      });\n    }\n    \n    // Golden hour finale - straight to sunset\n    for (let i = 0; i < 35; i++) {\n      const finaleProgress = i / 35;\n      \n      addSegment({\n        yawDelta: 0,\n        pitchDelta: 0, // Completely flat finish\n        rollDelta: 0,\n        lanes: [{ offset: 0, width: 16 + finaleProgress * 8 }], // Widening to finish\n        isFinishLine: (i === 34)\n      });\n    }\n  }\n};"],"names":["Level38","addSegment","i","coastalSweep1","section","progress","banking","beachProgress","gentleWeave","factor","pathProgress","oceanPath","ridgeSegments","ridgeProgress","ridgeCurve","sweepProgress","yawDelta","finaleProgress"],"mappings":"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"}