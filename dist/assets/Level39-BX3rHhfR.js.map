{"version":3,"file":"Level39-BX3rHhfR.js","sources":["../../src/tracks/levels/Level39.js"],"sourcesContent":["/**\r\n * Level 39 - Floating Gardens\r\n * Terraced gardens in the sky with multiple levels\r\n * Gentle ramps between beautiful garden platforms\r\n */\r\n\r\nexport default {\r\n  name: \"Floating Gardens\",\r\n  description: \"Explore terraced gardens floating among the clouds\",\r\n  difficulty: 6,\r\n  shader: \"zen-garden\", // Changed to zen garden shader\r\n  skybox: \"sunset-vibes\",\r\n  \r\n  generateTrack(addSegment) {\r\n    // Garden entrance terrace\r\n    for (let i = 0; i < 25; i++) {\r\n      addSegment({\r\n        yawDelta: 0,\r\n        pitchDelta: 0,\r\n        rollDelta: 0,\r\n        isStartLine: (i === 0),\r\n        lanes: [{ offset: 0, width: 15 }]\r\n      });\r\n    }\r\n    \r\n    // First garden terrace - rose garden circular path\r\n    const roseGardenSegments = 45;\r\n    for (let i = 0; i < roseGardenSegments; i++) {\r\n      const gardenProgress = i / roseGardenSegments;\r\n      \r\n      addSegment({\r\n        yawDelta: (Math.PI * 1.5) / roseGardenSegments, // 270 degree arc\r\n        pitchDelta: 0,\r\n        rollDelta: Math.sin(gardenProgress * Math.PI) * Math.PI / 80,\r\n        lanes: [{ offset: 0, width: 14 }],\r\n        isBoost: (i === Math.floor(roseGardenSegments / 2))\r\n      });\r\n    }\r\n    \r\n    // Gentle ramp to second terrace\r\n    for (let i = 0; i < 18; i++) {\r\n      const rampProgress = i / 18;\r\n      \r\n      addSegment({\r\n        pitchDelta: Math.PI / 120, // Gentle climb\r\n        yawDelta: Math.sin(rampProgress * Math.PI) * Math.PI / 200, // Slight curve\r\n        lanes: [{ offset: 0, width: 12 + Math.sin(rampProgress * Math.PI) * 2 }]\r\n      });\r\n    }\r\n    \r\n    // Second terrace - water garden with split paths\r\n    for (let i = 0; i < 50; i++) {\r\n      if (i < 8) {\r\n        // Split around fountain\r\n        const factor = i / 8;\r\n        addSegment({\r\n          lanes: [\r\n            { offset: -11 * factor, width: 10 },\r\n            { offset: 11 * factor, width: 10 }\r\n          ]\r\n        });\r\n      } else if (i < 42) {\r\n        // Paths around water features\r\n        const waterProgress = (i - 8) / 34;\r\n        const flowPattern = Math.sin(waterProgress * Math.PI * 2) * Math.PI / 180;\r\n        \r\n        addSegment({\r\n          lanes: [\r\n            { offset: -11, width: 10 },\r\n            { offset: 11, width: 10 }\r\n          ],\r\n          yawDelta: flowPattern,\r\n          pitchDelta: Math.sin(waterProgress * Math.PI * 3) * Math.PI / 400,\r\n          isBoostPowerup: (i === 25) // Fountain center powerup\r\n        });\r\n      } else {\r\n        // Merge paths\r\n        const factor = 1 - (i - 42) / 8;\r\n        addSegment({\r\n          lanes: [\r\n            { offset: -11 * factor, width: 10 },\r\n            { offset: 11 * factor, width: 10 }\r\n          ]\r\n        });\r\n      }\r\n    }\r\n    \r\n    // Spiral ramp to third terrace - herb garden\r\n    const spiralRampSegments = 35;\r\n    for (let i = 0; i < spiralRampSegments; i++) {\r\n      const spiralProgress = i / spiralRampSegments;\r\n      \r\n      addSegment({\r\n        yawDelta: Math.PI / spiralRampSegments, // Half rotation while climbing\r\n        pitchDelta: Math.PI / 100,\r\n        rollDelta: Math.PI / 60, // Gentle banking\r\n        lanes: [{ offset: 0, width: 13 }]\r\n      });\r\n    }\r\n    \r\n    // Third terrace - herb garden maze (simplified)\r\n    const mazePattern = [\r\n      { turn: Math.PI / 3, length: 12 },\r\n      { turn: -Math.PI / 2, length: 15 },\r\n      { turn: Math.PI / 2, length: 10 },\r\n      { turn: -Math.PI / 3, length: 12 },\r\n      { turn: Math.PI / 4, length: 8 }\r\n    ];\r\n    \r\n    for (const section of mazePattern) {\r\n      // Approach turn\r\n      for (let i = 0; i < 3; i++) {\r\n        addSegment({\r\n          rollDelta: (section.turn > 0 ? 1 : -1) * Math.PI / 90,\r\n          lanes: [{ offset: 0, width: 11 }]\r\n        });\r\n      }\r\n      \r\n      // Execute turn\r\n      for (let i = 0; i < section.length; i++) {\r\n        addSegment({\r\n          yawDelta: section.turn / section.length,\r\n          lanes: [{ offset: 0, width: 11 }]\r\n        });\r\n      }\r\n      \r\n      // Exit turn\r\n      for (let i = 0; i < 3; i++) {\r\n        addSegment({\r\n          rollDelta: (section.turn > 0 ? -1 : 1) * Math.PI / 90,\r\n          lanes: [{ offset: 0, width: 11 }]\r\n        });\r\n      }\r\n      \r\n      // Short straight\r\n      for (let i = 0; i < 5; i++) {\r\n        addSegment({\r\n          lanes: [{ offset: 0, width: 12 }],\r\n          isBoost: (i === 2)\r\n        });\r\n      }\r\n    }\r\n    \r\n    // Bridge to central fountain plaza\r\n    for (let i = 0; i < 20; i++) {\r\n      const bridgeProgress = i / 20;\r\n      const bridgeArch = Math.sin(bridgeProgress * Math.PI) * Math.PI / 150;\r\n      \r\n      addSegment({\r\n        pitchDelta: i < 10 ? bridgeArch : -bridgeArch,\r\n        lanes: [{ offset: 0, width: 14 }]\r\n      });\r\n    }\r\n    \r\n    // Central fountain plaza - large circular area\r\n    for (let i = 0; i < 30; i++) {\r\n      addSegment({\r\n        yawDelta: Math.PI * 2 / 30, // Full circle\r\n        lanes: [{ offset: 0, width: 20 }], // Very wide plaza\r\n        isBoost: (i >= 10 && i <= 15)\r\n      });\r\n    }\r\n    \r\n    // Final descent through flower cascades\r\n    for (let i = 0; i < 40; i++) {\r\n      const descentProgress = i / 40;\r\n      const cascadeCurve = Math.sin(descentProgress * Math.PI * 2.5) * Math.PI / 80;\r\n      \r\n      addSegment({\r\n        yawDelta: cascadeCurve,\r\n        pitchDelta: -Math.PI / 120, // Gentle continuous descent\r\n        rollDelta: cascadeCurve * 0.5,\r\n        lanes: [{ offset: 0, width: 13 + descentProgress * 7 }], // Widening\r\n        isBoost: (i >= 30 && i <= 35),\r\n        isFinishLine: (i === 39)\r\n      });\r\n    }\r\n  }\r\n};"],"names":["Level39","addSegment","i","roseGardenSegments","gardenProgress","rampProgress","factor","waterProgress","flowPattern","spiralRampSegments","mazePattern","section","bridgeProgress","bridgeArch","descentProgress","cascadeCurve"],"mappings":"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"}