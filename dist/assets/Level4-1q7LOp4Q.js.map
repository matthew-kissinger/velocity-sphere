{"version":3,"file":"Level4-1q7LOp4Q.js","sources":["../../src/tracks/levels/Level4.js"],"sourcesContent":["/**\n * Level 4 - Matrix\n * Digital realm with precise technical sections\n */\n\nexport default {\n  name: \"Matrix\",\n  description: \"Navigate through digital constructs with technical precision\", \n  difficulty: 4,\n  shader: \"matrix-rain\", // Digital theme for technical track\n  skybox: \"space-deep\", // Dark space for intense focus\n  \n  generateTrack(addSegment, addLoop) {\n    // Level 4: Desert Canyon - More challenging than Level 3\n    // --- Section 1: Starting straight ---\n    const startCount = 25;\n    for (let i = 0; i < startCount; i++) {\n      addSegment({\n        yawDelta: 0,\n        pitchDelta: 0,\n        rollDelta: 0,\n        isStartLine: (i === 0)\n      });\n    }\n    \n    // --- Section 2: Narrow Canyon Entry ---\n    // Simulate narrow canyon with tighter track width through sharper turns\n    const canyonEntry = [\n      { angle: Math.PI / 4, segments: 10, bank: Math.PI / 16 },   // 45° right\n      { angle: -Math.PI / 3, segments: 12, bank: -Math.PI / 16 }, // 60° left\n      { angle: Math.PI / 5, segments: 8, bank: Math.PI / 16 }     // 36° right\n    ];\n    \n    for (const turn of canyonEntry) {\n      const yawPerSegment = turn.angle / turn.segments;\n      const bankPerSegment = turn.bank / turn.segments;\n      \n      // Banking entry\n      for (let i = 0; i < 2; i++) {\n        addSegment({ \n          yawDelta: 0,\n          pitchDelta: 0,\n          rollDelta: bankPerSegment\n        });\n      }\n      \n      // Sharp turn with banking\n      for (let i = 0; i < turn.segments; i++) {\n        addSegment({ \n          yawDelta: yawPerSegment,\n          pitchDelta: 0,\n          rollDelta: 0\n        });\n      }\n      \n      // Banking exit\n      for (let i = 0; i < 2; i++) {\n        addSegment({ \n          yawDelta: 0,\n          pitchDelta: 0,\n          rollDelta: -bankPerSegment\n        });\n      }\n      \n      // Very short recovery\n      for (let i = 0; i < 3; i++) {\n        addSegment({ yawDelta: 0, pitchDelta: 0, rollDelta: 0 });\n      }\n    }\n    \n    // --- Section 3: Banked S-Curves ---\n    const sCurves = [\n      { angle: Math.PI / 2.5, segments: 15, bank: Math.PI / 8 },   // 72° right with steeper banking\n      { angle: -Math.PI / 2.2, segments: 16, bank: -Math.PI / 8 }, // 82° left with steeper banking\n      { angle: Math.PI / 3, segments: 12, bank: Math.PI / 10 }     // 60° right\n    ];\n    \n    for (const curve of sCurves) {\n      const yawPerSegment = curve.angle / curve.segments;\n      const bankPerSegment = curve.bank / curve.segments;\n      \n      // Progressive banking entry\n      for (let i = 0; i < 4; i++) {\n        addSegment({ \n          yawDelta: 0,\n          pitchDelta: 0,\n          rollDelta: bankPerSegment\n        });\n      }\n      \n      // Banked curve\n      for (let i = 0; i < curve.segments; i++) {\n        addSegment({ \n          yawDelta: yawPerSegment,\n          pitchDelta: 0,\n          rollDelta: 0\n        });\n      }\n      \n      // Progressive banking exit\n      for (let i = 0; i < 4; i++) {\n        addSegment({ \n          yawDelta: 0,\n          pitchDelta: 0,\n          rollDelta: -bankPerSegment\n        });\n      }\n      \n      // Minimal straight between curves\n      for (let i = 0; i < 2; i++) {\n        addSegment({ yawDelta: 0, pitchDelta: 0, rollDelta: 0 });\n      }\n    }\n    \n    // --- Section 4: Moderate Jumps with Shorter Gaps ---\n    const jumpSequence = [\n      { ramp: 7, gap: 2, land: 7 },    // Shorter gap, quicker timing\n      { straight: 5 },\n      { ramp: 8, gap: 3, land: 8 },\n      { straight: 4 },\n      { ramp: 6, gap: 2, land: 6 }     // Final quick jump\n    ];\n    \n    for (const section of jumpSequence) {\n      if (section.ramp) {\n        // Steeper ramp angle for more challenging jumps\n        const jumpAngle = Math.PI / 5.5; // ~33 degrees\n        \n        // Ramp up\n        for (let i = 0; i < section.ramp; i++) {\n          addSegment({ pitchDelta: jumpAngle / section.ramp });\n        }\n        // Gap\n        for (let i = 0; i < section.gap; i++) {\n          addSegment({ isGap: true });\n        }\n        // Landing\n        for (let i = 0; i < section.land; i++) {\n          addSegment({ pitchDelta: -jumpAngle / section.land });\n        }\n      } else if (section.straight) {\n        for (let i = 0; i < section.straight; i++) {\n          addSegment({ yawDelta: 0, pitchDelta: 0, rollDelta: 0 });\n        }\n      }\n    }\n    \n    // --- Section 5: Technical Chicane ---\n    // More complex chicane than Level 3\n    const technicalChicane = [\n      { yaw: Math.PI / 5, segments: 5 },    // 36° right (quick)\n      { yaw: -Math.PI / 2.5, segments: 9 }, // 72° left (sharp)\n      { yaw: Math.PI / 2.2, segments: 10 }, // 82° right (sharper)\n      { yaw: -Math.PI / 4, segments: 7 },   // 45° left\n      { yaw: Math.PI / 6, segments: 5 }     // 30° right to straighten\n    ];\n    \n    for (const turn of technicalChicane) {\n      const yawPerSegment = turn.yaw / turn.segments;\n      \n      for (let i = 0; i < turn.segments; i++) {\n        addSegment({ \n          yawDelta: yawPerSegment,\n          pitchDelta: 0,\n          rollDelta: 0\n        });\n      }\n      \n      // Very short pause between turns (makes it more technical)\n      addSegment({ yawDelta: 0, pitchDelta: 0, rollDelta: 0 });\n    }\n    \n    // --- Section 6: Challenging Split Path ---\n    // One side has more obstacles than the other\n    const splitLength = 30;\n    \n    for (let i = 0; i < splitLength; i++) {\n      let lanes;\n      \n      if (i < 6) {\n        // Gradual split\n        const splitFactor = i / 6;\n        lanes = [\n          { offset: -8.0 * splitFactor, width: 4.5 },  // Slightly narrower lanes\n          { offset: 8.0 * splitFactor, width: 4.5 }\n        ];\n      } else if (i < 24) {\n        // Full split with obstacles on left path\n        if (i >= 10 && i <= 12) {\n          // Left path has small jumps\n          lanes = [\n            { offset: -8.0, width: 4.5, obstacles: [{ type: 'jump', size: 'small' }] },\n            { offset: 8.0, width: 4.5 }  // Right path clear\n          ];\n        } else if (i >= 16 && i <= 18) {\n          // Left path has sharp turns\n          lanes = [\n            { offset: -8.0, width: 4.5, obstacles: [{ type: 'chicane' }] },\n            { offset: 8.0, width: 4.5 }  // Right path clear\n          ];\n        } else {\n          lanes = [\n            { offset: -8.0, width: 4.5 },\n            { offset: 8.0, width: 4.5 }\n          ];\n        }\n      } else {\n        // Merge back together\n        const mergeFactor = 1 - (i - 24) / 6;\n        lanes = [\n          { offset: -8.0 * mergeFactor, width: 4.5 },\n          { offset: 8.0 * mergeFactor, width: 4.5 }\n        ];\n      }\n      \n      addSegment({ lanes });\n    }\n    \n    // --- Section 7: Canyon Wall Simulator ---\n    // Tight winding section to simulate canyon walls\n    const canyonWalls = [\n      { angle: Math.PI / 3, segments: 8 },    // 60° right\n      { angle: -Math.PI / 4, segments: 6 },   // 45° left  \n      { angle: Math.PI / 5, segments: 7 },    // 36° right\n      { angle: -Math.PI / 3, segments: 9 },   // 60° left\n      { angle: Math.PI / 4, segments: 6 }     // 45° right\n    ];\n    \n    for (const section of canyonWalls) {\n      const yawPerSegment = section.angle / section.segments;\n      \n      for (let i = 0; i < section.segments; i++) {\n        addSegment({ \n          yawDelta: yawPerSegment,\n          pitchDelta: 0,\n          rollDelta: 0\n        });\n      }\n      \n      // Minimal recovery between turns\n      addSegment({ yawDelta: 0, pitchDelta: 0, rollDelta: 0 });\n    }\n    \n    // --- Section 8: Final Challenge Sequence ---\n    // Combination of banking and elevation changes\n    const finalChallenge = 20;\n    const elevationChange = Math.PI / 15; // Gentle elevation change\n    const bankingAngle = Math.PI / 12;    // Moderate banking\n    \n    for (let i = 0; i < finalChallenge; i++) {\n      let yawDelta = 0;\n      let pitchDelta = 0;\n      let rollDelta = 0;\n      \n      // Sinusoidal banking and gentle elevation\n      if (i < finalChallenge / 2) {\n        pitchDelta = elevationChange / (finalChallenge / 2);  // Gentle climb\n        rollDelta = Math.sin((i / finalChallenge) * Math.PI * 2) * bankingAngle / 5; // Gentle banking waves\n      } else {\n        pitchDelta = -elevationChange / (finalChallenge / 2); // Gentle descent\n        rollDelta = Math.sin((i / finalChallenge) * Math.PI * 2) * bankingAngle / 5;\n      }\n      \n      addSegment({ yawDelta, pitchDelta, rollDelta });\n    }\n    \n    // --- Section 9: Final Sprint to Finish ---\n    const finalSprint = 15;\n    for (let i = 0; i < finalSprint; i++) {\n      addSegment({ \n        yawDelta: 0,\n        pitchDelta: 0,\n        rollDelta: 0,\n        isFinishLine: (i === finalSprint - 1) \n      });\n    }\n  }\n};"],"names":["Level4","addSegment","addLoop","i","canyonEntry","turn","yawPerSegment","bankPerSegment","sCurves","curve","jumpSequence","section","jumpAngle","technicalChicane","splitLength","lanes","splitFactor","mergeFactor","canyonWalls","finalChallenge","elevationChange","bankingAngle","yawDelta","pitchDelta","rollDelta","finalSprint"],"mappings":"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"}