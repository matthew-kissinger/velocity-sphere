{"version":3,"file":"Level40-BbXZPfvu.js","sources":["../../src/tracks/levels/Level40.js"],"sourcesContent":["/**\n * Level 40 - Harmony Circuit\n * The ultimate zen racing experience combining all circuit elements\n * Perfect flow with multiple equally viable paths\n */\n\nexport default {\n  name: \"Harmony Circuit\",\n  description: \"Find perfect balance in the ultimate tranquil race\",\n  difficulty: 5,\n  shader: \"rainbow-flow\",\n  skybox: \"aurora-dance\",\n  \n  generateTrack(addSegment) {\n    // Grand entrance - wide ceremonial start\n    for (let i = 0; i < 30; i++) {\n      addSegment({\n        yawDelta: 0,\n        pitchDelta: 0,\n        rollDelta: 0,\n        isStartLine: (i === 0),\n        lanes: [{ offset: 0, width: 20 }] // Extra wide start\n      });\n    }\n    \n    // The Flow Section - perfect racing rhythm\n    const flowCurves = [\n      { angle: Math.PI / 3, segments: 30, bank: Math.PI / 40 },\n      { angle: -Math.PI / 2, segments: 35, bank: -Math.PI / 40 },\n      { angle: Math.PI / 2.5, segments: 28, bank: Math.PI / 45 },\n      { angle: -Math.PI / 3, segments: 25, bank: -Math.PI / 45 }\n    ];\n    \n    for (const curve of flowCurves) {\n      // Smooth banking entry\n      for (let i = 0; i < 5; i++) {\n        addSegment({\n          rollDelta: curve.bank / 5,\n          lanes: [{ offset: 0, width: 16 }]\n        });\n      }\n      \n      // Perfect curve execution\n      for (let i = 0; i < curve.segments; i++) {\n        const progress = i / curve.segments;\n        const widthFlow = 15 + Math.sin(progress * Math.PI) * 3;\n        \n        addSegment({\n          yawDelta: curve.angle / curve.segments,\n          pitchDelta: Math.sin(progress * Math.PI * 2) * Math.PI / 300,\n          lanes: [{ offset: 0, width: widthFlow }],\n          // No boost needed - perfect flow\n        });\n      }\n      \n      // Smooth banking exit\n      for (let i = 0; i < 5; i++) {\n        addSegment({\n          rollDelta: -curve.bank / 5,\n          lanes: [{ offset: 0, width: 16 }]\n        });\n      }\n      \n      // Flow connector\n      for (let i = 0; i < 10; i++) {\n        addSegment({\n          lanes: [{ offset: 0, width: 15 }]\n        });\n      }\n    }\n    \n    // The Choice Garden - four equal paths\n    for (let i = 0; i < 70; i++) {\n      if (i < 10) {\n        // Graceful four-way split\n        const factor = i / 10;\n        addSegment({\n          lanes: [\n            { offset: -18 * factor, width: 10 },\n            { offset: -6 * factor, width: 10 },\n            { offset: 6 * factor, width: 10 },\n            { offset: 18 * factor, width: 10 }\n          ]\n        });\n      } else if (i < 60) {\n        // Four harmonious paths\n        const pathProgress = (i - 10) / 50;\n        const wave = Math.sin(pathProgress * Math.PI * 2);\n        \n        addSegment({\n          lanes: [\n            { offset: -18, width: 10 }, // Outer left - fixed offset\n            { offset: -6, width: 10 },   // Inner left - fixed offset\n            { offset: 6, width: 10 },    // Inner right - fixed offset\n            { offset: 18, width: 10 }    // Outer right - fixed offset\n          ],\n          yawDelta: Math.sin(pathProgress * Math.PI * 3) * Math.PI / 200,\n          pitchDelta: Math.cos(pathProgress * Math.PI * 2) * Math.PI / 400,\n          // No powerup needed\n        });\n      } else {\n        // Graceful merge\n        const factor = 1 - (i - 60) / 10;\n        addSegment({\n          lanes: [\n            { offset: -18 * factor, width: 10 },\n            { offset: -6 * factor, width: 10 },\n            { offset: 6 * factor, width: 10 },\n            { offset: 18 * factor, width: 10 }\n          ]\n        });\n      }\n    }\n    \n    // The Meditation Spiral - simplified for performance\n    const helixSegments = 40; // Reduced from 60\n    for (let i = 0; i < helixSegments; i++) {\n      const helixProgress = i / helixSegments;\n      \n      // Simplified single path spiral\n      addSegment({\n        yawDelta: Math.PI * 2 / helixSegments, // 1 rotation instead of 1.5\n        pitchDelta: Math.PI / 150, // Gentle climb\n        rollDelta: Math.sin(helixProgress * Math.PI * 2) * Math.PI / 60,\n        lanes: [{ offset: 0, width: 14 }]\n      });\n    }\n    \n    // The Harmony Platform - central gathering\n    for (let i = 0; i < 25; i++) {\n      addSegment({\n        lanes: [{ offset: 0, width: 30 }], // Massive platform\n        // No boost needed - harmony platform\n      });\n    }\n    \n    // The Balance Descent - perfect flow down\n    const descentFlow = [\n      { curve: Math.PI / 4, length: 25 },\n      { straight: 15 },\n      { curve: -Math.PI / 3, length: 30 },\n      { straight: 10 },\n      { curve: Math.PI / 5, length: 20 }\n    ];\n    \n    for (const section of descentFlow) {\n      if (section.straight) {\n        for (let i = 0; i < section.straight; i++) {\n          addSegment({\n            pitchDelta: -Math.PI / 200,\n            lanes: [{ offset: 0, width: 16 }],\n            // No boost needed\n          });\n        }\n      } else {\n        for (let i = 0; i < section.length; i++) {\n          const progress = i / section.length;\n          \n          addSegment({\n            yawDelta: section.curve / section.length,\n            pitchDelta: -Math.PI / 180,\n            rollDelta: (section.curve > 0 ? 1 : -1) * Math.PI / 70 * Math.sin(progress * Math.PI),\n            lanes: [{ offset: 0, width: 15 + Math.sin(progress * Math.PI) * 2 }]\n          });\n        }\n      }\n    }\n    \n    // The Unity Finale - simplified for performance\n    for (let i = 0; i < 30; i++) { // Reduced from 40\n      const finaleProgress = i / 30;\n      \n      // Simplified expanding width\n      const finalWidth = 18 + finaleProgress * 12;\n      \n      addSegment({\n        yawDelta: 0, // Straight finish\n        pitchDelta: 0,\n        lanes: [{ offset: 0, width: finalWidth }],\n        isFinishLine: (i === 29)\n      });\n    }\n  }\n};"],"names":["Level40","addSegment","i","flowCurves","curve","progress","widthFlow","factor","pathProgress","helixSegments","helixProgress","descentFlow","section","finalWidth"],"mappings":"AAMA,MAAAA,EAAe,CACb,KAAM,kBACN,YAAa,qDACb,WAAY,EACZ,OAAQ,eACR,OAAQ,eAER,cAAcC,EAAY,CAExB,QAASC,EAAI,EAAGA,EAAI,GAAIA,IACtBD,EAAW,CACT,SAAU,EACV,WAAY,EACZ,UAAW,EACX,YAAcC,IAAM,EACpB,MAAO,CAAC,CAAE,OAAQ,EAAG,MAAO,EAAE,CAAE,CACxC,CAAO,EAIH,MAAMC,EAAa,CACjB,CAAE,MAAO,KAAK,GAAK,EAAG,SAAU,GAAI,KAAM,KAAK,GAAK,EAAE,EACtD,CAAE,MAAO,CAAC,KAAK,GAAK,EAAG,SAAU,GAAI,KAAM,CAAC,KAAK,GAAK,EAAE,EACxD,CAAE,MAAO,KAAK,GAAK,IAAK,SAAU,GAAI,KAAM,KAAK,GAAK,EAAE,EACxD,CAAE,MAAO,CAAC,KAAK,GAAK,EAAG,SAAU,GAAI,KAAM,CAAC,KAAK,GAAK,EAAE,CAC9D,EAEI,UAAWC,KAASD,EAAY,CAE9B,QAASD,EAAI,EAAGA,EAAI,EAAGA,IACrBD,EAAW,CACT,UAAWG,EAAM,KAAO,EACxB,MAAO,CAAC,CAAE,OAAQ,EAAG,MAAO,EAAE,CAAE,CAC1C,CAAS,EAIH,QAASF,EAAI,EAAGA,EAAIE,EAAM,SAAUF,IAAK,CACvC,MAAMG,EAAWH,EAAIE,EAAM,SACrBE,EAAY,GAAK,KAAK,IAAID,EAAW,KAAK,EAAE,EAAI,EAEtDJ,EAAW,CACT,SAAUG,EAAM,MAAQA,EAAM,SAC9B,WAAY,KAAK,IAAIC,EAAW,KAAK,GAAK,CAAC,EAAI,KAAK,GAAK,IACzD,MAAO,CAAC,CAAE,OAAQ,EAAG,MAAOC,CAAS,CAAE,CAEjD,CAAS,CACH,CAGA,QAASJ,EAAI,EAAGA,EAAI,EAAGA,IACrBD,EAAW,CACT,UAAW,CAACG,EAAM,KAAO,EACzB,MAAO,CAAC,CAAE,OAAQ,EAAG,MAAO,EAAE,CAAE,CAC1C,CAAS,EAIH,QAASF,EAAI,EAAGA,EAAI,GAAIA,IACtBD,EAAW,CACT,MAAO,CAAC,CAAE,OAAQ,EAAG,MAAO,EAAE,CAAE,CAC1C,CAAS,CAEL,CAGA,QAASC,EAAI,EAAGA,EAAI,GAAIA,IACtB,GAAIA,EAAI,GAAI,CAEV,MAAMK,EAASL,EAAI,GACnBD,EAAW,CACT,MAAO,CACL,CAAE,OAAQ,IAAMM,EAAQ,MAAO,EAAE,EACjC,CAAE,OAAQ,GAAKA,EAAQ,MAAO,EAAE,EAChC,CAAE,OAAQ,EAAIA,EAAQ,MAAO,EAAE,EAC/B,CAAE,OAAQ,GAAKA,EAAQ,MAAO,EAAE,CAC5C,CACA,CAAS,CACH,SAAWL,EAAI,GAAI,CAEjB,MAAMM,GAAgBN,EAAI,IAAM,GAGhCD,EAAW,CACT,MAAO,CACL,CAAE,OAAQ,IAAK,MAAO,EAAE,EACxB,CAAE,OAAQ,GAAI,MAAO,EAAE,EACvB,CAAE,OAAQ,EAAG,MAAO,EAAE,EACtB,CAAE,OAAQ,GAAI,MAAO,EAAE,CACnC,EACU,SAAU,KAAK,IAAIO,EAAe,KAAK,GAAK,CAAC,EAAI,KAAK,GAAK,IAC3D,WAAY,KAAK,IAAIA,EAAe,KAAK,GAAK,CAAC,EAAI,KAAK,GAAK,GAEvE,CAAS,CACH,KAAO,CAEL,MAAMD,EAAS,GAAKL,EAAI,IAAM,GAC9BD,EAAW,CACT,MAAO,CACL,CAAE,OAAQ,IAAMM,EAAQ,MAAO,EAAE,EACjC,CAAE,OAAQ,GAAKA,EAAQ,MAAO,EAAE,EAChC,CAAE,OAAQ,EAAIA,EAAQ,MAAO,EAAE,EAC/B,CAAE,OAAQ,GAAKA,EAAQ,MAAO,EAAE,CAC5C,CACA,CAAS,CACH,CAIF,MAAME,EAAgB,GACtB,QAASP,EAAI,EAAGA,EAAIO,EAAeP,IAAK,CACtC,MAAMQ,EAAgBR,EAAIO,EAG1BR,EAAW,CACT,SAAU,KAAK,GAAK,EAAIQ,EACxB,WAAY,KAAK,GAAK,IACtB,UAAW,KAAK,IAAIC,EAAgB,KAAK,GAAK,CAAC,EAAI,KAAK,GAAK,GAC7D,MAAO,CAAC,CAAE,OAAQ,EAAG,MAAO,EAAE,CAAE,CACxC,CAAO,CACH,CAGA,QAASR,EAAI,EAAGA,EAAI,GAAIA,IACtBD,EAAW,CACT,MAAO,CAAC,CAAE,OAAQ,EAAG,MAAO,EAAE,CAAE,CAExC,CAAO,EAIH,MAAMU,EAAc,CAClB,CAAE,MAAO,KAAK,GAAK,EAAG,OAAQ,EAAE,EAChC,CAAE,SAAU,EAAE,EACd,CAAE,MAAO,CAAC,KAAK,GAAK,EAAG,OAAQ,EAAE,EACjC,CAAE,SAAU,EAAE,EACd,CAAE,MAAO,KAAK,GAAK,EAAG,OAAQ,EAAE,CACtC,EAEI,UAAWC,KAAWD,EACpB,GAAIC,EAAQ,SACV,QAASV,EAAI,EAAGA,EAAIU,EAAQ,SAAUV,IACpCD,EAAW,CACT,WAAY,CAAC,KAAK,GAAK,IACvB,MAAO,CAAC,CAAE,OAAQ,EAAG,MAAO,EAAE,CAAE,CAE5C,CAAW,MAGH,SAASC,EAAI,EAAGA,EAAIU,EAAQ,OAAQV,IAAK,CACvC,MAAMG,EAAWH,EAAIU,EAAQ,OAE7BX,EAAW,CACT,SAAUW,EAAQ,MAAQA,EAAQ,OAClC,WAAY,CAAC,KAAK,GAAK,IACvB,WAAYA,EAAQ,MAAQ,EAAI,EAAI,IAAM,KAAK,GAAK,GAAK,KAAK,IAAIP,EAAW,KAAK,EAAE,EACpF,MAAO,CAAC,CAAE,OAAQ,EAAG,MAAO,GAAK,KAAK,IAAIA,EAAW,KAAK,EAAE,EAAI,CAAC,CAAE,CAC/E,CAAW,CACH,CAKJ,QAASH,EAAI,EAAGA,EAAI,GAAIA,IAAK,CAI3B,MAAMW,EAAa,GAHIX,EAAI,GAGc,GAEzCD,EAAW,CACT,SAAU,EACV,WAAY,EACZ,MAAO,CAAC,CAAE,OAAQ,EAAG,MAAOY,CAAU,CAAE,EACxC,aAAeX,IAAM,EAC7B,CAAO,CACH,CACF,CACF"}