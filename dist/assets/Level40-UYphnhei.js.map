{"version":3,"file":"Level40-UYphnhei.js","sources":["../../src/tracks/levels/Level40.js"],"sourcesContent":["/**\r\n * Level 40 - Harmony Circuit\r\n * The ultimate zen racing experience combining all circuit elements\r\n * Perfect flow with multiple equally viable paths\r\n */\r\n\r\nexport default {\r\n  name: \"Harmony Circuit\",\r\n  description: \"Find perfect balance in the ultimate tranquil race\",\r\n  difficulty: 6,\r\n  shader: \"rainbow-flow\",\r\n  skybox: \"aurora-dance\",\r\n  \r\n  generateTrack(addSegment) {\r\n    // Grand entrance - wide ceremonial start\r\n    for (let i = 0; i < 30; i++) {\r\n      addSegment({\r\n        yawDelta: 0,\r\n        pitchDelta: 0,\r\n        rollDelta: 0,\r\n        isStartLine: (i === 0),\r\n        lanes: [{ offset: 0, width: 20 }] // Extra wide start\r\n      });\r\n    }\r\n    \r\n    // The Flow Section - perfect racing rhythm\r\n    const flowCurves = [\r\n      { angle: Math.PI / 3, segments: 30, bank: Math.PI / 40 },\r\n      { angle: -Math.PI / 2, segments: 35, bank: -Math.PI / 40 },\r\n      { angle: Math.PI / 2.5, segments: 28, bank: Math.PI / 45 },\r\n      { angle: -Math.PI / 3, segments: 25, bank: -Math.PI / 45 }\r\n    ];\r\n    \r\n    for (const curve of flowCurves) {\r\n      // Smooth banking entry\r\n      for (let i = 0; i < 5; i++) {\r\n        addSegment({\r\n          rollDelta: curve.bank / 5,\r\n          lanes: [{ offset: 0, width: 16 }]\r\n        });\r\n      }\r\n      \r\n      // Perfect curve execution\r\n      for (let i = 0; i < curve.segments; i++) {\r\n        const progress = i / curve.segments;\r\n        const widthFlow = 15 + Math.sin(progress * Math.PI) * 3;\r\n        \r\n        addSegment({\r\n          yawDelta: curve.angle / curve.segments,\r\n          pitchDelta: Math.sin(progress * Math.PI * 2) * Math.PI / 300,\r\n          lanes: [{ offset: 0, width: widthFlow }],\r\n          isBoost: (i === Math.floor(curve.segments / 2))\r\n        });\r\n      }\r\n      \r\n      // Smooth banking exit\r\n      for (let i = 0; i < 5; i++) {\r\n        addSegment({\r\n          rollDelta: -curve.bank / 5,\r\n          lanes: [{ offset: 0, width: 16 }]\r\n        });\r\n      }\r\n      \r\n      // Flow connector\r\n      for (let i = 0; i < 10; i++) {\r\n        addSegment({\r\n          lanes: [{ offset: 0, width: 15 }]\r\n        });\r\n      }\r\n    }\r\n    \r\n    // The Choice Garden - four equal paths\r\n    for (let i = 0; i < 70; i++) {\r\n      if (i < 10) {\r\n        // Graceful four-way split\r\n        const factor = i / 10;\r\n        addSegment({\r\n          lanes: [\r\n            { offset: -18 * factor, width: 10 },\r\n            { offset: -6 * factor, width: 10 },\r\n            { offset: 6 * factor, width: 10 },\r\n            { offset: 18 * factor, width: 10 }\r\n          ]\r\n        });\r\n      } else if (i < 60) {\r\n        // Four harmonious paths\r\n        const pathProgress = (i - 10) / 50;\r\n        const wave = Math.sin(pathProgress * Math.PI * 2);\r\n        \r\n        addSegment({\r\n          lanes: [\r\n            { offset: -18 + wave * 2, width: 10 }, // Outer left\r\n            { offset: -6 + wave, width: 10 },      // Inner left\r\n            { offset: 6 - wave, width: 10 },       // Inner right\r\n            { offset: 18 - wave * 2, width: 10 }   // Outer right\r\n          ],\r\n          yawDelta: Math.sin(pathProgress * Math.PI * 3) * Math.PI / 200,\r\n          pitchDelta: Math.cos(pathProgress * Math.PI * 2) * Math.PI / 400,\r\n          isBoostPowerup: (i === 35) // Center paths converge here\r\n        });\r\n      } else {\r\n        // Graceful merge\r\n        const factor = 1 - (i - 60) / 10;\r\n        addSegment({\r\n          lanes: [\r\n            { offset: -18 * factor, width: 10 },\r\n            { offset: -6 * factor, width: 10 },\r\n            { offset: 6 * factor, width: 10 },\r\n            { offset: 18 * factor, width: 10 }\r\n          ]\r\n        });\r\n      }\r\n    }\r\n    \r\n    // The Meditation Spiral - ascending double helix\r\n    const helixSegments = 60;\r\n    for (let i = 0; i < helixSegments; i++) {\r\n      const helixProgress = i / helixSegments;\r\n      const helixAngle = Math.PI * 3 * helixProgress; // 1.5 rotations\r\n      \r\n      // Create double helix with elevation\r\n      if (i % 2 === 0) {\r\n        // Main path\r\n        addSegment({\r\n          yawDelta: Math.PI * 3 / helixSegments,\r\n          pitchDelta: Math.PI / 150, // Gentle climb\r\n          rollDelta: Math.sin(helixAngle) * Math.PI / 60,\r\n          lanes: [{ offset: 0, width: 14 }]\r\n        });\r\n      } else {\r\n        // Crossing paths\r\n        addSegment({\r\n          yawDelta: Math.PI * 3 / helixSegments,\r\n          pitchDelta: Math.PI / 150,\r\n          rollDelta: Math.sin(helixAngle) * Math.PI / 60,\r\n          lanes: [\r\n            { offset: -8, width: 10 },\r\n            { offset: 8, width: 10 }\r\n          ]\r\n        });\r\n      }\r\n    }\r\n    \r\n    // The Harmony Platform - central gathering\r\n    for (let i = 0; i < 25; i++) {\r\n      addSegment({\r\n        lanes: [{ offset: 0, width: 30 }], // Massive platform\r\n        isBoost: (i >= 10 && i <= 15)\r\n      });\r\n    }\r\n    \r\n    // The Balance Descent - perfect flow down\r\n    const descentFlow = [\r\n      { curve: Math.PI / 4, length: 25 },\r\n      { straight: 15 },\r\n      { curve: -Math.PI / 3, length: 30 },\r\n      { straight: 10 },\r\n      { curve: Math.PI / 5, length: 20 }\r\n    ];\r\n    \r\n    for (const section of descentFlow) {\r\n      if (section.straight) {\r\n        for (let i = 0; i < section.straight; i++) {\r\n          addSegment({\r\n            pitchDelta: -Math.PI / 200,\r\n            lanes: [{ offset: 0, width: 16 }],\r\n            isBoost: (i === Math.floor(section.straight / 2))\r\n          });\r\n        }\r\n      } else {\r\n        for (let i = 0; i < section.length; i++) {\r\n          const progress = i / section.length;\r\n          \r\n          addSegment({\r\n            yawDelta: section.curve / section.length,\r\n            pitchDelta: -Math.PI / 180,\r\n            rollDelta: (section.curve > 0 ? 1 : -1) * Math.PI / 70 * Math.sin(progress * Math.PI),\r\n            lanes: [{ offset: 0, width: 15 + Math.sin(progress * Math.PI) * 2 }]\r\n          });\r\n        }\r\n      }\r\n    }\r\n    \r\n    // The Unity Finale - all paths become one\r\n    for (let i = 0; i < 40; i++) {\r\n      const finaleProgress = i / 40;\r\n      \r\n      // Create expanding lotus pattern\r\n      const lotusWidth = 18 + finaleProgress * 12 + Math.sin(finaleProgress * Math.PI * 4) * 2;\r\n      \r\n      addSegment({\r\n        yawDelta: Math.sin(finaleProgress * Math.PI * 2) * Math.PI / 300,\r\n        pitchDelta: -Math.sin(finaleProgress * Math.PI) * Math.PI / 400,\r\n        lanes: [{ offset: 0, width: lotusWidth }],\r\n        isBoost: (i >= 30 && i <= 35),\r\n        isFinishLine: (i === 39)\r\n      });\r\n    }\r\n  }\r\n};"],"names":["Level40","addSegment","i","flowCurves","curve","progress","widthFlow","factor","pathProgress","wave","helixSegments","helixProgress","helixAngle","descentFlow","section","finaleProgress","lotusWidth"],"mappings":"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"}