{"version":3,"file":"Level41-PpR9PzQS.js","sources":["../../src/tracks/levels/Level41.js"],"sourcesContent":["/**\n * Level 41 - Underground Entry\n * Opening level of Circuit Epsilon (Neon Underground)\n * Tutorial descent into the underground tunnel system\n */\n\nexport default {\n  name: \"Underground Entry\",\n  description: \"Descend into the neon-lit tunnels below\",\n  difficulty: 2,\n  shader: \"neon-pulse\",\n\n  skybox: \"neon-city\",\n  \n  generateTrack(addSegment) {\n    // Surface approach\n    for (let i = 0; i < 20; i++) {\n      addSegment({\n        yawDelta: 0,\n        pitchDelta: 0,\n        rollDelta: 0,\n        isStartLine: (i === 0),\n        lanes: [{ offset: 0, width: 14 }]\n      });\n    }\n    \n    // Tunnel entrance descent\n    for (let i = 0; i < 30; i++) {\n      addSegment({\n        pitchDelta: -Math.PI / 150, // Gentle descent\n        lanes: [{ offset: 0, width: 14 }]\n        // No boost needed - descent provides speed\n      });\n    }\n    \n    // First underground curve - wide and welcoming\n    const entryCurve = Math.PI / 2; // 90 degree turn\n    const curveSegments = 35;\n    \n    // Bank into turn\n    for (let i = 0; i < 5; i++) {\n      addSegment({\n        rollDelta: Math.PI / 40,\n        lanes: [{ offset: 0, width: 14 }]\n      });\n    }\n    \n    // Execute turn\n    for (let i = 0; i < curveSegments; i++) {\n      addSegment({\n        yawDelta: entryCurve / curveSegments,\n        lanes: [{ offset: 0, width: 14 }]\n      });\n    }\n    \n    // Bank out\n    for (let i = 0; i < 5; i++) {\n      addSegment({\n        rollDelta: -Math.PI / 40,\n        lanes: [{ offset: 0, width: 14 }]\n      });\n    }\n    \n    // Neon corridor - straight section with visual spectacle\n    for (let i = 0; i < 40; i++) {\n      addSegment({\n        lanes: [{ offset: 0, width: 12 }]\n        // No boost needed\n      });\n    }\n    \n    // S-curve through data streams\n    const sCurveAngle = Math.PI / 3;\n    const sCurveSegs = 25;\n    \n    // First curve (left)\n    for (let i = 0; i < 3; i++) {\n      addSegment({\n        rollDelta: -Math.PI / 50,\n        lanes: [{ offset: 0, width: 12 }]\n      });\n    }\n    \n    for (let i = 0; i < sCurveSegs; i++) {\n      addSegment({\n        yawDelta: -sCurveAngle / sCurveSegs,\n        lanes: [{ offset: 0, width: 12 }]\n      });\n    }\n    \n    for (let i = 0; i < 3; i++) {\n      addSegment({\n        rollDelta: Math.PI / 50,\n        lanes: [{ offset: 0, width: 12 }]\n      });\n    }\n    \n    // Second curve (right)\n    for (let i = 0; i < 3; i++) {\n      addSegment({\n        rollDelta: Math.PI / 50,\n        lanes: [{ offset: 0, width: 12 }]\n      });\n    }\n    \n    for (let i = 0; i < sCurveSegs; i++) {\n      addSegment({\n        yawDelta: sCurveAngle / sCurveSegs,\n        lanes: [{ offset: 0, width: 12 }]\n      });\n    }\n    \n    for (let i = 0; i < 3; i++) {\n      addSegment({\n        rollDelta: -Math.PI / 50,\n        lanes: [{ offset: 0, width: 12 }]\n      });\n    }\n    \n    // Underground plaza - wide open area\n    for (let i = 0; i < 30; i++) {\n      const widthVariation = Math.sin(i * 0.2) * 3 + 15;\n      addSegment({\n        lanes: [{ offset: 0, width: widthVariation }]\n        // No boost needed\n      });\n    }\n    \n    // Final tunnel run to finish\n    for (let i = 0; i < 35; i++) {\n      // Gentle weaving\n      const weave = Math.sin(i * 0.15) * Math.PI / 200;\n      addSegment({\n        yawDelta: weave,\n        lanes: [{ offset: 0, width: 12 }],\n        isFinishLine: (i === 34)\n      });\n    }\n  }\n};"],"names":["Level41","addSegment","i","entryCurve","curveSegments","sCurveAngle","sCurveSegs","widthVariation","weave"],"mappings":"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"}