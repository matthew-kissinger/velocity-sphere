{"version":3,"file":"Level42-DgqGODRB.js","sources":["../../src/tracks/levels/Level42.js"],"sourcesContent":["/**\n * Level 42 - Neon Tubes\n * Racing through cylindrical tunnels with neon ring gates\n * Features tube-like sections and glowing checkpoints\n */\n\nexport default {\n  name: \"Neon Tubes\",\n  description: \"Race through glowing cylindrical passages\",\n  difficulty: 3,\n  shader: \"neon-tubes\",\n  skybox: \"neon-underground\",\n  \n  generateTrack(addSegment) {\n    // Start in main tunnel\n    for (let i = 0; i < 15; i++) {\n      addSegment({\n        yawDelta: 0,\n        pitchDelta: 0,\n        rollDelta: 0,\n        isStartLine: (i === 0),\n        lanes: [{ offset: 0, width: 12 }]\n      });\n    }\n    \n    // Enter first tube - slight climb\n    for (let i = 0; i < 20; i++) {\n      addSegment({\n        pitchDelta: Math.PI / 200,\n        lanes: [{ offset: 0, width: 10 }], // Narrower for tube effect\n        // No boost needed\n      });\n    }\n    \n    // Spiral section inside tube - optimized\n    const spiralSegments = 40; // Reduced from 60\n    const spiralRotations = 1.0; // Reduced from 1.5\n    \n    for (let i = 0; i < spiralSegments; i++) {\n      const spiralAngle = (Math.PI * 2 * spiralRotations) / spiralSegments;\n      \n      // Simplified spiral without complex calculations\n      addSegment({\n        yawDelta: spiralAngle,\n        rollDelta: 0, // Removed roll calculation for performance\n        lanes: [{ offset: 0, width: 10 }]\n      });\n    }\n    \n    // Exit tube into larger chamber\n    for (let i = 0; i < 10; i++) {\n      const widthTransition = 10 + (i / 10) * 6; // Expand from 10 to 16\n      addSegment({\n        pitchDelta: -Math.PI / 200,\n        lanes: [{ offset: 0, width: widthTransition }]\n      });\n    }\n    \n    // Neon ring gates section\n    for (let i = 0; i < 40; i++) {\n      // Create rhythm with width changes\n      const gateEffect = (i % 10 < 2) ? 8 : 16; // Narrow at \"gates\"\n      \n      addSegment({\n        lanes: [{ offset: 0, width: gateEffect }],\n        // No boost needed\n      });\n    }\n    \n    // Double tubes - simplified split path\n    for (let i = 0; i < 40; i++) { // Reduced from 50\n      if (i < 8) {\n        // Split entrance\n        const splitFactor = i / 8;\n        addSegment({\n          lanes: [\n            { offset: -10 * splitFactor, width: 8 },\n            { offset: 10 * splitFactor, width: 8 }\n          ]\n        });\n      } else if (i < 32) {\n        // Parallel paths - no complex calculations\n        addSegment({\n          lanes: [\n            { offset: -10, width: 8 },\n            { offset: 10, width: 8 }\n          ],\n          pitchDelta: 0 // Removed cosine calculation\n        });\n      } else {\n        // Merge back\n        const mergeFactor = 1 - (i - 32) / 8;\n        addSegment({\n          lanes: [\n            { offset: -10 * mergeFactor, width: 8 },\n            { offset: 10 * mergeFactor, width: 8 }\n          ]\n        });\n      }\n    }\n    \n    // Boost tunnel section\n    for (let i = 0; i < 30; i++) {\n      addSegment({\n        lanes: [{ offset: 0, width: 10 }],\n        // Single strategic boost instead of continuous\n        isBoost: (i === 15)\n      });\n    }\n    \n    // Final tube maze\n    const mazePattern = [\n      { turn: Math.PI / 4, length: 15 },\n      { turn: -Math.PI / 3, length: 20 },\n      { turn: Math.PI / 6, length: 15 },\n      { turn: -Math.PI / 4, length: 18 }\n    ];\n    \n    for (const section of mazePattern) {\n      // Bank into turn\n      for (let i = 0; i < 3; i++) {\n        addSegment({\n          rollDelta: (section.turn > 0 ? 1 : -1) * Math.PI / 60,\n          lanes: [{ offset: 0, width: 11 }]\n        });\n      }\n      \n      // Turn\n      for (let i = 0; i < section.length; i++) {\n        addSegment({\n          yawDelta: section.turn / section.length,\n          lanes: [{ offset: 0, width: 11 }]\n        });\n      }\n      \n      // Bank out\n      for (let i = 0; i < 3; i++) {\n        addSegment({\n          rollDelta: (section.turn > 0 ? -1 : 1) * Math.PI / 60,\n          lanes: [{ offset: 0, width: 11 }]\n        });\n      }\n    }\n    \n    // Final sprint\n    for (let i = 0; i < 25; i++) {\n      addSegment({\n        lanes: [{ offset: 0, width: 14 }],\n        isFinishLine: (i === 24)\n      });\n    }\n  }\n};"],"names":["Level42","addSegment","i","spiralSegments","spiralRotations","spiralAngle","widthTransition","gateEffect","splitFactor","mergeFactor","mazePattern","section"],"mappings":"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"}