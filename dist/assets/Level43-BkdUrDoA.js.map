{"version":3,"file":"Level43-BkdUrDoA.js","sources":["../../src/tracks/levels/Level43.js"],"sourcesContent":["/**\n * Level 43 - Data Highway\n * High-speed straightaways with data stream effects\n * Focus on speed and maintaining optimal racing lines\n */\n\nexport default {\n  name: \"Data Highway\",\n  description: \"Blast through high-speed data corridors\",\n  difficulty: 2,\n  shader: \"cyber-tunnel\",\n\n  skybox: \"neon-city\",\n  \n  generateTrack(addSegment) {\n    // Initialize on data highway\n    for (let i = 0; i < 25; i++) {\n      addSegment({\n        yawDelta: 0,\n        pitchDelta: 0,\n        rollDelta: 0,\n        isStartLine: (i === 0),\n        lanes: [{ offset: 0, width: 16 }], // Wide highway\n        // No boost needed\n      });\n    }\n    \n    // High-speed chicane\n    const chicaneAngles = [\n      Math.PI / 8,   // Quick right\n      -Math.PI / 6,  // Sharper left\n      Math.PI / 8    // Quick right\n    ];\n    \n    for (const angle of chicaneAngles) {\n      // Quick direction change\n      for (let i = 0; i < 8; i++) {\n        addSegment({\n          yawDelta: angle / 8,\n          lanes: [{ offset: 0, width: 14 }]\n        });\n      }\n      \n      // Short straight\n      for (let i = 0; i < 5; i++) {\n        addSegment({\n          lanes: [{ offset: 0, width: 14 }]\n        });\n      }\n    }\n    \n    // Data stream tunnel - long straight with effects\n    for (let i = 0; i < 60; i++) {\n      addSegment({\n        lanes: [{ offset: 0, width: 12 }],\n        // No boost needed in straight tunnel\n      });\n    }\n    \n    // Banked speed curves\n    const speedCurves = [\n      { angle: Math.PI / 2, segments: 30, bank: Math.PI / 5 }, // 90Â° with heavy banking\n      { angle: -Math.PI / 2, segments: 30, bank: -Math.PI / 5 }\n    ];\n    \n    for (const curve of speedCurves) {\n      // Bank in\n      for (let i = 0; i < 5; i++) {\n        addSegment({\n          rollDelta: curve.bank / 5,\n          lanes: [{ offset: 0, width: 14 }]\n        });\n      }\n      \n      // High-speed turn\n      for (let i = 0; i < curve.segments; i++) {\n        addSegment({\n          yawDelta: curve.angle / curve.segments,\n          lanes: [{ offset: 0, width: 14 }],\n          // No boost needed in turn\n        });\n      }\n      \n      // Bank out\n      for (let i = 0; i < 5; i++) {\n        addSegment({\n          rollDelta: -curve.bank / 5,\n          lanes: [{ offset: 0, width: 14 }]\n        });\n      }\n    }\n    \n    // Multi-lane highway section\n    for (let i = 0; i < 40; i++) {\n      if (i < 10) {\n        // Expand to multi-lane\n        const expansion = i / 10;\n        addSegment({\n          lanes: [\n            { offset: -8 * expansion, width: 8 },\n            { offset: 0, width: 8 },\n            { offset: 8 * expansion, width: 8 }\n          ]\n        });\n      } else if (i < 30) {\n        // Three parallel lanes\n        addSegment({\n          lanes: [\n            { offset: -8, width: 8 },  // Left lane\n            { offset: 0, width: 8 },   // Center lane\n            { offset: 8, width: 8 }    // Right lane\n          ],\n          // No boost needed\n        });\n      } else {\n        // Merge back\n        const merge = 1 - (i - 30) / 10;\n        addSegment({\n          lanes: [\n            { offset: -8 * merge, width: 8 },\n            { offset: 0, width: 8 },\n            { offset: 8 * merge, width: 8 }\n          ]\n        });\n      }\n    }\n    \n    // Data overflow section - varying width\n    for (let i = 0; i < 35; i++) {\n      const widthPulse = 14 + Math.sin(i * 0.3) * 4;\n      addSegment({\n        lanes: [{ offset: 0, width: widthPulse }],\n        // No boost needed\n      });\n    }\n    \n    // Final speed section\n    for (let i = 0; i < 50; i++) {\n      // Gentle S-curve at high speed\n      const sCurve = Math.sin(i * 0.1) * Math.PI / 100;\n      \n      addSegment({\n        yawDelta: sCurve,\n        lanes: [{ offset: 0, width: 16 }],\n        isFinishLine: (i === 49)\n      });\n    }\n  }\n};"],"names":["Level43","addSegment","i","chicaneAngles","angle","speedCurves","curve","expansion","merge","widthPulse","sCurve"],"mappings":"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"}