{"version":3,"file":"Level44-D37c4Gsj.js","sources":["../../src/tracks/levels/Level44.js"],"sourcesContent":["/**\n * Level 44 - Maintenance Tunnels\n * Tight technical turns through service corridors\n * Tests precision control in confined spaces\n */\n\nexport default {\n  name: \"Maintenance Tunnels\",\n  description: \"Navigate tight service corridors with precision\",\n  difficulty: 4,\n  shader: \"neon-pulse\",\n\n  skybox: \"neon-city\",\n  \n  generateTrack(addSegment) {\n    // Service entrance\n    for (let i = 0; i < 20; i++) {\n      addSegment({\n        yawDelta: 0,\n        pitchDelta: 0,\n        rollDelta: 0,\n        isStartLine: (i === 0),\n        lanes: [{ offset: 0, width: 10 }] // Narrower than usual\n      });\n    }\n    \n    // First maintenance shaft - sharp right angle\n    for (let i = 0; i < 3; i++) {\n      addSegment({\n        rollDelta: Math.PI / 30,\n        lanes: [{ offset: 0, width: 9 }]\n      });\n    }\n    \n    for (let i = 0; i < 20; i++) {\n      addSegment({\n        yawDelta: Math.PI / 2 / 20, // 90Â° turn\n        lanes: [{ offset: 0, width: 9 }]\n      });\n    }\n    \n    for (let i = 0; i < 3; i++) {\n      addSegment({\n        rollDelta: -Math.PI / 30,\n        lanes: [{ offset: 0, width: 9 }]\n      });\n    }\n    \n    // Pipe section - elevation changes\n    for (let i = 0; i < 40; i++) {\n      const pipeWave = Math.sin(i * 0.2) * Math.PI / 100;\n      addSegment({\n        pitchDelta: pipeWave,\n        lanes: [{ offset: 0, width: 8 }], // Very tight\n        // No boost needed\n      });\n    }\n    \n    // Junction room - multiple path options\n    for (let i = 0; i < 30; i++) {\n      if (i < 5) {\n        // Expand into junction\n        const expand = (i / 5) * 8;\n        addSegment({\n          lanes: [{ offset: 0, width: 10 + expand }]\n        });\n      } else if (i < 25) {\n        // Multiple maintenance paths\n        addSegment({\n          lanes: [\n            { offset: -10, width: 7 },  // Left tunnel\n            { offset: 0, width: 8 },    // Center tunnel\n            { offset: 10, width: 7 }    // Right tunnel\n          ],\n          // No powerup needed\n        });\n      } else {\n        // Converge\n        const converge = 1 - (i - 25) / 5;\n        addSegment({\n          lanes: [{ offset: 0, width: 10 + converge * 8 }]\n        });\n      }\n    }\n    \n    // Ventilation shaft zigzag\n    const zigzagPattern = [\n      { angle: Math.PI / 3, segs: 12 },   // Sharp left\n      { angle: -Math.PI / 3, segs: 12 },  // Sharp right\n      { angle: Math.PI / 4, segs: 10 },   // Left\n      { angle: -Math.PI / 3, segs: 12 },  // Sharp right\n      { angle: Math.PI / 4, segs: 10 }    // Left\n    ];\n    \n    for (const zig of zigzagPattern) {\n      for (let i = 0; i < zig.segs; i++) {\n        addSegment({\n          yawDelta: zig.angle / zig.segs,\n          lanes: [{ offset: 0, width: 9 }]\n        });\n      }\n      \n      // Brief straight between turns\n      for (let i = 0; i < 5; i++) {\n        addSegment({\n          lanes: [{ offset: 0, width: 9 }],\n          // No boost needed\n        });\n      }\n    }\n    \n    // Catwalk section - very narrow with drops\n    for (let i = 0; i < 35; i++) {\n      const catwalkWidth = 7 + Math.sin(i * 0.3) * 1; // Slight width variation\n      \n      // Add gaps for challenge\n      const isGap = (i > 10 && i < 13) || (i > 22 && i < 25);\n      \n      addSegment({\n        lanes: [{ offset: 0, width: catwalkWidth }],\n        isGap: isGap\n      });\n    }\n    \n    // Machine room - wider area with obstacles\n    for (let i = 0; i < 45; i++) {\n      // Weaving between machinery\n      const weaveAngle = Math.sin(i * 0.25) * Math.PI / 50;\n      const obstacleAvoidance = (i % 15 < 3) ? 8 : 12; // Narrow sections represent obstacles\n      \n      addSegment({\n        yawDelta: weaveAngle,\n        lanes: [{ offset: 0, width: obstacleAvoidance }],\n        // No boost needed\n      });\n    }\n    \n    // Emergency exit tunnel - climb out\n    for (let i = 0; i < 25; i++) {\n      addSegment({\n        pitchDelta: Math.PI / 150, // Steep climb\n        lanes: [{ offset: 0, width: 10 }],\n        // Single avoidable boost for climb\n        isBoost: (i === 10),\n        lanes: (i === 10) ? [{ offset: -3, width: 4 }] : [{ offset: 0, width: 10 }], // Left side boost\n        isFinishLine: (i === 24)\n      });\n    }\n  }\n};"],"names":["Level44","addSegment","i","pipeWave","expand","converge","zigzagPattern","zig","catwalkWidth","isGap","weaveAngle","obstacleAvoidance"],"mappings":"AAMA,MAAAA,EAAe,CACb,KAAM,sBACN,YAAa,kDACb,WAAY,EACZ,OAAQ,aAER,OAAQ,YAER,cAAcC,EAAY,CAExB,QAASC,EAAI,EAAGA,EAAI,GAAIA,IACtBD,EAAW,CACT,SAAU,EACV,WAAY,EACZ,UAAW,EACX,YAAcC,IAAM,EACpB,MAAO,CAAC,CAAE,OAAQ,EAAG,MAAO,EAAE,CAAE,CACxC,CAAO,EAIH,QAASA,EAAI,EAAGA,EAAI,EAAGA,IACrBD,EAAW,CACT,UAAW,KAAK,GAAK,GACrB,MAAO,CAAC,CAAE,OAAQ,EAAG,MAAO,CAAC,CAAE,CACvC,CAAO,EAGH,QAASC,EAAI,EAAGA,EAAI,GAAIA,IACtBD,EAAW,CACT,SAAU,KAAK,GAAK,EAAI,GACxB,MAAO,CAAC,CAAE,OAAQ,EAAG,MAAO,CAAC,CAAE,CACvC,CAAO,EAGH,QAASC,EAAI,EAAGA,EAAI,EAAGA,IACrBD,EAAW,CACT,UAAW,CAAC,KAAK,GAAK,GACtB,MAAO,CAAC,CAAE,OAAQ,EAAG,MAAO,CAAC,CAAE,CACvC,CAAO,EAIH,QAASC,EAAI,EAAGA,EAAI,GAAIA,IAAK,CAC3B,MAAMC,EAAW,KAAK,IAAID,EAAI,EAAG,EAAI,KAAK,GAAK,IAC/CD,EAAW,CACT,WAAYE,EACZ,MAAO,CAAC,CAAE,OAAQ,EAAG,MAAO,CAAC,CAAE,CAEvC,CAAO,CACH,CAGA,QAASD,EAAI,EAAGA,EAAI,GAAIA,IACtB,GAAIA,EAAI,EAAG,CAET,MAAME,EAAUF,EAAI,EAAK,EACzBD,EAAW,CACT,MAAO,CAAC,CAAE,OAAQ,EAAG,MAAO,GAAKG,CAAM,CAAE,CACnD,CAAS,CACH,SAAWF,EAAI,GAEbD,EAAW,CACT,MAAO,CACL,CAAE,OAAQ,IAAK,MAAO,CAAC,EACvB,CAAE,OAAQ,EAAG,MAAO,CAAC,EACrB,CAAE,OAAQ,GAAI,MAAO,CAAC,CAClC,CAEA,CAAS,MACI,CAEL,MAAMI,EAAW,GAAKH,EAAI,IAAM,EAChCD,EAAW,CACT,MAAO,CAAC,CAAE,OAAQ,EAAG,MAAO,GAAKI,EAAW,CAAC,CAAE,CACzD,CAAS,CACH,CAIF,MAAMC,EAAgB,CACpB,CAAE,MAAO,KAAK,GAAK,EAAG,KAAM,EAAE,EAC9B,CAAE,MAAO,CAAC,KAAK,GAAK,EAAG,KAAM,EAAE,EAC/B,CAAE,MAAO,KAAK,GAAK,EAAG,KAAM,EAAE,EAC9B,CAAE,MAAO,CAAC,KAAK,GAAK,EAAG,KAAM,EAAE,EAC/B,CAAE,MAAO,KAAK,GAAK,EAAG,KAAM,EAAE,CACpC,EAEI,UAAWC,KAAOD,EAAe,CAC/B,QAASJ,EAAI,EAAGA,EAAIK,EAAI,KAAML,IAC5BD,EAAW,CACT,SAAUM,EAAI,MAAQA,EAAI,KAC1B,MAAO,CAAC,CAAE,OAAQ,EAAG,MAAO,CAAC,CAAE,CACzC,CAAS,EAIH,QAASL,EAAI,EAAGA,EAAI,EAAGA,IACrBD,EAAW,CACT,MAAO,CAAC,CAAE,OAAQ,EAAG,MAAO,CAAC,CAAE,CAEzC,CAAS,CAEL,CAGA,QAASC,EAAI,EAAGA,EAAI,GAAIA,IAAK,CAC3B,MAAMM,EAAe,EAAI,KAAK,IAAIN,EAAI,EAAG,EAAI,EAGvCO,EAASP,EAAI,IAAMA,EAAI,IAAQA,EAAI,IAAMA,EAAI,GAEnDD,EAAW,CACT,MAAO,CAAC,CAAE,OAAQ,EAAG,MAAOO,CAAY,CAAE,EAC1C,MAAOC,CACf,CAAO,CACH,CAGA,QAASP,EAAI,EAAGA,EAAI,GAAIA,IAAK,CAE3B,MAAMQ,EAAa,KAAK,IAAIR,EAAI,GAAI,EAAI,KAAK,GAAK,GAC5CS,EAAqBT,EAAI,GAAK,EAAK,EAAI,GAE7CD,EAAW,CACT,SAAUS,EACV,MAAO,CAAC,CAAE,OAAQ,EAAG,MAAOC,CAAiB,CAAE,CAEvD,CAAO,CACH,CAGA,QAAST,EAAI,EAAGA,EAAI,GAAIA,IACtBD,EAAW,CACT,WAAY,KAAK,GAAK,IACtB,MAAO,CAAC,CAAE,OAAQ,EAAG,MAAO,EAAE,CAAE,EAEhC,QAAUC,IAAM,GAChB,MAAQA,IAAM,GAAM,CAAC,CAAE,OAAQ,GAAI,MAAO,CAAC,CAAE,EAAI,CAAC,CAAE,OAAQ,EAAG,MAAO,GAAI,EAC1E,aAAeA,IAAM,EAC7B,CAAO,CAEL,CACF"}