{"version":3,"file":"Level45-X6HuJ8xk.js","sources":["../../src/tracks/levels/Level45.js"],"sourcesContent":["/**\n * Level 45 - Crystal Cavern\n * Natural cave section with glowing crystal formations\n * Mix of organic curves and crystalline structures\n */\n\nexport default {\n  name: \"Crystal Cavern\",\n  description: \"Navigate through bioluminescent crystal caves\",\n  difficulty: 3,\n  shader: \"cyber-tunnel\",\n\n  skybox: \"crystal-cavern\",\n  \n  generateTrack(addSegment) {\n    // Cavern entrance\n    for (let i = 0; i < 20; i++) {\n      addSegment({\n        yawDelta: 0,\n        pitchDelta: 0,\n        rollDelta: 0,\n        isStartLine: (i === 0),\n        lanes: [{ offset: 0, width: 14 }]\n      });\n    }\n    \n    // Descend into main cavern\n    for (let i = 0; i < 30; i++) {\n      const descent = -Math.PI / 180;\n      const widthExpansion = 14 + (i / 30) * 6; // Expanding cavern\n      \n      addSegment({\n        pitchDelta: descent,\n        lanes: [{ offset: 0, width: widthExpansion }],\n        // No boost needed - descent provides speed\n      });\n    }\n    \n    // Crystal field - winding path through formations\n    for (let i = 0; i < 60; i++) {\n      // Organic cave curves\n      const caveFlow = Math.sin(i * 0.1) * Math.PI / 80;\n      const elevation = Math.sin(i * 0.15) * Math.PI / 200;\n      \n      // Width varies with \"crystal clusters\"\n      const crystalEffect = 16 + Math.sin(i * 0.3) * 4;\n      \n      addSegment({\n        yawDelta: caveFlow,\n        pitchDelta: elevation,\n        lanes: [{ offset: 0, width: crystalEffect }],\n        // No powerup needed\n      });\n    }\n    \n    // Crystal tunnel - narrow passage\n    for (let i = 0; i < 25; i++) {\n      addSegment({\n        lanes: [{ offset: 0, width: 9 }],\n        // No boost needed in tunnel\n      });\n    }\n    \n    // Underground lake section - split paths around water\n    for (let i = 0; i < 45; i++) {\n      if (i < 10) {\n        // Path splits around lake\n        const splitFactor = i / 10;\n        addSegment({\n          lanes: [\n            { offset: -12 * splitFactor, width: 10 },\n            { offset: 12 * splitFactor, width: 10 }\n          ]\n        });\n      } else if (i < 35) {\n        // Curved paths around lake edge\n        const lakeProgress = (i - 10) / 25;\n        const lakeCurve = Math.sin(lakeProgress * Math.PI) * Math.PI / 100;\n        \n        addSegment({\n          yawDelta: lakeCurve,\n          lanes: [\n            { offset: -12, width: 10 },\n            { offset: 12, width: 10 }\n          ],\n          // No boost needed\n        });\n      } else {\n        // Paths merge\n        const mergeFactor = 1 - (i - 35) / 10;\n        addSegment({\n          lanes: [\n            { offset: -12 * mergeFactor, width: 10 },\n            { offset: 12 * mergeFactor, width: 10 }\n          ]\n        });\n      }\n    }\n    \n    // Crystal cathedral - large open chamber\n    for (let i = 0; i < 40; i++) {\n      // Sweeping turns in open space\n      const cathedralTurn = Math.sin(i * 0.08) * Math.PI / 60;\n      \n      addSegment({\n        yawDelta: cathedralTurn,\n        lanes: [{ offset: 0, width: 20 }], // Very wide\n        // No boost needed - wide open chamber\n      });\n    }\n    \n    // Stalactite slalom\n    for (let i = 0; i < 50; i++) {\n      // Quick direction changes\n      const slalomAngle = Math.sin(i * 0.4) * Math.PI / 100;\n      const slalomWidth = 11 + Math.cos(i * 0.4) * 2;\n      \n      addSegment({\n        yawDelta: slalomAngle,\n        lanes: [{ offset: 0, width: slalomWidth }]\n      });\n    }\n    \n    // Crystal spire climb\n    for (let i = 0; i < 35; i++) {\n      // Spiral up around crystal formation\n      const spiralAngle = Math.PI / 40;\n      const climbAngle = Math.PI / 200;\n      \n      addSegment({\n        yawDelta: spiralAngle,\n        pitchDelta: climbAngle,\n        rollDelta: (i < 5) ? Math.PI / 50 : (i > 30) ? -Math.PI / 50 : 0,\n        lanes: [{ offset: 0, width: 12 }],\n        // Single boost for climb\n        isBoost: (i === 15)\n      });\n    }\n    \n    // Exit tunnel rush\n    for (let i = 0; i < 30; i++) {\n      addSegment({\n        lanes: [{ offset: 0, width: 14 }],\n        isFinishLine: (i === 29)\n      });\n    }\n  }\n};"],"names":["Level45","addSegment","i","descent","widthExpansion","caveFlow","elevation","crystalEffect","splitFactor","lakeProgress","lakeCurve","mergeFactor","cathedralTurn","slalomAngle","slalomWidth","spiralAngle","climbAngle"],"mappings":"AAMA,MAAAA,EAAe,CACb,KAAM,iBACN,YAAa,gDACb,WAAY,EACZ,OAAQ,eAER,OAAQ,iBAER,cAAcC,EAAY,CAExB,QAASC,EAAI,EAAGA,EAAI,GAAIA,IACtBD,EAAW,CACT,SAAU,EACV,WAAY,EACZ,UAAW,EACX,YAAcC,IAAM,EACpB,MAAO,CAAC,CAAE,OAAQ,EAAG,MAAO,EAAE,CAAE,CACxC,CAAO,EAIH,QAASA,EAAI,EAAGA,EAAI,GAAIA,IAAK,CAC3B,MAAMC,EAAU,CAAC,KAAK,GAAK,IACrBC,EAAiB,GAAMF,EAAI,GAAM,EAEvCD,EAAW,CACT,WAAYE,EACZ,MAAO,CAAC,CAAE,OAAQ,EAAG,MAAOC,CAAc,CAAE,CAEpD,CAAO,CACH,CAGA,QAASF,EAAI,EAAGA,EAAI,GAAIA,IAAK,CAE3B,MAAMG,EAAW,KAAK,IAAIH,EAAI,EAAG,EAAI,KAAK,GAAK,GACzCI,EAAY,KAAK,IAAIJ,EAAI,GAAI,EAAI,KAAK,GAAK,IAG3CK,EAAgB,GAAK,KAAK,IAAIL,EAAI,EAAG,EAAI,EAE/CD,EAAW,CACT,SAAUI,EACV,WAAYC,EACZ,MAAO,CAAC,CAAE,OAAQ,EAAG,MAAOC,CAAa,CAAE,CAEnD,CAAO,CACH,CAGA,QAASL,EAAI,EAAGA,EAAI,GAAIA,IACtBD,EAAW,CACT,MAAO,CAAC,CAAE,OAAQ,EAAG,MAAO,CAAC,CAAE,CAEvC,CAAO,EAIH,QAASC,EAAI,EAAGA,EAAI,GAAIA,IACtB,GAAIA,EAAI,GAAI,CAEV,MAAMM,EAAcN,EAAI,GACxBD,EAAW,CACT,MAAO,CACL,CAAE,OAAQ,IAAMO,EAAa,MAAO,EAAE,EACtC,CAAE,OAAQ,GAAKA,EAAa,MAAO,EAAE,CACjD,CACA,CAAS,CACH,SAAWN,EAAI,GAAI,CAEjB,MAAMO,GAAgBP,EAAI,IAAM,GAC1BQ,EAAY,KAAK,IAAID,EAAe,KAAK,EAAE,EAAI,KAAK,GAAK,IAE/DR,EAAW,CACT,SAAUS,EACV,MAAO,CACL,CAAE,OAAQ,IAAK,MAAO,EAAE,EACxB,CAAE,OAAQ,GAAI,MAAO,EAAE,CACnC,CAEA,CAAS,CACH,KAAO,CAEL,MAAMC,EAAc,GAAKT,EAAI,IAAM,GACnCD,EAAW,CACT,MAAO,CACL,CAAE,OAAQ,IAAMU,EAAa,MAAO,EAAE,EACtC,CAAE,OAAQ,GAAKA,EAAa,MAAO,EAAE,CACjD,CACA,CAAS,CACH,CAIF,QAAST,EAAI,EAAGA,EAAI,GAAIA,IAAK,CAE3B,MAAMU,EAAgB,KAAK,IAAIV,EAAI,GAAI,EAAI,KAAK,GAAK,GAErDD,EAAW,CACT,SAAUW,EACV,MAAO,CAAC,CAAE,OAAQ,EAAG,MAAO,EAAE,CAAE,CAExC,CAAO,CACH,CAGA,QAASV,EAAI,EAAGA,EAAI,GAAIA,IAAK,CAE3B,MAAMW,EAAc,KAAK,IAAIX,EAAI,EAAG,EAAI,KAAK,GAAK,IAC5CY,EAAc,GAAK,KAAK,IAAIZ,EAAI,EAAG,EAAI,EAE7CD,EAAW,CACT,SAAUY,EACV,MAAO,CAAC,CAAE,OAAQ,EAAG,MAAOC,CAAW,CAAE,CACjD,CAAO,CACH,CAGA,QAASZ,EAAI,EAAGA,EAAI,GAAIA,IAAK,CAE3B,MAAMa,EAAc,KAAK,GAAK,GACxBC,EAAa,KAAK,GAAK,IAE7Bf,EAAW,CACT,SAAUc,EACV,WAAYC,EACZ,UAAYd,EAAI,EAAK,KAAK,GAAK,GAAMA,EAAI,GAAM,CAAC,KAAK,GAAK,GAAK,EAC/D,MAAO,CAAC,CAAE,OAAQ,EAAG,MAAO,EAAE,CAAE,EAEhC,QAAUA,IAAM,EACxB,CAAO,CACH,CAGA,QAASA,EAAI,EAAGA,EAAI,GAAIA,IACtBD,EAAW,CACT,MAAO,CAAC,CAAE,OAAQ,EAAG,MAAO,EAAE,CAAE,EAChC,aAAeC,IAAM,EAC7B,CAAO,CAEL,CACF"}