{"version":3,"file":"Level46-CparjJ89.js","sources":["../../src/tracks/levels/Level46.js"],"sourcesContent":["/**\n * Level 46 - Power Core (COMPLETELY REDESIGNED)\n * High-speed racing through energy conduits with no impossible features\n * Features flowing turns and energy-themed sections\n */\n\nexport default {\n  name: \"Power Core\",\n  description: \"Race through the pulsing underground reactor\",\n  difficulty: 4,\n  shader: \"laser-grid\",\n  skybox: \"neon-city\",\n  \n  generateTrack(addSegment) {\n    // Approach corridor\n    for (let i = 0; i < 25; i++) {\n      addSegment({\n        yawDelta: 0,\n        pitchDelta: 0,\n        rollDelta: 0,\n        isStartLine: (i === 0),\n        lanes: [{ offset: 0, width: 12 }]\n      });\n    }\n    \n    // SECTION 1: Energy Conduits\n    // Flowing curves through power channels\n    const conduitTurns = [\n      { angle: Math.PI / 3, segments: 30 },\n      { angle: -Math.PI / 2.5, segments: 35 },\n      { angle: Math.PI / 3.5, segments: 28 },\n      { angle: -Math.PI / 3, segments: 32 }\n    ];\n    \n    for (const turn of conduitTurns) {\n      // Straight approach\n      for (let i = 0; i < 8; i++) {\n        addSegment({\n          yawDelta: 0,\n          pitchDelta: 0,\n          rollDelta: 0,\n          lanes: [{ offset: 0, width: 11 }]\n        });\n      }\n      \n      // Bank into turn\n      for (let i = 0; i < 4; i++) {\n        addSegment({\n          rollDelta: (turn.angle > 0 ? 1 : -1) * Math.PI / 100,\n          lanes: [{ offset: 0, width: 10 }]\n        });\n      }\n      \n      // Smooth power turn\n      for (let i = 0; i < turn.segments; i++) {\n        const progress = i / turn.segments;\n        addSegment({\n          yawDelta: turn.angle / turn.segments,\n          pitchDelta: Math.sin(progress * Math.PI) * Math.PI / 250,\n          rollDelta: 0,\n          lanes: [{ offset: 0, width: 10 }]\n        });\n      }\n      \n      // Bank out\n      for (let i = 0; i < 4; i++) {\n        addSegment({\n          rollDelta: (turn.angle > 0 ? -1 : 1) * Math.PI / 100,\n          lanes: [{ offset: 0, width: 10 }]\n        });\n      }\n    }\n    \n    // SECTION 2: Reactor Chamber\n    // Large circular area around core\n    for (let i = 0; i < 60; i++) {\n      const chamberProgress = i / 60;\n      \n      // Simple circle around reactor\n      addSegment({\n        yawDelta: Math.PI * 2 / 60,\n        pitchDelta: 0,\n        rollDelta: Math.sin(chamberProgress * Math.PI * 2) * Math.PI / 80,\n        lanes: [{ offset: 0, width: 14 }],\n        isBoost: (i > 25 && i < 30) // Speed section\n      });\n    }\n    \n    // SECTION 3: Power Distribution\n    // Multiple energy pathways\n    for (let i = 0; i < 50; i++) {\n      if (i < 10) {\n        // Split into three paths\n        const factor = i / 10;\n        addSegment({\n          lanes: [\n            { offset: -12 * factor, width: 9 },\n            { offset: 0, width: 9 },\n            { offset: 12 * factor, width: 9 }\n          ]\n        });\n      } else if (i < 40) {\n        // Three energy channels\n        addSegment({\n          lanes: [\n            { offset: -12, width: 9 },\n            { offset: 0, width: 9 },\n            { offset: 12, width: 9 }\n          ],\n          yawDelta: Math.sin((i - 10) * 0.1) * Math.PI / 200\n        });\n      } else {\n        // Merge channels\n        const factor = 1 - (i - 40) / 10;\n        addSegment({\n          lanes: [\n            { offset: -12 * factor, width: 9 },\n            { offset: 0, width: 9 },\n            { offset: 12 * factor, width: 9 }\n          ]\n        });\n      }\n    }\n    \n    // SECTION 4: Turbine Run\n    // Fast flowing section\n    for (let i = 0; i < 40; i++) {\n      const turbinePhase = i / 40;\n      const turbineFlow = Math.sin(turbinePhase * Math.PI * 3) * Math.PI / 100;\n      \n      addSegment({\n        yawDelta: turbineFlow,\n        pitchDelta: Math.cos(turbinePhase * Math.PI * 2) * Math.PI / 300,\n        rollDelta: turbineFlow * 0.5,\n        lanes: [{ offset: 0, width: 12 }],\n        isBoost: (i > 30 && i < 35) // Final speed burst\n      });\n    }\n    \n    // SECTION 5: Control Room Sprint\n    // Final straight through control center\n    for (let i = 0; i < 30; i++) {\n      const finalProgress = i / 30;\n      \n      addSegment({\n        yawDelta: 0,\n        pitchDelta: 0,\n        rollDelta: 0,\n        lanes: [{ offset: 0, width: 13 + finalProgress * 5 }],\n        isFinishLine: (i === 29)\n      });\n    }\n  }\n};"],"names":["Level46","addSegment","i","conduitTurns","turn","progress","chamberProgress","factor","turbinePhase","turbineFlow","finalProgress"],"mappings":"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"}