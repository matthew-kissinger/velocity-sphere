{"version":3,"file":"Level47-ChoQgMLC.js","sources":["../../src/tracks/levels/Level47.js"],"sourcesContent":["/**\n * Level 47 - Subway Rush\n * Multi-path racing through abandoned subway tunnels\n * Features parallel tracks and platform sections\n */\n\nexport default {\n  name: \"Subway Rush\",\n  description: \"Speed through abandoned underground transit tunnels\",\n  difficulty: 3,\n  shader: \"neon-pulse\",\n\n  skybox: \"neon-underground\",\n  \n  generateTrack(addSegment) {\n    // Station platform start\n    for (let i = 0; i < 25; i++) {\n      addSegment({\n        yawDelta: 0,\n        pitchDelta: 0,\n        rollDelta: 0,\n        isStartLine: (i === 0),\n        lanes: [{ offset: 0, width: 18 }] // Wide platform area\n      });\n    }\n    \n    // Enter tunnel system - narrowing\n    for (let i = 0; i < 15; i++) {\n      const narrowFactor = 1 - (i / 15) * 0.4;\n      addSegment({\n        lanes: [{ offset: 0, width: 18 * narrowFactor }],\n        // No boost needed\n      });\n    }\n    \n    // Twin tunnel section - classic subway tracks\n    for (let i = 0; i < 50; i++) {\n      // Gentle curves like real subway\n      const subwayCurve = Math.sin(i * 0.08) * Math.PI / 150;\n      \n      addSegment({\n        yawDelta: subwayCurve,\n        lanes: [\n          { offset: -8, width: 9 },   // Left track\n          { offset: 8, width: 9 }     // Right track\n        ],\n        // No boost needed\n      });\n    }\n    \n    // Station bypass - wider area with pillars\n    for (let i = 0; i < 35; i++) {\n      // Create pillar obstacles effect\n      let laneConfig;\n      if (i % 8 < 2) {\n        // Pillar sections - three narrow lanes\n        laneConfig = [\n          { offset: -12, width: 6 },\n          { offset: 0, width: 6 },\n          { offset: 12, width: 6 }\n        ];\n      } else {\n        // Open sections\n        laneConfig = [{ offset: 0, width: 20 }];\n      }\n      \n      addSegment({\n        lanes: laneConfig,\n        // No boost needed\n      });\n    }\n    \n    // Express tunnel - high speed section\n    for (let i = 0; i < 60; i++) {\n      // Long sweeping curves\n      const expressCurve = Math.sin(i * 0.05) * Math.PI / 100;\n      \n      addSegment({\n        yawDelta: expressCurve,\n        lanes: [{ offset: 0, width: 11 }],\n        // No boost needed - express tunnel naturally fast\n      });\n    }\n    \n    // Junction complex - multiple crossing paths\n    for (let i = 0; i < 45; i++) {\n      if (i < 15) {\n        // Diverging paths\n        const diverge = i / 15;\n        addSegment({\n          lanes: [\n            { offset: -15 * diverge, width: 8 },\n            { offset: 0, width: 8 },\n            { offset: 15 * diverge, width: 8 }\n          ]\n        });\n      } else if (i < 30) {\n        // Crossing section - paths weave\n        const weaveProgress = (i - 15) / 15;\n        addSegment({\n          lanes: [\n            { offset: -15, width: 8 }, // Fixed offset for performance\n            { offset: 0, width: 8 },\n            { offset: 15, width: 8 }\n          ]\n        });\n      } else {\n        // Converge back\n        const converge = 1 - (i - 30) / 15;\n        addSegment({\n          lanes: [\n            { offset: 15 * converge, width: 8 },\n            { offset: 0, width: 8 },\n            { offset: -15 * converge, width: 8 }\n          ]\n        });\n      }\n    }\n    \n    // Service tunnel shortcut\n    for (let i = 0; i < 30; i++) {\n      // Tighter, more technical path\n      const serviceTurn = Math.sin(i * 0.2) * Math.PI / 80;\n      \n      addSegment({\n        yawDelta: serviceTurn,\n        lanes: [{ offset: 0, width: 9 }],\n        // No boost needed\n      });\n    }\n    \n    // Final platform rush\n    for (let i = 0; i < 40; i++) {\n      // Platform edge racing\n      const platformWeave = Math.sin(i * 0.15) * Math.PI / 120;\n      \n      // Gradually widen for finish\n      const finishWidth = 12 + (i / 40) * 6;\n      \n      addSegment({\n        yawDelta: platformWeave,\n        lanes: [{ offset: 0, width: finishWidth }],\n        isFinishLine: (i === 39)\n      });\n    }\n  }\n};"],"names":["Level47","addSegment","i","narrowFactor","subwayCurve","laneConfig","expressCurve","diverge","converge","serviceTurn","platformWeave","finishWidth"],"mappings":"AAMA,MAAAA,EAAe,CACb,KAAM,cACN,YAAa,sDACb,WAAY,EACZ,OAAQ,aAER,OAAQ,mBAER,cAAcC,EAAY,CAExB,QAASC,EAAI,EAAGA,EAAI,GAAIA,IACtBD,EAAW,CACT,SAAU,EACV,WAAY,EACZ,UAAW,EACX,YAAcC,IAAM,EACpB,MAAO,CAAC,CAAE,OAAQ,EAAG,MAAO,EAAE,CAAE,CACxC,CAAO,EAIH,QAASA,EAAI,EAAGA,EAAI,GAAIA,IAAK,CAC3B,MAAMC,EAAe,EAAKD,EAAI,GAAM,GACpCD,EAAW,CACT,MAAO,CAAC,CAAE,OAAQ,EAAG,MAAO,GAAKE,EAAc,CAEvD,CAAO,CACH,CAGA,QAASD,EAAI,EAAGA,EAAI,GAAIA,IAAK,CAE3B,MAAME,EAAc,KAAK,IAAIF,EAAI,GAAI,EAAI,KAAK,GAAK,IAEnDD,EAAW,CACT,SAAUG,EACV,MAAO,CACL,CAAE,OAAQ,GAAI,MAAO,CAAC,EACtB,CAAE,OAAQ,EAAG,MAAO,CAAC,CAC/B,CAEA,CAAO,CACH,CAGA,QAASF,EAAI,EAAGA,EAAI,GAAIA,IAAK,CAE3B,IAAIG,EACAH,EAAI,EAAI,EAEVG,EAAa,CACX,CAAE,OAAQ,IAAK,MAAO,CAAC,EACvB,CAAE,OAAQ,EAAG,MAAO,CAAC,EACrB,CAAE,OAAQ,GAAI,MAAO,CAAC,CAChC,EAGQA,EAAa,CAAC,CAAE,OAAQ,EAAG,MAAO,EAAE,CAAE,EAGxCJ,EAAW,CACT,MAAOI,CAEf,CAAO,CACH,CAGA,QAASH,EAAI,EAAGA,EAAI,GAAIA,IAAK,CAE3B,MAAMI,EAAe,KAAK,IAAIJ,EAAI,GAAI,EAAI,KAAK,GAAK,IAEpDD,EAAW,CACT,SAAUK,EACV,MAAO,CAAC,CAAE,OAAQ,EAAG,MAAO,EAAE,CAAE,CAExC,CAAO,CACH,CAGA,QAASJ,EAAI,EAAGA,EAAI,GAAIA,IACtB,GAAIA,EAAI,GAAI,CAEV,MAAMK,EAAUL,EAAI,GACpBD,EAAW,CACT,MAAO,CACL,CAAE,OAAQ,IAAMM,EAAS,MAAO,CAAC,EACjC,CAAE,OAAQ,EAAG,MAAO,CAAC,EACrB,CAAE,OAAQ,GAAKA,EAAS,MAAO,CAAC,CAC5C,CACA,CAAS,CACH,SAAWL,EAAI,GAGbD,EAAW,CACT,MAAO,CACL,CAAE,OAAQ,IAAK,MAAO,CAAC,EACvB,CAAE,OAAQ,EAAG,MAAO,CAAC,EACrB,CAAE,OAAQ,GAAI,MAAO,CAAC,CAClC,CACA,CAAS,MACI,CAEL,MAAMO,EAAW,GAAKN,EAAI,IAAM,GAChCD,EAAW,CACT,MAAO,CACL,CAAE,OAAQ,GAAKO,EAAU,MAAO,CAAC,EACjC,CAAE,OAAQ,EAAG,MAAO,CAAC,EACrB,CAAE,OAAQ,IAAMA,EAAU,MAAO,CAAC,CAC9C,CACA,CAAS,CACH,CAIF,QAASN,EAAI,EAAGA,EAAI,GAAIA,IAAK,CAE3B,MAAMO,EAAc,KAAK,IAAIP,EAAI,EAAG,EAAI,KAAK,GAAK,GAElDD,EAAW,CACT,SAAUQ,EACV,MAAO,CAAC,CAAE,OAAQ,EAAG,MAAO,CAAC,CAAE,CAEvC,CAAO,CACH,CAGA,QAASP,EAAI,EAAGA,EAAI,GAAIA,IAAK,CAE3B,MAAMQ,EAAgB,KAAK,IAAIR,EAAI,GAAI,EAAI,KAAK,GAAK,IAG/CS,EAAc,GAAMT,EAAI,GAAM,EAEpCD,EAAW,CACT,SAAUS,EACV,MAAO,CAAC,CAAE,OAAQ,EAAG,MAAOC,CAAW,CAAE,EACzC,aAAeT,IAAM,EAC7B,CAAO,CACH,CACF,CACF"}