{"version":3,"file":"Level48-BrSe8DlB.js","sources":["../../src/tracks/levels/Level48.js"],"sourcesContent":["/**\n * Level 48 - Laser Maze\n * Weaving through laser grid obstacles\n * High precision required to navigate the bright laser patterns\n */\n\nexport default {\n  name: \"Laser Maze\",\n  description: \"Navigate the high-security laser grid system\",\n  difficulty: 5,\n  shader: \"neon-pulse\",\n  skybox: \"space-deep\",\n  \n  generateTrack(addSegment) {\n    // Security entrance\n    for (let i = 0; i < 20; i++) {\n      addSegment({\n        yawDelta: 0,\n        pitchDelta: 0,\n        rollDelta: 0,\n        isStartLine: (i === 0),\n        lanes: [{ offset: 0, width: 12 }]\n      });\n    }\n    \n    // First laser corridor - alternating gaps\n    for (let i = 0; i < 40; i++) {\n      // Create laser gate effect with varying widths\n      const laserPattern = (i % 8);\n      let laneConfig;\n      \n      if (laserPattern < 2) {\n        // Left passage only\n        laneConfig = [{ offset: -6, width: 8 }];\n      } else if (laserPattern < 4) {\n        // Center passage\n        laneConfig = [{ offset: 0, width: 8 }];\n      } else if (laserPattern < 6) {\n        // Right passage only\n        laneConfig = [{ offset: 6, width: 8 }];\n      } else {\n        // Full width between gates\n        laneConfig = [{ offset: 0, width: 14 }];\n      }\n      \n      addSegment({\n        lanes: laneConfig,\n        // No boost needed\n      });\n    }\n    \n    // Rotating laser section - spiral challenge\n    const spiralSegments = 50;\n    for (let i = 0; i < spiralSegments; i++) {\n      const spiralProgress = i / spiralSegments;\n      const spiralTurn = Math.PI * 1.5 / spiralSegments;\n      \n      // Width pulses to simulate rotating beams\n      const beamEffect = 10 + Math.sin(spiralProgress * Math.PI * 8) * 3;\n      \n      addSegment({\n        yawDelta: spiralTurn,\n        rollDelta: (i < 5) ? Math.PI / 40 : (i > 45) ? -Math.PI / 40 : 0,\n        lanes: [{ offset: 0, width: beamEffect }],\n        // No powerup needed\n      });\n    }\n    \n    // Laser grid room - multiple safe paths\n    for (let i = 0; i < 35; i++) {\n      // Complex multi-path laser pattern\n      const gridPhase = i % 10;\n      let laneConfig;\n      \n      if (gridPhase < 3) {\n        // Diagonal paths available\n        laneConfig = [\n          { offset: -10, width: 6 },\n          { offset: 10, width: 6 }\n        ];\n      } else if (gridPhase < 6) {\n        // Center path clear\n        laneConfig = [{ offset: 0, width: 7 }];\n      } else {\n        // All paths available\n        laneConfig = [\n          { offset: -10, width: 5 },\n          { offset: 0, width: 5 },\n          { offset: 10, width: 5 }\n        ];\n      }\n      \n      addSegment({\n        lanes: laneConfig\n      });\n    }\n    \n    // Vertical laser shaft - elevation changes\n    for (let i = 0; i < 30; i++) {\n      // Climb through vertical laser array\n      const climbAngle = Math.PI / 180;\n      const dodgePattern = Math.sin(i * 0.3) * 4;\n      \n      addSegment({\n        pitchDelta: climbAngle,\n        lanes: [{ offset: 0, width: 8 }], // Fixed offset for performance\n        // No boost needed\n      });\n    }\n    \n    // Laser canyon - high speed weaving\n    for (let i = 0; i < 60; i++) {\n      // Fast slalom through laser gates\n      const slalomAngle = Math.sin(i * 0.25) * Math.PI / 60;\n      const gateWidth = 9 + Math.abs(Math.sin(i * 0.25)) * 2;\n      \n      addSegment({\n        yawDelta: slalomAngle,\n        lanes: [{ offset: 0, width: gateWidth }],\n        // No boost needed\n      });\n    }\n    \n    // Security vault - tight precision section\n    for (let i = 0; i < 40; i++) {\n      // Very technical laser patterns\n      const vaultPattern = i % 12;\n      let laneConfig;\n      \n      if (vaultPattern < 3) {\n        // Single narrow path - left\n        laneConfig = [{ offset: -5, width: 6 }];\n      } else if (vaultPattern < 6) {\n        // Single narrow path - right\n        laneConfig = [{ offset: 5, width: 6 }];\n      } else if (vaultPattern < 9) {\n        // Gap jump required\n        laneConfig = [{ offset: 0, width: 7 }];\n        if (vaultPattern === 7) {\n          addSegment({\n            lanes: laneConfig,\n            isGap: true\n          });\n          continue;\n        }\n      } else {\n        // Brief respite\n        laneConfig = [{ offset: 0, width: 10 }];\n      }\n      \n      addSegment({\n        lanes: laneConfig\n      });\n    }\n    \n    // Escape tunnel - final sprint\n    for (let i = 0; i < 35; i++) {\n      // Descending escape route\n      const escapeDescent = -Math.PI / 200;\n      \n      addSegment({\n        pitchDelta: (i < 20) ? escapeDescent : 0,\n        lanes: [{ offset: 0, width: 12 }],\n        isFinishLine: (i === 34)\n      });\n    }\n  }\n};"],"names":["Level48","addSegment","i","laserPattern","laneConfig","spiralSegments","spiralProgress","spiralTurn","beamEffect","gridPhase","climbAngle","slalomAngle","gateWidth","vaultPattern","escapeDescent"],"mappings":"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"}