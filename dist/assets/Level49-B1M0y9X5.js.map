{"version":3,"file":"Level49-B1M0y9X5.js","sources":["../../src/tracks/levels/Level49.js"],"sourcesContent":["/**\n * Level 49 - The Depths\n * Deep underground with limited visibility\n * Challenging track in the darkest reaches of the underground\n */\n\nexport default {\n  name: \"The Depths\",\n  description: \"Descend into the darkest tunnels of the underground\",\n  difficulty: 5,\n  shader: \"cyber-tunnel\",\n\n  skybox: \"neon-underground\",\n  \n  generateTrack(addSegment) {\n    // Descent begins\n    for (let i = 0; i < 25; i++) {\n      addSegment({\n        yawDelta: 0,\n        pitchDelta: -Math.PI / 200, // Steady descent\n        rollDelta: 0,\n        isStartLine: (i === 0),\n        lanes: [{ offset: 0, width: 11 }]\n      });\n    }\n    \n    // The abyss drop - steep descent section\n    for (let i = 0; i < 20; i++) {\n      addSegment({\n        pitchDelta: -Math.PI / 100, // Steeper descent\n        lanes: [{ offset: 0, width: 10 }]\n      });\n    }\n    \n    // Darkness maze - winding paths with limited visibility\n    const mazeSegments = 80;\n    for (let i = 0; i < mazeSegments; i++) {\n      // Complex winding pattern\n      const mazeProgress = i / mazeSegments;\n      const mazeTurn = Math.sin(mazeProgress * Math.PI * 6) * Math.PI / 60 +\n                      Math.cos(mazeProgress * Math.PI * 4) * Math.PI / 80;\n      \n      // Varying widths add to difficulty\n      const mazeWidth = 9 + Math.sin(mazeProgress * Math.PI * 8) * 2;\n      \n      addSegment({\n        yawDelta: mazeTurn,\n        pitchDelta: Math.sin(mazeProgress * Math.PI * 3) * Math.PI / 300,\n        lanes: [{ offset: 0, width: mazeWidth }]\n      });\n    }\n    \n    // Echo chamber - large cavern with multiple paths\n    for (let i = 0; i < 50; i++) {\n      if (i < 10) {\n        // Expand into cavern\n        const expansion = (i / 10);\n        addSegment({\n          lanes: [{ offset: 0, width: 10 + expansion * 10 }]\n        });\n      } else if (i < 40) {\n        // Multiple paths through darkness\n        const pathPhase = (i - 10) % 10;\n        let laneConfig;\n        \n        if (pathPhase < 5) {\n          // Split paths\n          laneConfig = [\n            { offset: -12, width: 8 },\n            { offset: 0, width: 8 },\n            { offset: 12, width: 8 }\n          ];\n        } else {\n          // Converged section\n          laneConfig = [{ offset: 0, width: 16 }];\n        }\n        \n        addSegment({\n          lanes: laneConfig\n        });\n      } else {\n        // Narrow back down\n        const narrow = 1 - (i - 40) / 10;\n        addSegment({\n          lanes: [{ offset: 0, width: 10 + narrow * 10 }]\n        });\n      }\n    }\n    \n    // The void - minimal reference points\n    for (let i = 0; i < 40; i++) {\n      // Gentle curves in complete darkness\n      const voidCurve = Math.sin(i * 0.1) * Math.PI / 100;\n      \n      // Add gaps for extra challenge\n      const isVoidGap = (i === 15 || i === 25);\n      \n      addSegment({\n        yawDelta: voidCurve,\n        lanes: [{ offset: 0, width: 10 }],\n        isGap: isVoidGap\n      });\n    }\n    \n    // Compression tunnel - claustrophobic section\n    for (let i = 0; i < 35; i++) {\n      // Very tight, winding passage\n      const compressionTurn = Math.sin(i * 0.3) * Math.PI / 40;\n      const compressionWidth = 7 + Math.sin(i * 0.4) * 1;\n      \n      addSegment({\n        yawDelta: compressionTurn,\n        rollDelta: Math.sin(i * 0.2) * Math.PI / 100, // Slight banking\n        lanes: [{ offset: 0, width: compressionWidth }]\n      });\n    }\n    \n    // Ancient passage - mysterious straight section\n    for (let i = 0; i < 30; i++) {\n      addSegment({\n        lanes: [{ offset: 0, width: 11 }]\n      });\n    }\n    \n    // Final ascent - escape from the depths\n    for (let i = 0; i < 50; i++) {\n      // Spiral climb out\n      const ascentAngle = Math.PI / 150;\n      const spiralAngle = Math.PI / 40;\n      \n      addSegment({\n        yawDelta: spiralAngle,\n        pitchDelta: ascentAngle,\n        lanes: [{ offset: 0, width: 12 }],\n        isBoost: (i === 35),\n        isFinishLine: (i === 49)\n      });\n    }\n  }\n};"],"names":["Level49","addSegment","i","mazeSegments","mazeProgress","mazeTurn","mazeWidth","expansion","pathPhase","laneConfig","narrow","voidCurve","compressionTurn","compressionWidth","ascentAngle","spiralAngle"],"mappings":"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"}