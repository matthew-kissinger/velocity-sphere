{"version":3,"file":"Level5-C9SH8ZZQ.js","sources":["../../src/tracks/levels/Level5.js"],"sourcesContent":["/**\r\n * Level 5 - Crystaline\r\n * Precision track through crystalline formations\r\n */\r\n\r\nexport default {\r\n  name: \"Crystaline\",\r\n  description: \"Thread through crystal formations requiring perfect precision\",\r\n  difficulty: 5,\r\n  shader: \"crystal-surface\", // Crystalline surfaces for precision\r\n  skybox: \"crystal-sky\", // Matching crystal atmosphere\r\n  \r\n  generateTrack(addSegment, addLoop) {\r\n    // Level 5: Sky Bridge - Most challenging track yet\r\n    // --- Section 1: Starting straight ---\r\n    const startCount = 20;\r\n    for (let i = 0; i < startCount; i++) {\r\n      addSegment({\r\n        yawDelta: 0,\r\n        pitchDelta: 0,\r\n        rollDelta: 0,\r\n        isStartLine: (i === 0)\r\n      });\r\n    }\r\n    \r\n    // --- Section 2: Initial Climb to Bridge Level ---\r\n    // Steep climb to establish elevation\r\n    const climbSegments = 15;\r\n    const climbAngle = Math.PI / 4.5; // ~40 degrees - steeper than previous levels\r\n    \r\n    for (let i = 0; i < climbSegments; i++) {\r\n      addSegment({ \r\n        pitchDelta: climbAngle / climbSegments,\r\n        yawDelta: 0,\r\n        rollDelta: 0\r\n      });\r\n    }\r\n    \r\n    // Brief recovery at elevated level\r\n    for (let i = 0; i < 5; i++) {\r\n      addSegment({ yawDelta: 0, pitchDelta: 0, rollDelta: 0 });\r\n    }\r\n    \r\n    // --- Section 3: Elevated Narrow Bridge with Sharp Turns ---\r\n    // Simulate narrow elevated bridge with aggressive turns\r\n    const bridgeTurns = [\r\n      { angle: Math.PI / 2.8, segments: 8, bank: Math.PI / 6 },   // ~64° right with steep banking\r\n      { angle: -Math.PI / 2.5, segments: 9, bank: -Math.PI / 6 }, // ~72° left with steep banking\r\n      { angle: Math.PI / 3.2, segments: 7, bank: Math.PI / 8 },   // ~56° right\r\n      { angle: -Math.PI / 4, segments: 6, bank: -Math.PI / 8 }    // 45° left\r\n    ];\r\n    \r\n    for (const turn of bridgeTurns) {\r\n      const yawPerSegment = turn.angle / turn.segments;\r\n      const bankPerSegment = turn.bank / turn.segments;\r\n      \r\n      // Quick banking entry (shorter than previous levels)\r\n      for (let i = 0; i < 2; i++) {\r\n        addSegment({ \r\n          yawDelta: 0,\r\n          pitchDelta: 0,\r\n          rollDelta: bankPerSegment\r\n        });\r\n      }\r\n      \r\n      // Sharp turn with full banking\r\n      for (let i = 0; i < turn.segments; i++) {\r\n        addSegment({ \r\n          yawDelta: yawPerSegment,\r\n          pitchDelta: 0,\r\n          rollDelta: 0\r\n        });\r\n      }\r\n      \r\n      // Quick banking exit\r\n      for (let i = 0; i < 2; i++) {\r\n        addSegment({ \r\n          yawDelta: 0,\r\n          pitchDelta: 0,\r\n          rollDelta: -bankPerSegment\r\n        });\r\n      }\r\n      \r\n      // Minimal recovery - makes it very technical\r\n      addSegment({ yawDelta: 0, pitchDelta: 0, rollDelta: 0 });\r\n    }\r\n    \r\n    // --- Section 4: Precision Jump Sequence ---\r\n    // Multiple jumps with very small landing zones\r\n    const precisionJumps = [\r\n      { ramp: 6, gap: 3, land: 4 },    // Small landing zone\r\n      { straight: 3 },                 // Very short recovery\r\n      { ramp: 5, gap: 2, land: 4 },    // Quick succession\r\n      { straight: 2 },                 \r\n      { ramp: 7, gap: 4, land: 5 },    // Longer jump, small landing\r\n      { straight: 4 }\r\n    ];\r\n    \r\n    for (const section of precisionJumps) {\r\n      if (section.ramp) {\r\n        // Steeper jump angle for more challenging precision\r\n        const jumpAngle = Math.PI / 4.8; // ~37.5 degrees\r\n        \r\n        // Ramp up\r\n        for (let i = 0; i < section.ramp; i++) {\r\n          addSegment({ pitchDelta: jumpAngle / section.ramp });\r\n        }\r\n        // Gap\r\n        for (let i = 0; i < section.gap; i++) {\r\n          addSegment({ isGap: true });\r\n        }\r\n        // Landing - smaller landing area\r\n        for (let i = 0; i < section.land; i++) {\r\n          addSegment({ pitchDelta: -jumpAngle / section.land });\r\n        }\r\n      } else if (section.straight) {\r\n        for (let i = 0; i < section.straight; i++) {\r\n          addSegment({ yawDelta: 0, pitchDelta: 0, rollDelta: 0 });\r\n        }\r\n      }\r\n    }\r\n    \r\n    // --- Section 5: Figure-8 Crossover at Different Heights ---\r\n    // First loop of figure-8 at current elevation\r\n    const figureEightSegments = 25;\r\n    const figureEightTurn = Math.PI * 1.1; // Slightly more than a full circle\r\n    const yawPerSegment = figureEightTurn / figureEightSegments;\r\n    \r\n    // Banking entry for first loop\r\n    for (let i = 0; i < 3; i++) {\r\n      addSegment({ rollDelta: Math.PI / 24 });\r\n    }\r\n    \r\n    // First loop at high elevation\r\n    for (let i = 0; i < figureEightSegments; i++) {\r\n      addSegment({ \r\n        yawDelta: yawPerSegment,\r\n        pitchDelta: 0,\r\n        rollDelta: 0\r\n      });\r\n    }\r\n    \r\n    // Crossover bridge - gradual descent while turning\r\n    const crossoverSegments = 15;\r\n    const descentAngle = Math.PI / 18; // Gradual descent\r\n    const crossoverTurn = Math.PI / 6; // 30 degree turn while descending\r\n    \r\n    for (let i = 0; i < crossoverSegments; i++) {\r\n      addSegment({\r\n        yawDelta: crossoverTurn / crossoverSegments,\r\n        pitchDelta: -descentAngle / crossoverSegments,\r\n        rollDelta: 0\r\n      });\r\n    }\r\n    \r\n    // Second loop at lower elevation\r\n    for (let i = 0; i < figureEightSegments; i++) {\r\n      addSegment({ \r\n        yawDelta: -yawPerSegment, // Opposite direction\r\n        pitchDelta: 0,\r\n        rollDelta: 0\r\n      });\r\n    }\r\n    \r\n    // Banking exit\r\n    for (let i = 0; i < 3; i++) {\r\n      addSegment({ rollDelta: -Math.PI / 24 });\r\n    }\r\n    \r\n    // --- Section 6: Steep Downhill Slalom ---\r\n    // Rapid descent with tight slalom turns\r\n    const slalomSections = [\r\n      { angle: Math.PI / 5, segments: 4, descent: Math.PI / 25 },  // 36° right\r\n      { angle: -Math.PI / 4, segments: 5, descent: Math.PI / 25 }, // 45° left\r\n      { angle: Math.PI / 3.5, segments: 4, descent: Math.PI / 25 }, // ~51° right\r\n      { angle: -Math.PI / 5, segments: 4, descent: Math.PI / 25 }, // 36° left\r\n      { angle: Math.PI / 6, segments: 3, descent: Math.PI / 25 }   // 30° right\r\n    ];\r\n    \r\n    for (const section of slalomSections) {\r\n      const yawPerSegment = section.angle / section.segments;\r\n      const descentPerSegment = section.descent / section.segments;\r\n      \r\n      for (let i = 0; i < section.segments; i++) {\r\n        addSegment({\r\n          yawDelta: yawPerSegment,\r\n          pitchDelta: -descentPerSegment, // Continuous descent\r\n          rollDelta: 0\r\n        });\r\n      }\r\n      \r\n      // No recovery between slalom gates - immediate transition\r\n    }\r\n    \r\n    // --- Section 7: Final Gauntlet - Alternating Jumps and Sharp Turns ---\r\n    const gauntletSequence = [\r\n      { type: 'jump', ramp: 5, gap: 2, land: 4 },\r\n      { type: 'turn', angle: Math.PI / 3, segments: 6, bank: Math.PI / 10 }, // 60° right\r\n      { type: 'jump', ramp: 4, gap: 3, land: 4 },\r\n      { type: 'turn', angle: -Math.PI / 2.5, segments: 7, bank: -Math.PI / 10 }, // 72° left\r\n      { type: 'jump', ramp: 6, gap: 2, land: 3 }, // Smallest landing zone\r\n      { type: 'turn', angle: Math.PI / 4, segments: 5, bank: Math.PI / 12 } // 45° right\r\n    ];\r\n    \r\n    for (const element of gauntletSequence) {\r\n      if (element.type === 'jump') {\r\n        const jumpAngle = Math.PI / 5; // ~36 degrees\r\n        \r\n        // Ramp\r\n        for (let i = 0; i < element.ramp; i++) {\r\n          addSegment({ pitchDelta: jumpAngle / element.ramp });\r\n        }\r\n        // Gap\r\n        for (let i = 0; i < element.gap; i++) {\r\n          addSegment({ isGap: true });\r\n        }\r\n        // Landing\r\n        for (let i = 0; i < element.land; i++) {\r\n          addSegment({ pitchDelta: -jumpAngle / element.land });\r\n        }\r\n      } else if (element.type === 'turn') {\r\n        const yawPerSegment = element.angle / element.segments;\r\n        const bankPerSegment = element.bank / element.segments;\r\n        \r\n        // Banking entry\r\n        addSegment({ rollDelta: bankPerSegment });\r\n        \r\n        // Sharp turn\r\n        for (let i = 0; i < element.segments; i++) {\r\n          addSegment({ \r\n            yawDelta: yawPerSegment,\r\n            pitchDelta: 0,\r\n            rollDelta: 0\r\n          });\r\n        }\r\n        \r\n        // Banking exit\r\n        addSegment({ rollDelta: -bankPerSegment });\r\n      }\r\n      \r\n      // Minimal recovery between gauntlet elements\r\n      addSegment({ yawDelta: 0, pitchDelta: 0, rollDelta: 0 });\r\n    }\r\n    \r\n    // --- Section 8: Final Elevated Bridge to Finish ---\r\n    // Short climb back to bridge level for dramatic finish\r\n    const finalClimb = 8;\r\n    const finalClimbAngle = Math.PI / 8; // 22.5 degrees\r\n    \r\n    for (let i = 0; i < finalClimb; i++) {\r\n      addSegment({ pitchDelta: finalClimbAngle / finalClimb });\r\n    }\r\n    \r\n    // Final elevated straight to finish line\r\n    const finalSprint = 12;\r\n    for (let i = 0; i < finalSprint; i++) {\r\n      addSegment({ \r\n        yawDelta: 0,\r\n        pitchDelta: 0,\r\n        rollDelta: 0,\r\n        isFinishLine: (i === finalSprint - 1) \r\n      });\r\n    }\r\n  }\r\n};"],"names":["Level5","addSegment","addLoop","i","climbSegments","climbAngle","bridgeTurns","turn","yawPerSegment","bankPerSegment","precisionJumps","section","jumpAngle","figureEightSegments","crossoverSegments","descentAngle","crossoverTurn","slalomSections","descentPerSegment","gauntletSequence","element","finalClimb","finalClimbAngle","finalSprint"],"mappings":"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"}