{"version":3,"file":"Level6-DX5kPide.js","sources":["../../src/tracks/levels/Level6.js"],"sourcesContent":["/**\n * Level 6 - Inferno\n * Volcanic track with flowing lava aesthetics\n */\n\nexport default {\n  name: \"Inferno\",\n  description: \"Race through molten passages with flowing heat\",\n  difficulty: 3,\n  shader: \"lava-flow\", // Hot flowing theme\n  skybox: \"lava-storm\", // Matching volcanic atmosphere\n  \n  generateTrack(addSegment) {\n    // Starting straight\n    for (let i = 0; i < 25; i++) {\n      addSegment({\n        yawDelta: 0,\n        pitchDelta: 0,\n        rollDelta: 0,\n        isStartLine: (i === 0)\n      });\n    }\n    \n    // First loop of the eight - go right and up slightly\n    const loop1Segments = 60;\n    const loop1Angle = Math.PI * 2;\n    for (let i = 0; i < loop1Segments; i++) {\n      const progress = i / loop1Segments;\n      // Gradual elevation change to create the overpass\n      let pitch = 0;\n      if (progress > 0.3 && progress < 0.7) {\n        // Rise up in the middle portion\n        pitch = Math.sin((progress - 0.3) * Math.PI / 0.4) * Math.PI / 100;\n      }\n      \n      addSegment({ \n        yawDelta: loop1Angle / loop1Segments,\n        pitchDelta: pitch\n      });\n    }\n    \n    // Straight crossover section (elevated)\n    for (let i = 0; i < 20; i++) {\n      addSegment({ yawDelta: 0, pitchDelta: 0 });\n    }\n    \n    // Second loop of the eight - go left and down\n    const loop2Segments = 60;\n    const loop2Angle = -Math.PI * 2;\n    for (let i = 0; i < loop2Segments; i++) {\n      const progress = i / loop2Segments;\n      // Gradual descent back to ground level\n      let pitch = 0;\n      if (progress > 0.3 && progress < 0.7) {\n        // Descend in the middle portion\n        pitch = -Math.sin((progress - 0.3) * Math.PI / 0.4) * Math.PI / 100;\n      }\n      \n      addSegment({ \n        yawDelta: loop2Angle / loop2Segments,\n        pitchDelta: pitch\n      });\n    }\n    \n    // Chicane section after the figure-8\n    for (let i = 0; i < 10; i++) {\n      addSegment({ yawDelta: -Math.PI / 50 });\n    }\n    for (let i = 0; i < 20; i++) {\n      addSegment({ yawDelta: Math.PI / 50 });\n    }\n    for (let i = 0; i < 10; i++) {\n      addSegment({ yawDelta: -Math.PI / 50 });\n    }\n    \n    // Split path choice\n    for (let i = 0; i < 5; i++) {\n      const factor = i / 5;\n      addSegment({\n        lanes: [\n          { offset: -8 * factor, width: 6 },\n          { offset: 8 * factor, width: 6 }\n        ]\n      });\n    }\n    \n    // Left path: narrow but shorter\n    // Right path: wider but with jump\n    for (let i = 0; i < 25; i++) {\n      if (i > 10 && i < 15) {\n        // Jump on right path only\n        addSegment({\n          lanes: [\n            { offset: -8, width: 4 },  // Narrow left\n            { offset: 8, width: 8 }    // Wide right\n          ],\n          pitchDelta: i < 13 ? Math.PI / 40 : -Math.PI / 40\n        });\n      } else if (i >= 15 && i < 18) {\n        // Gap on right path\n        addSegment({\n          lanes: [\n            { offset: -8, width: 4 },\n            { offset: 8, width: 8, isGap: true }\n          ]\n        });\n      } else {\n        // Normal split\n        addSegment({\n          lanes: [\n            { offset: -8, width: 4 },\n            { offset: 8, width: 8 }\n          ],\n          yawDelta: Math.PI / 200  // Slight curve\n        });\n      }\n    }\n    \n    // Merge paths\n    for (let i = 0; i < 5; i++) {\n      const factor = 1 - (i / 5);\n      addSegment({\n        lanes: [\n          { offset: -8 * factor, width: 4 + 2 * (1-factor) },\n          { offset: 8 * factor, width: 8 - 2 * (1-factor) }\n        ]\n      });\n    }\n    \n    // Final sprint\n    for (let i = 0; i < 25; i++) {\n      addSegment({\n        yawDelta: 0,\n        pitchDelta: 0,\n        rollDelta: 0,\n        isFinishLine: (i === 24)\n      });\n    }\n  }\n};"],"names":["Level6","addSegment","i","loop1Segments","loop1Angle","progress","pitch","loop2Segments","loop2Angle","factor"],"mappings":"AAKA,MAAAA,EAAe,CACb,KAAM,UACN,YAAa,iDACb,WAAY,EACZ,OAAQ,YACR,OAAQ,aAER,cAAcC,EAAY,CAExB,QAASC,EAAI,EAAGA,EAAI,GAAIA,IACtBD,EAAW,CACT,SAAU,EACV,WAAY,EACZ,UAAW,EACX,YAAcC,IAAM,CAC5B,CAAO,EAIH,MAAMC,EAAgB,GAChBC,EAAa,KAAK,GAAK,EAC7B,QAASF,EAAI,EAAGA,EAAIC,EAAeD,IAAK,CACtC,MAAMG,EAAWH,EAAIC,EAErB,IAAIG,EAAQ,EACRD,EAAW,IAAOA,EAAW,KAE/BC,EAAQ,KAAK,KAAKD,EAAW,IAAO,KAAK,GAAK,EAAG,EAAI,KAAK,GAAK,KAGjEJ,EAAW,CACT,SAAUG,EAAaD,EACvB,WAAYG,CACpB,CAAO,CACH,CAGA,QAASJ,EAAI,EAAGA,EAAI,GAAIA,IACtBD,EAAW,CAAE,SAAU,EAAG,WAAY,CAAC,CAAE,EAI3C,MAAMM,EAAgB,GAChBC,EAAa,CAAC,KAAK,GAAK,EAC9B,QAASN,EAAI,EAAGA,EAAIK,EAAeL,IAAK,CACtC,MAAMG,EAAWH,EAAIK,EAErB,IAAID,EAAQ,EACRD,EAAW,IAAOA,EAAW,KAE/BC,EAAQ,CAAC,KAAK,KAAKD,EAAW,IAAO,KAAK,GAAK,EAAG,EAAI,KAAK,GAAK,KAGlEJ,EAAW,CACT,SAAUO,EAAaD,EACvB,WAAYD,CACpB,CAAO,CACH,CAGA,QAASJ,EAAI,EAAGA,EAAI,GAAIA,IACtBD,EAAW,CAAE,SAAU,CAAC,KAAK,GAAK,EAAE,CAAE,EAExC,QAASC,EAAI,EAAGA,EAAI,GAAIA,IACtBD,EAAW,CAAE,SAAU,KAAK,GAAK,EAAE,CAAE,EAEvC,QAASC,EAAI,EAAGA,EAAI,GAAIA,IACtBD,EAAW,CAAE,SAAU,CAAC,KAAK,GAAK,EAAE,CAAE,EAIxC,QAASC,EAAI,EAAGA,EAAI,EAAGA,IAAK,CAC1B,MAAMO,EAASP,EAAI,EACnBD,EAAW,CACT,MAAO,CACL,CAAE,OAAQ,GAAKQ,EAAQ,MAAO,CAAC,EAC/B,CAAE,OAAQ,EAAIA,EAAQ,MAAO,CAAC,CACxC,CACA,CAAO,CACH,CAIA,QAASP,EAAI,EAAGA,EAAI,GAAIA,IAClBA,EAAI,IAAMA,EAAI,GAEhBD,EAAW,CACT,MAAO,CACL,CAAE,OAAQ,GAAI,MAAO,CAAC,EACtB,CAAE,OAAQ,EAAG,MAAO,CAAC,CACjC,EACU,WAAYC,EAAI,GAAK,KAAK,GAAK,GAAK,CAAC,KAAK,GAAK,EACzD,CAAS,EACQA,GAAK,IAAMA,EAAI,GAExBD,EAAW,CACT,MAAO,CACL,CAAE,OAAQ,GAAI,MAAO,CAAC,EACtB,CAAE,OAAQ,EAAG,MAAO,EAAG,MAAO,EAAI,CAC9C,CACA,CAAS,EAGDA,EAAW,CACT,MAAO,CACL,CAAE,OAAQ,GAAI,MAAO,CAAC,EACtB,CAAE,OAAQ,EAAG,MAAO,CAAC,CACjC,EACU,SAAU,KAAK,GAAK,GAC9B,CAAS,EAKL,QAASC,EAAI,EAAGA,EAAI,EAAGA,IAAK,CAC1B,MAAMO,EAAS,EAAKP,EAAI,EACxBD,EAAW,CACT,MAAO,CACL,CAAE,OAAQ,GAAKQ,EAAQ,MAAO,EAAI,GAAK,EAAEA,EAAO,EAChD,CAAE,OAAQ,EAAIA,EAAQ,MAAO,EAAI,GAAK,EAAEA,EAAO,CACzD,CACA,CAAO,CACH,CAGA,QAASP,EAAI,EAAGA,EAAI,GAAIA,IACtBD,EAAW,CACT,SAAU,EACV,WAAY,EACZ,UAAW,EACX,aAAeC,IAAM,EAC7B,CAAO,CAEL,CACF"}