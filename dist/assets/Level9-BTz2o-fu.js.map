{"version":3,"file":"Level9-BTz2o-fu.js","sources":["../../src/tracks/levels/Level9.js"],"sourcesContent":["/**\n * Level 9 - Cyberflow\n * Rhythmic cyberpunk track with flowing patterns\n */\n\nexport default {\n  name: \"Cyberflow\",\n  description: \"Flow through digital rhythms and cyber patterns\",\n  difficulty: 4,\n  shader: \"tech-grid\", // Rhythmic grid patterns\n  skybox: \"neon-city\", // Cyberpunk rhythm vibes\n  \n  generateTrack(addSegment) {\n    // Starting section\n    for (let i = 0; i < 20; i++) {\n      addSegment({\n        yawDelta: 0,\n        pitchDelta: 0,\n        rollDelta: 0,\n        isStartLine: (i === 0)\n      });\n    }\n    \n    // Rhythmic hills section - like a pump track\n    for (let j = 0; j < 3; j++) {\n      // Up (gentler angle)\n      for (let i = 0; i < 10; i++) {\n        addSegment({ pitchDelta: Math.PI / 80 }); // Gentle climb\n      }\n      // Down\n      for (let i = 0; i < 10; i++) {\n        addSegment({ pitchDelta: -Math.PI / 80 });\n      }\n    }\n    \n    // Fast left sweeper\n    for (let i = 0; i < 30; i++) {\n      addSegment({ \n        yawDelta: -Math.PI / 60,\n        rollDelta: i < 15 ? -Math.PI / 300 : Math.PI / 300  // Bank in then out\n      });\n    }\n    \n    // Technical section - alternating narrow/wide\n    for (let i = 0; i < 40; i++) {\n      const narrow = (Math.floor(i / 5) % 2) === 0;\n      addSegment({\n        lanes: [{ offset: 0, width: narrow ? 6 : 12 }],\n        yawDelta: Math.sin(i * 0.2) * Math.PI / 80  // Weaving\n      });\n    }\n    \n    // Jump sequence with rhythm\n    for (let j = 0; j < 3; j++) {\n      // Approach\n      for (let i = 0; i < 6; i++) {\n        addSegment({ pitchDelta: Math.PI / 50 });\n      }\n      // Gap (increasing size)\n      for (let i = 0; i < 2 + j; i++) {\n        addSegment({ isGap: true });\n      }\n      // Landing\n      for (let i = 0; i < 6; i++) {\n        addSegment({ pitchDelta: -Math.PI / 50 });\n      }\n      // Recovery straight\n      for (let i = 0; i < 8; i++) {\n        addSegment({ yawDelta: 0, pitchDelta: 0 });\n      }\n    }\n    \n    // Downhill slalom section\n    for (let i = 0; i < 50; i++) {\n      addSegment({\n        yawDelta: Math.sin(i * 0.25) * Math.PI / 40,  // S-turns\n        pitchDelta: -Math.PI / 200,  // Gentle downhill\n        rollDelta: Math.cos(i * 0.25) * Math.PI / 200  // Slight banking with turns\n      });\n    }\n    \n    // Straight before triple split\n    for (let i = 0; i < 5; i++) {\n      addSegment({ });\n    }\n    \n    // Triple split path - three choices\n    for (let i = 0; i < 5; i++) {\n      const factor = i / 5;\n      addSegment({\n        lanes: [\n          { offset: -12 * factor, width: 6 },  // Left path (wider)\n          { offset: 0, width: 7 },             // Center path (wider) \n          { offset: 12 * factor, width: 6 }    // Right path (wider)\n        ]\n      });\n    }\n    \n    // Different challenges for each path (with boost zones)\n    for (let i = 0; i < 20; i++) {\n      if (i === 0 || i === 5 || i === 15) {\n        // Add boost zones at key points\n        addSegment({\n          lanes: [\n            { offset: -12, width: 6 },\n            { offset: 0, width: 7 },\n            { offset: 12, width: 6 }\n          ]\n        });\n      } else if (i === 10) {\n        // Jump in center only\n        addSegment({\n          lanes: [\n            { offset: -12, width: 6 },\n            { offset: 0, width: 7, isGap: true },\n            { offset: 12, width: 6 }\n          ]\n        });\n      } else {\n        // Left: tight turns, Center: straight, Right: wide turns\n        addSegment({\n          lanes: [\n            { offset: -12, width: 6 },\n            { offset: 0, width: 7 },\n            { offset: 12, width: 6 }\n          ],\n          yawDelta: i < 10 ? Math.PI / 120 : -Math.PI / 120  // Gentler turning\n        });\n      }\n    }\n    \n    // Merge three paths back\n    for (let i = 0; i < 5; i++) {\n      const factor = 1 - (i / 5);\n      addSegment({\n        lanes: [\n          { offset: -12 * factor, width: 5 },\n          { offset: 0, width: 6 },\n          { offset: 12 * factor, width: 5 }\n        ]\n      });\n    }\n    \n    // Final banked corner to finish\n    for (let i = 0; i < 5; i++) {\n      addSegment({ rollDelta: Math.PI / 100 });\n    }\n    for (let i = 0; i < 20; i++) {\n      addSegment({ \n        yawDelta: Math.PI / 40,\n        rollDelta: 0\n      });\n    }\n    for (let i = 0; i < 5; i++) {\n      addSegment({ rollDelta: -Math.PI / 100 });\n    }\n    \n    // Sprint to finish\n    for (let i = 0; i < 20; i++) {\n      addSegment({\n        yawDelta: 0,\n        pitchDelta: 0,\n        rollDelta: 0,\n        isFinishLine: (i === 19)\n      });\n    }\n  }\n};"],"names":["Level9","addSegment","i","j","narrow","factor"],"mappings":"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"}