{"version":3,"file":"Level9-Bsj-2uCR.js","sources":["../../src/tracks/levels/Level9.js"],"sourcesContent":["/**\r\n * Level 9 - Cyberflow\r\n * Rhythmic cyberpunk track with flowing patterns\r\n */\r\n\r\nexport default {\r\n  name: \"Cyberflow\",\r\n  description: \"Flow through digital rhythms and cyber patterns\",\r\n  difficulty: 4,\r\n  shader: \"tech-grid\", // Rhythmic grid patterns\r\n  skybox: \"neon-city\", // Cyberpunk rhythm vibes\r\n  \r\n  generateTrack(addSegment) {\r\n    // Starting section\r\n    for (let i = 0; i < 20; i++) {\r\n      addSegment({\r\n        yawDelta: 0,\r\n        pitchDelta: 0,\r\n        rollDelta: 0,\r\n        isStartLine: (i === 0)\r\n      });\r\n    }\r\n    \r\n    // Rhythmic hills section - like a pump track (FIXED: gentler angles + boost)\r\n    for (let j = 0; j < 3; j++) {\r\n      // Boost before climbing\r\n      for (let i = 0; i < 2; i++) {\r\n        addSegment({ isBoost: true });\r\n      }\r\n      // Up (gentler angle)\r\n      for (let i = 0; i < 10; i++) {\r\n        addSegment({ pitchDelta: Math.PI / 80 }); // Reduced from /60 to /80\r\n      }\r\n      // Down\r\n      for (let i = 0; i < 10; i++) {\r\n        addSegment({ pitchDelta: -Math.PI / 80 });\r\n      }\r\n    }\r\n    \r\n    // Fast left sweeper\r\n    for (let i = 0; i < 30; i++) {\r\n      addSegment({ \r\n        yawDelta: -Math.PI / 60,\r\n        rollDelta: i < 15 ? -Math.PI / 300 : Math.PI / 300  // Bank in then out\r\n      });\r\n    }\r\n    \r\n    // Technical section - alternating narrow/wide\r\n    for (let i = 0; i < 40; i++) {\r\n      const narrow = (Math.floor(i / 5) % 2) === 0;\r\n      addSegment({\r\n        lanes: [{ offset: 0, width: narrow ? 6 : 12 }],\r\n        yawDelta: Math.sin(i * 0.2) * Math.PI / 80  // Weaving\r\n      });\r\n    }\r\n    \r\n    // Jump sequence with rhythm\r\n    for (let j = 0; j < 3; j++) {\r\n      // Approach\r\n      for (let i = 0; i < 6; i++) {\r\n        addSegment({ pitchDelta: Math.PI / 50 });\r\n      }\r\n      // Gap (increasing size)\r\n      for (let i = 0; i < 2 + j; i++) {\r\n        addSegment({ isGap: true });\r\n      }\r\n      // Landing\r\n      for (let i = 0; i < 6; i++) {\r\n        addSegment({ pitchDelta: -Math.PI / 50 });\r\n      }\r\n      // Recovery straight\r\n      for (let i = 0; i < 8; i++) {\r\n        addSegment({ yawDelta: 0, pitchDelta: 0 });\r\n      }\r\n    }\r\n    \r\n    // Downhill slalom section\r\n    for (let i = 0; i < 50; i++) {\r\n      addSegment({\r\n        yawDelta: Math.sin(i * 0.25) * Math.PI / 40,  // S-turns\r\n        pitchDelta: -Math.PI / 200,  // Gentle downhill\r\n        rollDelta: Math.cos(i * 0.25) * Math.PI / 200  // Slight banking with turns\r\n      });\r\n    }\r\n    \r\n    // FIXED: Boost before triple split to maintain momentum\r\n    for (let i = 0; i < 5; i++) {\r\n      addSegment({ isBoost: true });\r\n    }\r\n    \r\n    // Triple split path - three choices\r\n    for (let i = 0; i < 5; i++) {\r\n      const factor = i / 5;\r\n      addSegment({\r\n        lanes: [\r\n          { offset: -12 * factor, width: 6 },  // Left path (wider)\r\n          { offset: 0, width: 7 },             // Center path (wider) \r\n          { offset: 12 * factor, width: 6 }    // Right path (wider)\r\n        ]\r\n      });\r\n    }\r\n    \r\n    // Different challenges for each path (with boost zones)\r\n    for (let i = 0; i < 20; i++) {\r\n      if (i === 0 || i === 5 || i === 15) {\r\n        // Add boost zones at key points\r\n        addSegment({\r\n          lanes: [\r\n            { offset: -12, width: 6, isBoost: true },\r\n            { offset: 0, width: 7, isBoost: true },\r\n            { offset: 12, width: 6, isBoost: true }\r\n          ]\r\n        });\r\n      } else if (i === 10) {\r\n        // Jump in center only\r\n        addSegment({\r\n          lanes: [\r\n            { offset: -12, width: 6 },\r\n            { offset: 0, width: 7, isGap: true },\r\n            { offset: 12, width: 6 }\r\n          ]\r\n        });\r\n      } else {\r\n        // Left: tight turns, Center: straight, Right: wide turns\r\n        addSegment({\r\n          lanes: [\r\n            { offset: -12, width: 6 },\r\n            { offset: 0, width: 7 },\r\n            { offset: 12, width: 6 }\r\n          ],\r\n          yawDelta: i < 10 ? Math.PI / 120 : -Math.PI / 120  // Gentler turning\r\n        });\r\n      }\r\n    }\r\n    \r\n    // Merge three paths back\r\n    for (let i = 0; i < 5; i++) {\r\n      const factor = 1 - (i / 5);\r\n      addSegment({\r\n        lanes: [\r\n          { offset: -12 * factor, width: 5 },\r\n          { offset: 0, width: 6 },\r\n          { offset: 12 * factor, width: 5 }\r\n        ]\r\n      });\r\n    }\r\n    \r\n    // Final banked corner to finish\r\n    for (let i = 0; i < 5; i++) {\r\n      addSegment({ rollDelta: Math.PI / 100 });\r\n    }\r\n    for (let i = 0; i < 20; i++) {\r\n      addSegment({ \r\n        yawDelta: Math.PI / 40,\r\n        rollDelta: 0\r\n      });\r\n    }\r\n    for (let i = 0; i < 5; i++) {\r\n      addSegment({ rollDelta: -Math.PI / 100 });\r\n    }\r\n    \r\n    // Sprint to finish\r\n    for (let i = 0; i < 20; i++) {\r\n      addSegment({\r\n        yawDelta: 0,\r\n        pitchDelta: 0,\r\n        rollDelta: 0,\r\n        isFinishLine: (i === 19)\r\n      });\r\n    }\r\n  }\r\n};"],"names":["Level9","addSegment","i","j","narrow","factor"],"mappings":"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"}