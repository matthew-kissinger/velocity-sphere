{"version":3,"file":"Patterns-BDQAEetp.js","sources":["../../src/tracks/generation/helpers/Patterns.js"],"sourcesContent":["/**\r\n * Minimal, merge-friendly track pattern helpers.\r\n * All helpers assume addSegment from TrackBuilder.generateSegments.\r\n * Safe ranges are enforced via defaults and conservative steps.\r\n */\r\n\r\n/**\r\n * Add a cambered S-curve: left then right with proper banking.\r\n * Safe defaults: yaw per step ≈ π/60, bank steps ±π/40 capped at entry/exit only.\r\n */\r\nexport function addCamberedSCurve(addSegment, {\r\n  leftSegments = 20,\r\n  rightSegments = 20,\r\n  turnRate = Math.PI / 60,\r\n  bankStep = Math.PI / 40,\r\n  bankStepsAtEdges = 4,\r\n  width = 14\r\n} = {}) {\r\n  // Left: bank in\r\n  for (let i = 0; i < bankStepsAtEdges; i++) addSegment({ rollDelta: -bankStep, lanes: [{ offset: 0, width }] });\r\n  // Left: constant bank, steady yaw\r\n  for (let i = 0; i < leftSegments; i++) addSegment({ yawDelta: -turnRate, lanes: [{ offset: 0, width }] });\r\n  // Left: bank out\r\n  for (let i = 0; i < bankStepsAtEdges; i++) addSegment({ rollDelta: bankStep, lanes: [{ offset: 0, width }] });\r\n\r\n  // Right: bank in\r\n  for (let i = 0; i < bankStepsAtEdges; i++) addSegment({ rollDelta: bankStep, lanes: [{ offset: 0, width }] });\r\n  // Right: constant bank, steady yaw\r\n  for (let i = 0; i < rightSegments; i++) addSegment({ yawDelta: turnRate, lanes: [{ offset: 0, width }] });\r\n  // Right: bank out\r\n  for (let i = 0; i < bankStepsAtEdges; i++) addSegment({ rollDelta: -bankStep, lanes: [{ offset: 0, width }] });\r\n}\r\n\r\n/**\r\n * Rolling wave climb: small up/down undulations with brief boosts at wave starts.\r\n * Safe defaults: |pitchStep| ≤ π/80.\r\n */\r\nexport function addRollingWaveClimb(addSegment, {\r\n  waves = 3,\r\n  upLen = 8,\r\n  downLen = 8,\r\n  pitchStep = Math.PI / 80,\r\n  boostOnFirst = 2,\r\n  width = 14\r\n} = {}) {\r\n  for (let w = 0; w < waves; w++) {\r\n    // Seed speed at the start of each wave\r\n    for (let i = 0; i < upLen; i++) {\r\n      addSegment({ pitchDelta: pitchStep, isBoost: i < boostOnFirst, lanes: [{ offset: 0, width }] });\r\n    }\r\n    for (let i = 0; i < downLen; i++) {\r\n      addSegment({ pitchDelta: -pitchStep, lanes: [{ offset: 0, width }] });\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * Symmetric split → parallel → merge scaffold.\r\n * Safe defaults: width ≥ 6, fixed offsets in parallel block for merging.\r\n */\r\nexport function addSplitMerge(addSegment, {\r\n  split = 10,\r\n  parallel = 30,\r\n  merge = 10,\r\n  offset = 12,\r\n  width = 12\r\n} = {}) {\r\n  // Split\r\n  for (let i = 0; i < split; i++) {\r\n    const f = (i + 1) / split;\r\n    addSegment({ lanes: [\r\n      { offset: -offset * f, width },\r\n      { offset:  offset * f, width }\r\n    ] });\r\n  }\r\n  // Parallel (keep properties stable for geometry merging)\r\n  for (let i = 0; i < parallel; i++) {\r\n    addSegment({ lanes: [\r\n      { offset: -offset, width },\r\n      { offset:  offset, width }\r\n    ] });\r\n  }\r\n  // Merge\r\n  for (let i = 0; i < merge; i++) {\r\n    const f = 1 - (i + 1) / merge;\r\n    addSegment({ lanes: [\r\n      { offset: -offset * f, width },\r\n      { offset:  offset * f, width }\r\n    ] });\r\n  }\r\n}\r\n\r\nexport default { addCamberedSCurve, addRollingWaveClimb, addSplitMerge };\r\n\r\n/**\r\n * Long controlled descent. Negative pitchStep accumulates to maintain momentum.\r\n */\r\nexport function addMegaDrop(addSegment, {\r\n  length = 20,\r\n  pitchStep = Math.PI/100, // positive pitch = downwards\r\n  width = 12\r\n} = {}) {\r\n  for (let i = 0; i < length; i++) addSegment({ pitchDelta: pitchStep, lanes: [{ offset: 0, width }] });\r\n}\r\n\r\n/**\r\n * Banked constant-radius turn with clean bank-in/out. direction ∈ {-1, 1}.\r\n */\r\nexport function addBankedTurn(addSegment, {\r\n  segments = 30,\r\n  yawPerStep = Math.PI/60,\r\n  bankSteps = 4,\r\n  bankStep = Math.PI/40,\r\n  direction = 1,\r\n  width = 12\r\n} = {}) {\r\n  for (let i = 0; i < bankSteps; i++) addSegment({ rollDelta: direction * bankStep, lanes: [{ offset: 0, width }] });\r\n  for (let i = 0; i < segments; i++) addSegment({ yawDelta: direction * yawPerStep, lanes: [{ offset: 0, width }] });\r\n  for (let i = 0; i < bankSteps; i++) addSegment({ rollDelta: -direction * bankStep, lanes: [{ offset: 0, width }] });\r\n}\r\n\r\n/**\r\n * Classic ramp-gap-landing with optional wide runout to ease landings.\r\n */\r\nexport function addRampGapLanding(addSegment, {\r\n  up = 6,\r\n  gap = 6,\r\n  down = 6,\r\n  boostOnFirst = 2,\r\n  width = 12,\r\n  landingLen = 10,\r\n  landingWidth = 16\r\n} = {}) {\r\n  // Ramp up = negative pitch (tilt the forward vector upward)\r\n  for (let i = 0; i < up; i++) addSegment({ pitchDelta: -Math.PI/90, isBoost: i < boostOnFirst, lanes: [{ offset: 0, width }] });\r\n  for (let i = 0; i < gap; i++) addSegment({ isGap: true });\r\n  // Ramp down = positive pitch (tilt forward vector downward)\r\n  for (let i = 0; i < down; i++) addSegment({ pitchDelta: Math.PI/90, lanes: [{ offset: 0, width }] });\r\n  for (let i = 0; i < landingLen; i++) addSegment({ lanes: [{ offset: 0, width: landingWidth }] });\r\n}\r\n\r\n/**\r\n * Step-down cascade sequence with small interleaved turns to vary lines.\r\n */\r\nexport function addStepDownCascade(addSegment, {\r\n  repeats = 3,\r\n  drop = 5,\r\n  gap = 3,\r\n  rise = 5,\r\n  interTurn = 12,\r\n  turnDir = 1,\r\n  width = 12\r\n} = {}) {\r\n  for (let r = 0; r < repeats; r++) {\r\n    // drop = positive pitch (down)\r\n    for (let i = 0; i < drop; i++) addSegment({ pitchDelta: Math.PI/100, lanes: [{ offset: 0, width }] });\r\n    for (let i = 0; i < gap; i++) addSegment({ isGap: true });\r\n    // rise = negative pitch (up)\r\n    for (let i = 0; i < rise; i++) addSegment({ pitchDelta: -Math.PI/100, lanes: [{ offset: 0, width }] });\r\n    for (let i = 0; i < 2; i++) addSegment({ rollDelta: turnDir * Math.PI/40, lanes: [{ offset: 0, width }] });\r\n    for (let i = 0; i < interTurn; i++) addSegment({ yawDelta: turnDir * Math.PI/60, lanes: [{ offset: 0, width }] });\r\n    for (let i = 0; i < 2; i++) addSegment({ rollDelta: -turnDir * Math.PI/40, lanes: [{ offset: 0, width }] });\r\n    turnDir *= -1; // alternate\r\n  }\r\n}\r\n\r\n/**\r\n * Spiral with optional descent. Keeps constant bank through yaw, banks at edges only.\r\n */\r\nexport function addSpiralDescent(addSegment, {\r\n  turns = 1,\r\n  segmentsPerTurn = 36,\r\n  direction = 1,\r\n  bankStep = Math.PI/40,\r\n  width = 12,\r\n  pitchPerStep = Math.PI/200 // positive = downward\r\n} = {}) {\r\n  const totalSegments = Math.floor(turns * segmentsPerTurn);\r\n  for (let i = 0; i < 5; i++) addSegment({ rollDelta: direction * bankStep, lanes: [{ offset: 0, width }] });\r\n  for (let i = 0; i < totalSegments; i++) {\r\n    addSegment({ yawDelta: direction * (2*Math.PI / segmentsPerTurn), pitchDelta: pitchPerStep, lanes: [{ offset: 0, width }] });\r\n  }\r\n  for (let i = 0; i < 5; i++) addSegment({ rollDelta: -direction * bankStep, lanes: [{ offset: 0, width }] });\r\n}\r\n\r\nexport const AdvancedPatterns = {\r\n  addMegaDrop,\r\n  addBankedTurn,\r\n  addRampGapLanding,\r\n  addStepDownCascade,\r\n  addSpiralDescent,\r\n};\r\n\r\n/**\r\n * Steep chute descent for big vertical loss quickly.\r\n */\r\nexport function addChuteDescent(addSegment, {\r\n  length = 16,\r\n  pitchStep = Math.PI/90, // positive = downward\r\n  width = 12\r\n} = {}) {\r\n  for (let i = 0; i < length; i++) addSegment({ pitchDelta: pitchStep, lanes: [{ offset: 0, width }] });\r\n}\r\n\r\n/**\r\n * Wide flat runout to make landings forgiving and merge-friendly.\r\n */\r\nexport function addWideRunout(addSegment, {\r\n  length = 16,\r\n  width = 18\r\n} = {}) {\r\n  for (let i = 0; i < length; i++) addSegment({ lanes: [{ offset: 0, width }] });\r\n}\r\n\r\nAdvancedPatterns.addChuteDescent = addChuteDescent;\r\nAdvancedPatterns.addWideRunout = addWideRunout;\r\n\r\n\r\n\r\n"],"names":["addMegaDrop","addSegment","length","pitchStep","width","i","addBankedTurn","segments","yawPerStep","bankSteps","bankStep","direction","addRampGapLanding","up","gap","down","boostOnFirst","landingLen","landingWidth","addStepDownCascade","repeats","drop","rise","interTurn","turnDir","r","addSpiralDescent","turns","segmentsPerTurn","pitchPerStep","totalSegments","AdvancedPatterns","addChuteDescent","addWideRunout"],"mappings":"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"}