{"version":3,"mappings":"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","names":["TrackGenerationStrategy","trackBuilder","config","THREE.MeshStandardMaterial","count","colors","i","hue","color","THREE.Color","SegmentBasedStrategy","levelData","SplineBasedStrategy","finalConfig","curve","THREE.CatmullRomCurve3","FullSplineStrategy","__vitePreload","ExtrudeBasedStrategy","shape","THREE.Shape","width","wallHeight","FullExtrudeStrategy","ProceduralStrategy","seed","s","TrackGenerationFactory","type","StrategyClass","__publicField"],"ignoreList":[],"sources":["../../src/tracks/generation/TrackGenerationStrategies.js"],"sourcesContent":["/**\r\n * TrackGenerationStrategies - Different methods for generating track geometry\r\n * \r\n * This module provides various strategies for creating racing tracks:\r\n * - SegmentBased: Traditional segment-by-segment approach (current method)\r\n * - SplineBased: Smooth curves using CatmullRomCurve3\r\n * - ExtrudeBased: Complex cross-sections using ExtrudeGeometry\r\n * - Procedural: Algorithmic generation for infinite/random tracks\r\n */\r\n\r\nimport * as THREE from 'three';\r\n\r\n/**\r\n * Base class for all track generation strategies\r\n */\r\nexport class TrackGenerationStrategy {\r\n  constructor(trackBuilder) {\r\n    this.trackBuilder = trackBuilder;\r\n    this.scene = trackBuilder.scene;\r\n    this.physicsWorld = trackBuilder.physicsWorld;\r\n  }\r\n\r\n  /**\r\n   * Generate track geometry and physics\r\n   * @param {Object} config - Strategy-specific configuration\r\n   * @returns {Object} Track data including meshes, physics bodies, and metadata\r\n   */\r\n  generate(config) {\r\n    throw new Error('generate() must be implemented by subclass');\r\n  }\r\n\r\n  /**\r\n   * Common utility to create track material with vertex colors\r\n   */\r\n  createTrackMaterial() {\r\n    return new THREE.MeshStandardMaterial({\r\n      vertexColors: true,\r\n      roughness: 0.8,\r\n      metalness: 0.1,\r\n      map: this.trackBuilder.trackTexture\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Generate rainbow colors for track segments\r\n   */\r\n  generateRainbowColors(count) {\r\n    const colors = [];\r\n    for (let i = 0; i < count; i++) {\r\n      const hue = (i / count) * 0.65; // 0 to 0.65 for nice rainbow\r\n      const color = new THREE.Color();\r\n      color.setHSL(hue, 1.0, 0.5);\r\n      colors.push(color);\r\n    }\r\n    return colors;\r\n  }\r\n}\r\n\r\n/**\r\n * Traditional segment-based track generation (current method)\r\n */\r\nexport class SegmentBasedStrategy extends TrackGenerationStrategy {\r\n  generate(levelData) {\r\n    // This will use the existing segment generation logic\r\n    return this.trackBuilder.buildTrackFromSegments(levelData);\r\n  }\r\n}\r\n\r\n/**\r\n * Spline-based track generation for smooth curves\r\n */\r\nexport class SplineBasedStrategy extends TrackGenerationStrategy {\r\n  constructor(trackBuilder) {\r\n    super(trackBuilder);\r\n    this.defaultConfig = {\r\n      segments: 200,\r\n      width: 10,\r\n      thickness: 0.6,\r\n      closed: true,\r\n      banking: true,\r\n      bankingFactor: 0.5,\r\n      widthVariation: false,\r\n      elevationProfile: null\r\n    };\r\n  }\r\n\r\n  generate(config) {\r\n    const finalConfig = { ...this.defaultConfig, ...config };\r\n    \r\n    if (!config.controlPoints || config.controlPoints.length < 3) {\r\n      throw new Error('SplineBasedStrategy requires at least 3 control points');\r\n    }\r\n\r\n    // Create spline from control points\r\n    const curve = new THREE.CatmullRomCurve3(\r\n      config.controlPoints,\r\n      finalConfig.closed,\r\n      'centripetal' // smoother interpolation\r\n    );\r\n\r\n    // Generate track geometry\r\n    const trackData = this.generateTrackFromSpline(curve, finalConfig);\r\n    \r\n    return trackData;\r\n  }\r\n\r\n  async generate(config) {\r\n    // Dynamically import the full implementation\r\n    const { SplineBasedStrategy: FullSplineStrategy } = await import('./SplineBasedStrategy.js');\r\n    const strategy = new FullSplineStrategy(this.trackBuilder);\r\n    return strategy.generate(config);\r\n  }\r\n}\r\n\r\n/**\r\n * Extrude-based track generation for complex cross-sections\r\n */\r\nexport class ExtrudeBasedStrategy extends TrackGenerationStrategy {\r\n  constructor(trackBuilder) {\r\n    super(trackBuilder);\r\n    this.defaultConfig = {\r\n      steps: 200,\r\n      bevelEnabled: false,\r\n      closed: true,\r\n      crossSection: null // Will use default if not provided\r\n    };\r\n  }\r\n\r\n  generate(config) {\r\n    const finalConfig = { ...this.defaultConfig, ...config };\r\n    \r\n    if (!config.path) {\r\n      throw new Error('ExtrudeBasedStrategy requires a path (curve)');\r\n    }\r\n\r\n    // Create or use provided cross-section shape\r\n    const shape = finalConfig.crossSection || this.createDefaultCrossSection();\r\n    \r\n    // Generate extruded track\r\n    const trackData = this.generateExtrudedTrack(shape, config.path, finalConfig);\r\n    \r\n    return trackData;\r\n  }\r\n\r\n  createDefaultCrossSection() {\r\n    const shape = new THREE.Shape();\r\n    const width = 10;\r\n    const wallHeight = 0.5;\r\n    \r\n    // Track surface with raised edges\r\n    shape.moveTo(-width/2, 0);\r\n    shape.lineTo(-width/2, wallHeight);\r\n    shape.lineTo(-width/2 + 0.5, wallHeight);\r\n    shape.lineTo(-width/2 + 0.5, 0.1);\r\n    shape.lineTo(width/2 - 0.5, 0.1);\r\n    shape.lineTo(width/2 - 0.5, wallHeight);\r\n    shape.lineTo(width/2, wallHeight);\r\n    shape.lineTo(width/2, 0);\r\n    shape.closePath();\r\n    \r\n    return shape;\r\n  }\r\n\r\n  async generate(config) {\r\n    // Dynamically import the full implementation\r\n    const { ExtrudeGeometryStrategy: FullExtrudeStrategy } = await import('./ExtrudeGeometryStrategy.js');\r\n    const strategy = new FullExtrudeStrategy(this.trackBuilder);\r\n    return strategy.generate(config);\r\n  }\r\n}\r\n\r\n/**\r\n * Procedural track generation for algorithmic/infinite tracks\r\n */\r\nexport class ProceduralStrategy extends TrackGenerationStrategy {\r\n  constructor(trackBuilder) {\r\n    super(trackBuilder);\r\n    this.defaultConfig = {\r\n      seed: Date.now(),\r\n      length: 200,\r\n      complexity: 0.5,\r\n      elevationVariance: 20,\r\n      widthVariance: 0.3,\r\n      cornerSharpness: 0.5\r\n    };\r\n  }\r\n\r\n  generate(config) {\r\n    const finalConfig = { ...this.defaultConfig, ...config };\r\n    \r\n    // Initialize seeded random\r\n    this.rng = this.createSeededRandom(finalConfig.seed);\r\n    \r\n    // Generate track procedurally\r\n    const trackData = this.generateProceduralTrack(finalConfig);\r\n    \r\n    return trackData;\r\n  }\r\n\r\n  createSeededRandom(seed) {\r\n    // Simple seeded random number generator\r\n    let s = seed;\r\n    return () => {\r\n      s = Math.sin(s) * 10000;\r\n      return s - Math.floor(s);\r\n    };\r\n  }\r\n\r\n  generateProceduralTrack(config) {\r\n    // This will be implemented in ProceduralStrategy.js\r\n    throw new Error('Not yet implemented - see ProceduralStrategy.js');\r\n  }\r\n}\r\n\r\n/**\r\n * Factory for creating track generation strategies\r\n */\r\nexport class TrackGenerationFactory {\r\n  static strategies = {\r\n    'segment': SegmentBasedStrategy,\r\n    'spline': SplineBasedStrategy,\r\n    'extrude': ExtrudeBasedStrategy,\r\n    'procedural': ProceduralStrategy\r\n  };\r\n\r\n  static createStrategy(type, trackBuilder) {\r\n    const StrategyClass = this.strategies[type];\r\n    if (!StrategyClass) {\r\n      throw new Error(`Unknown track generation strategy: ${type}`);\r\n    }\r\n    return new StrategyClass(trackBuilder);\r\n  }\r\n\r\n  static getAvailableStrategies() {\r\n    return Object.keys(this.strategies);\r\n  }\r\n}"],"file":"assets/TrackGenerationStrategies-BLXy5tAE.js"}