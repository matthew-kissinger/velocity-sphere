{"version":3,"file":"arctic-wind-BKL7AoUX.js","sources":["../../src/skyboxes/arctic-wind.js"],"sourcesContent":["/**\n * Arctic Wind Skybox\n * Bright arctic atmosphere with blowing snow and ice crystals\n * High contrast with ice-surface shader for excellent visibility\n */\n\nexport default {\n  name: 'arctic-wind',\n  description: 'Bright arctic sky with wind-blown snow and ice crystals',\n  author: 'Circuit Beta Upgrade Team',\n  version: '1.0.0',\n  tags: ['arctic', 'ice', 'snow', 'bright', 'wind'],\n  mood: 'crisp',\n  \n  uniforms: {\n    snowIntensity: { value: 0.7 },\n    windStrength: { value: 0.5 },\n    crystalSparkle: { value: 0.8 }\n  },\n  \n  vertexShader: `\n    varying vec3 vWorldPosition;\n    varying vec3 vPosition;\n    \n    void main() {\n      vec4 worldPosition = modelMatrix * vec4(position, 1.0);\n      vWorldPosition = worldPosition.xyz;\n      vPosition = position;\n      gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\n    }\n  `,\n  \n  fragmentShader: `\n    uniform float time;\n    uniform float snowIntensity;\n    uniform float windStrength;\n    uniform float crystalSparkle;\n    \n    varying vec3 vWorldPosition;\n    varying vec3 vPosition;\n    \n    // Hash functions for randomness\n    float hash(float n) {\n      return fract(sin(n) * 43758.5453123);\n    }\n    \n    float hash2(vec2 p) {\n      return fract(sin(dot(p, vec2(127.1, 311.7))) * 43758.5453123);\n    }\n    \n    vec3 hash3(vec3 p) {\n      vec3 h = vec3(\n        dot(p, vec3(127.1, 311.7, 74.7)),\n        dot(p, vec3(269.5, 183.3, 246.1)),\n        dot(p, vec3(113.5, 271.9, 124.6))\n      );\n      return fract(sin(h) * 43758.5453123);\n    }\n    \n    // Simple noise for wind patterns\n    float noise(vec2 p) {\n      vec2 i = floor(p);\n      vec2 f = fract(p);\n      vec2 u = f * f * (3.0 - 2.0 * f);\n      \n      return mix(\n        mix(hash2(i + vec2(0.0, 0.0)), hash2(i + vec2(1.0, 0.0)), u.x),\n        mix(hash2(i + vec2(0.0, 1.0)), hash2(i + vec2(1.0, 1.0)), u.x),\n        u.y\n      );\n    }\n    \n    // Blowing snow particles\n    float snowParticles(vec3 pos, float t) {\n      // Wind movement\n      pos.x += t * windStrength * 2.0;\n      pos.z += sin(t * 0.3) * windStrength;\n      \n      vec3 id = floor(pos * 10.0);\n      vec3 f = fract(pos * 10.0);\n      vec3 rnd = hash3(id);\n      \n      // Particle position within cell\n      vec3 particlePos = rnd;\n      particlePos.x += sin(t * 2.0 + rnd.y * 6.28) * 0.1;\n      particlePos.y += cos(t * 1.5 + rnd.z * 6.28) * 0.1;\n      \n      float dist = length(f - particlePos);\n      float particle = smoothstep(0.1, 0.0, dist);\n      \n      return particle * snowIntensity;\n    }\n    \n    void main() {\n      vec3 direction = normalize(vPosition);\n      float height = direction.y;\n      \n      // Bright arctic sky gradient\n      vec3 skyTop = vec3(0.85, 0.9, 0.95);\n      vec3 skyHorizon = vec3(0.9, 0.92, 0.95);\n      vec3 skyBottom = vec3(0.8, 0.82, 0.85);\n      \n      // Sky color based on height\n      vec3 skyColor = mix(skyBottom, skyHorizon, smoothstep(-1.0, 0.0, height));\n      skyColor = mix(skyColor, skyTop, smoothstep(0.0, 1.0, height));\n      \n      // Sun glow for brightness\n      vec3 sunDir = normalize(vec3(0.3, 0.4, 0.5));\n      float sunDot = dot(direction, sunDir);\n      float sunGlow = pow(max(sunDot, 0.0), 50.0);\n      vec3 sunColor = vec3(1.0, 0.98, 0.95);\n      skyColor += sunColor * sunGlow * 0.5;\n      \n      // Arctic haze/mist\n      float mist = noise(direction.xz * 3.0 + time * 0.1) * 0.3;\n      vec3 mistColor = vec3(0.95, 0.97, 1.0);\n      skyColor = mix(skyColor, mistColor, mist * smoothstep(0.2, -0.2, height));\n      \n      // Blowing snow effect\n      float snow = 0.0;\n      for (int i = 0; i < 3; i++) {\n        float layerSpeed = 1.0 + float(i) * 0.5;\n        vec3 snowPos = vWorldPosition * (0.5 + float(i) * 0.3);\n        snow += snowParticles(snowPos, time * layerSpeed) * (1.0 / float(i + 1));\n      }\n      skyColor = mix(skyColor, vec3(1.0), snow * 0.8);\n      \n      // Ice crystal sparkles\n      vec2 sparkleCoord = direction.xy * 50.0;\n      float sparkleNoise = hash2(floor(sparkleCoord));\n      float sparkle = 0.0;\n      \n      if (sparkleNoise > 0.95) {\n        float sparklePhase = fract(time * 2.0 + sparkleNoise * 10.0);\n        sparkle = sin(sparklePhase * 3.14159) * crystalSparkle;\n      }\n      \n      skyColor += vec3(1.0) * sparkle * 0.3;\n      \n      // Ground reflection\n      if (height < -0.3) {\n        float groundBlend = smoothstep(-0.3, -1.0, height);\n        vec3 iceColor = vec3(0.88, 0.92, 0.96);\n        skyColor = mix(skyColor, iceColor, groundBlend * 0.5);\n      }\n      \n      // Ensure high brightness for visibility\n      skyColor = max(skyColor, vec3(0.7));\n      \n      gl_FragColor = vec4(skyColor, 1.0);\n    }\n  `\n};"],"names":["arcticWind"],"mappings":"AAMA,MAAAA,EAAe,CACb,KAAM,cACN,YAAa,0DACb,OAAQ,4BACR,QAAS,QACT,KAAM,CAAC,SAAU,MAAO,OAAQ,SAAU,MAAM,EAChD,KAAM,QAEN,SAAU,CACR,cAAe,CAAE,MAAO,EAAG,EAC3B,aAAc,CAAE,MAAO,EAAG,EAC1B,eAAgB,CAAE,MAAO,EAAG,CAChC,EAEE,aAAc;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAYd,eAAgwHlB"}