{"version":3,"file":"aurora-zen-CwhGItOP.js","sources":["../../src/shaders/aurora-zen.js"],"sourcesContent":["/**\r\n * Aurora Zen Shader\r\n * Gentle, flowing northern lights effect\r\n * Peaceful and meditative aurora patterns\r\n */\r\n\r\nexport default {\r\n  name: 'aurora-zen',\r\n  description: 'Gentle flowing aurora borealis for zen racing',\r\n  author: 'Velocity Sphere Team',\r\n  version: '1.0.0',\r\n  tags: ['aurora', 'zen', 'peaceful', 'circuit-tranquil'],\r\n  performance: 'good',\r\n  \r\n  uniforms: {\r\n    auroraColor1: { value: [0.1, 0.8, 0.6] },\r\n    auroraColor2: { value: [0.3, 0.5, 0.9] },\r\n    auroraColor3: { value: [0.6, 0.3, 0.8] },\r\n    baseColor: { value: [0.05, 0.05, 0.1] },\r\n    flowSpeed: { value: 0.2 },\r\n    waveScale: { value: 0.03 },\r\n    intensity: { value: 0.7 }\r\n  },\r\n  \r\n  vertexShader: `\r\n    varying vec3 vPosition;\r\n    varying vec3 vNormal;\r\n    varying vec2 vUv;\r\n    varying vec3 vWorldPosition;\r\n    \r\n    void main() {\r\n      vPosition = position;\r\n      vNormal = normalize(normalMatrix * normal);\r\n      vUv = uv;\r\n      \r\n      vec4 worldPosition = modelMatrix * vec4(position, 1.0);\r\n      vWorldPosition = worldPosition.xyz;\r\n      \r\n      gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\r\n    }\r\n  `,\r\n  \r\n  fragmentShader: `\r\n    uniform float time;\r\n    uniform vec3 auroraColor1;\r\n    uniform vec3 auroraColor2;\r\n    uniform vec3 auroraColor3;\r\n    uniform vec3 baseColor;\r\n    uniform float flowSpeed;\r\n    uniform float waveScale;\r\n    uniform float intensity;\r\n    \r\n    varying vec3 vPosition;\r\n    varying vec3 vNormal;\r\n    varying vec2 vUv;\r\n    varying vec3 vWorldPosition;\r\n    \r\n    float noise(vec2 p) {\r\n      return sin(p.x) * sin(p.y);\r\n    }\r\n    \r\n    float fbm(vec2 p) {\r\n      float value = 0.0;\r\n      float amplitude = 0.5;\r\n      \r\n      for (int i = 0; i < 4; i++) {\r\n        value += amplitude * noise(p);\r\n        p *= 2.0;\r\n        amplitude *= 0.5;\r\n      }\r\n      \r\n      return value;\r\n    }\r\n    \r\n    float random(vec2 st) {\r\n      return fract(sin(dot(st.xy, vec2(12.9898, 78.233))) * 43758.5453123);\r\n    }\r\n    \r\n    vec3 aurora(vec2 p, float t) {\r\n      // Create flowing aurora bands\r\n      float wave1 = sin(p.x * waveScale + t * flowSpeed) * 0.5;\r\n      float wave2 = sin(p.x * waveScale * 1.5 + t * flowSpeed * 0.7) * 0.3;\r\n      float wave3 = sin(p.x * waveScale * 0.8 + t * flowSpeed * 1.2) * 0.4;\r\n      \r\n      float aurora = wave1 + wave2 + wave3;\r\n      aurora += fbm(p * waveScale * 2.0 + vec2(t * flowSpeed, 0.0)) * 0.5;\r\n      aurora = smoothstep(-1.0, 1.0, aurora);\r\n      \r\n      // Create color bands\r\n      vec3 color = baseColor;\r\n      float band1 = smoothstep(0.0, 0.4, aurora);\r\n      float band2 = smoothstep(0.3, 0.7, aurora);\r\n      float band3 = smoothstep(0.6, 1.0, aurora);\r\n      \r\n      color = mix(color, auroraColor1, band1 * intensity);\r\n      color = mix(color, auroraColor2, band2 * intensity * 0.8);\r\n      color = mix(color, auroraColor3, band3 * intensity * 0.6);\r\n      \r\n      return color;\r\n    }\r\n    \r\n    void main() {\r\n      // Get aurora effect\r\n      vec3 color = aurora(vWorldPosition.xz, time);\r\n      \r\n      // Add subtle pulsing\r\n      float pulse = sin(time * 0.5) * 0.1 + 1.0;\r\n      color *= pulse;\r\n      \r\n      // Add ground reflection\r\n      float reflection = 1.0 - abs(vNormal.y);\r\n      reflection = pow(reflection, 3.0);\r\n      color += aurora(vWorldPosition.xz * 1.2, time * 0.8) * reflection * 0.3;\r\n      \r\n      // Soft edge glow\r\n      float edgeGlow = length(vWorldPosition.xz) * 0.01;\r\n      edgeGlow = 1.0 - smoothstep(0.0, 1.0, edgeGlow);\r\n      color += (auroraColor1 + auroraColor2) * 0.5 * edgeGlow * 0.2;\r\n      \r\n      // Gentle lighting\r\n      float lighting = dot(vNormal, normalize(vec3(0.0, 1.0, 0.0))) * 0.3 + 0.7;\r\n      color *= lighting;\r\n      \r\n      // Add stars in dark areas\r\n      float stars = step(0.998, random(vWorldPosition.xz * 0.1));\r\n      color += vec3(stars) * (1.0 - aurora(vWorldPosition.xz, time).r);\r\n      \r\n      gl_FragColor = vec4(color, 1.0);\r\n    }\r\n  `\r\n};"],"names":["auroraZen"],"mappings":"AAMA,MAAAA,EAAe,CACb,KAAM,aACN,YAAa,gDACb,OAAQ,uBACR,QAAS,QACT,KAAM,CAAC,SAAU,MAAO,WAAY,kBAAkB,EACtD,YAAa,OAEb,SAAU,CACR,aAAc,CAAE,MAAO,CAAC,GAAK,GAAK,EAAG,CAAC,EACtC,aAAc,CAAE,MAAO,CAAC,GAAK,GAAK,EAAG,CAAC,EACtC,aAAc,CAAE,MAAO,CAAC,GAAK,GAAK,EAAG,CAAC,EACtC,UAAW,CAAE,MAAO,CAAC,IAAM,IAAM,EAAG,CAAC,EACrC,UAAW,CAAE,MAAO,EAAG,EACvB,UAAW,CAAE,MAAO,GAAI,EACxB,UAAW,CAAE,MAAO,EAAG,CAC3B,EAEE,aAAc;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAkBd,eAAgB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAwFlB"}