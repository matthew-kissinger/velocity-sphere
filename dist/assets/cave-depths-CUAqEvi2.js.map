{"version":3,"file":"cave-depths-CUAqEvi2.js","sources":["../../src/skyboxes/cave-depths.js"],"sourcesContent":["/**\n * Cave Depths Skybox\n * Underground cavern atmosphere with crystal glows\n * Pairs with crystal-surface shader for underground tracks\n */\n\nexport default {\n  name: 'cave-depths',\n  description: 'Deep cave atmosphere with bioluminescent crystals',\n  author: 'Circuit Beta AI Agent',\n  version: '1.0.0',\n  tags: ['cave', 'underground', 'crystal', 'dark', 'mysterious'],\n  mood: 'mysterious',\n  \n  uniforms: {\n    crystalGlow: { value: 0.6 },\n    caveDepth: { value: 0.8 },\n    luminescence: { value: 0.5 }\n  },\n  \n  vertexShader: `\n    varying vec3 vWorldPosition;\n    varying vec3 vPosition;\n    \n    void main() {\n      vec4 worldPosition = modelMatrix * vec4(position, 1.0);\n      vWorldPosition = worldPosition.xyz;\n      vPosition = position;\n      gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\n    }\n  `,\n  \n  fragmentShader: `\n    uniform float time;\n    uniform float crystalGlow;\n    uniform float caveDepth;\n    uniform float luminescence;\n    \n    varying vec3 vWorldPosition;\n    varying vec3 vPosition;\n    \n    // Hash for random crystal placement\n    float hash(vec2 p) {\n      return fract(sin(dot(p, vec2(127.1, 311.7))) * 43758.5453123);\n    }\n    \n    float hash3(vec3 p) {\n      return fract(sin(dot(p, vec3(127.1, 311.7, 543.21))) * 43758.5453123);\n    }\n    \n    // Voronoi for crystal clusters\n    float voronoi(vec3 p) {\n      vec3 n = floor(p);\n      vec3 f = fract(p);\n      \n      float minDist = 1.0;\n      vec3 minPoint;\n      \n      for(int z = -1; z <= 1; z++) {\n        for(int y = -1; y <= 1; y++) {\n          for(int x = -1; x <= 1; x++) {\n            vec3 neighbor = vec3(float(x), float(y), float(z));\n            vec3 randomPoint = vec3(\n              hash3(n + neighbor),\n              hash3(n + neighbor + vec3(17.0, 31.0, 47.0)),\n              hash3(n + neighbor + vec3(53.0, 67.0, 83.0))\n            );\n            vec3 diff = neighbor + randomPoint - f;\n            float dist = length(diff);\n            \n            if(dist < minDist) {\n              minDist = dist;\n              minPoint = randomPoint;\n            }\n          }\n        }\n      }\n      \n      return minDist;\n    }\n    \n    void main() {\n      vec3 direction = normalize(vWorldPosition);\n      float y = direction.y;\n      \n      // Cave gradient - darker at top (deep underground)\n      vec3 deepColor = vec3(0.02, 0.02, 0.03);    // Almost black\n      vec3 midColor = vec3(0.05, 0.05, 0.08);     // Dark blue-grey\n      vec3 floorColor = vec3(0.08, 0.06, 0.05);   // Cave floor brown\n      \n      vec3 color;\n      if (y > 0.2) {\n        // Cave ceiling\n        float factor = (y - 0.2) / 0.8;\n        color = mix(midColor, deepColor, factor * caveDepth);\n        \n        // Stalactites shadow\n        float stalactites = voronoi(direction * 20.0);\n        stalactites = smoothstep(0.1, 0.3, stalactites);\n        color *= stalactites;\n      } else if (y > -0.2) {\n        // Cave mid-section\n        float factor = (y + 0.2) / 0.4;\n        color = mix(floorColor, midColor, factor);\n      } else {\n        // Cave floor\n        color = floorColor * (1.0 + y * 0.3);\n        \n        // Stalagmites shadow\n        float stalagmites = voronoi(direction * 15.0);\n        stalagmites = smoothstep(0.1, 0.2, stalagmites);\n        color *= stalagmites * 0.8 + 0.2;\n      }\n      \n      // Crystal clusters with bioluminescence\n      vec3 crystalPos = direction * 10.0;\n      float crystals = voronoi(crystalPos);\n      crystals = 1.0 - smoothstep(0.0, 0.1, crystals);\n      \n      // Different crystal colors\n      float crystalType = hash3(floor(crystalPos * 2.0));\n      vec3 crystalColor;\n      if (crystalType < 0.33) {\n        crystalColor = vec3(0.3, 0.8, 1.0);  // Cyan crystals\n      } else if (crystalType < 0.66) {\n        crystalColor = vec3(0.8, 0.3, 1.0);  // Purple crystals\n      } else {\n        crystalColor = vec3(0.3, 1.0, 0.5);  // Green crystals\n      }\n      \n      // Pulsing glow effect\n      float pulse = sin(time * 2.0 + crystalType * 10.0) * 0.3 + 0.7;\n      crystalColor *= pulse * crystalGlow;\n      \n      // Add crystal glow to base color\n      color += crystalColor * crystals * luminescence;\n      \n      // Ambient cave glow from crystals\n      float ambientGlow = 0.0;\n      for(int i = 0; i < 3; i++) {\n        vec3 offset = vec3(\n          sin(float(i) * 2.1) * 5.0,\n          cos(float(i) * 1.7) * 3.0,\n          sin(float(i) * 3.3) * 4.0\n        );\n        float glow = 1.0 - length(direction - normalize(offset)) * 0.5;\n        glow = max(0.0, glow);\n        ambientGlow += glow * 0.1;\n      }\n      color += crystalColor * ambientGlow * 0.3;\n      \n      // Underground fog/mist\n      float mist = hash(direction.xy * 10.0 + time * 0.1);\n      mist = smoothstep(0.7, 1.0, mist) * 0.1;\n      color += vec3(0.05, 0.05, 0.08) * mist;\n      \n      // Depth fade for atmosphere\n      color *= 1.0 - caveDepth * 0.3;\n      \n      gl_FragColor = vec4(color, 1.0);\n    }\n  `\n};"],"names":["caveDepths"],"mappings":"AAMA,MAAAA,EAAe,CACb,KAAM,cACN,YAAa,oDACb,OAAQ,wBACR,QAAS,QACT,KAAM,CAAC,OAAQ,cAAe,UAAW,OAAQ,YAAY,EAC7D,KAAM,aAEN,SAAU,CACR,YAAa,CAAE,MAAO,EAAG,EACzB,UAAW,CAAE,MAAO,EAAG,EACvB,aAAc,CAAE,MAAO,EAAG,CAC9B,EAEE,aAAc;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAYd,eAAgkIlB"}