{"version":3,"file":"cloud-surface-DZSJXlb4.js","sources":["../../src/shaders/cloud-surface.js"],"sourcesContent":["/**\n * Cloud Surface Shader\n * Bright white and light blue cloud-like surface\n * High contrast for visibility in sky-themed tracks\n */\n\nimport * as THREE from 'three';\n\nexport default {\n  name: 'cloud-surface',\n  description: 'Bright cloud-like surface with white and light blue tones',\n  author: 'Circuit Beta Upgrade Team',\n  version: '1.0.0',\n  tags: ['cloud', 'sky', 'white', 'bright', 'contrast'],\n  performance: 'low',\n  \n  uniforms: {\n    cloudColor: { value: new THREE.Color(0xffffff) },\n    skyColor: { value: new THREE.Color(0x87ceeb) },\n    shadowColor: { value: new THREE.Color(0xb0c4de) },\n    cloudDensity: { value: 2.0 },\n    brightness: { value: 0.9 }\n  },\n  \n  vertexShader: `\n    varying vec3 vPosition;\n    varying vec3 vNormal;\n    varying vec2 vUv;\n    varying vec3 vWorldPosition;\n    \n    void main() {\n      vPosition = position;\n      vNormal = normalize(normalMatrix * normal);\n      vUv = uv;\n      \n      vec4 worldPosition = modelMatrix * vec4(position, 1.0);\n      vWorldPosition = worldPosition.xyz;\n      \n      gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\n    }\n  `,\n  \n  fragmentShader: `\n    uniform float time;\n    uniform vec3 cloudColor;\n    uniform vec3 skyColor;\n    uniform vec3 shadowColor;\n    uniform float cloudDensity;\n    uniform float brightness;\n    \n    varying vec3 vPosition;\n    varying vec3 vNormal;\n    varying vec2 vUv;\n    varying vec3 vWorldPosition;\n    \n    // Simple noise for cloud texture\n    float hash(vec2 p) {\n      return fract(sin(dot(p, vec2(127.1, 311.7))) * 43758.5453123);\n    }\n    \n    float noise(vec2 p) {\n      vec2 i = floor(p);\n      vec2 f = fract(p);\n      vec2 u = f * f * (3.0 - 2.0 * f);\n      \n      return mix(\n        mix(hash(i + vec2(0.0, 0.0)), hash(i + vec2(1.0, 0.0)), u.x),\n        mix(hash(i + vec2(0.0, 1.0)), hash(i + vec2(1.0, 1.0)), u.x),\n        u.y\n      );\n    }\n    \n    float fbm(vec2 p) {\n      float value = 0.0;\n      float amplitude = 0.5;\n      \n      for (int i = 0; i < 3; i++) {\n        value += amplitude * noise(p);\n        p *= 2.0;\n        amplitude *= 0.5;\n      }\n      \n      return value;\n    }\n    \n    void main() {\n      // Cloud pattern based on position and time\n      vec2 cloudPos = vWorldPosition.xz * 0.1 + vec2(time * 0.02, time * 0.01);\n      float cloudPattern = fbm(cloudPos * cloudDensity);\n      \n      // Mix cloud colors based on pattern and normal\n      vec3 baseColor = mix(shadowColor, cloudColor, cloudPattern);\n      float skyBlend = smoothstep(0.3, 0.7, cloudPattern);\n      baseColor = mix(baseColor, skyColor, skyBlend * 0.3);\n      \n      // Bright diffuse lighting for high visibility\n      vec3 lightDir = normalize(vec3(0.5, 1.0, 0.5));\n      float diffuse = max(dot(vNormal, lightDir), 0.0);\n      diffuse = mix(0.7, 1.0, diffuse); // Keep minimum brightness high\n      \n      // Final color with high brightness\n      vec3 finalColor = baseColor * diffuse;\n      finalColor = mix(finalColor, vec3(1.0), brightness * 0.3);\n      \n      // Subtle edge glow for better track edge visibility\n      float edgeFactor = 1.0 - abs(dot(vNormal, vec3(0.0, 1.0, 0.0)));\n      finalColor += skyColor * edgeFactor * 0.2;\n      \n      gl_FragColor = vec4(finalColor, 1.0);\n    }\n  `\n};"],"names":["cloudSurface","THREE.Color"],"mappings":"uCAQA,MAAAA,EAAe,CACb,KAAM,gBACN,YAAa,4DACb,OAAQ,4BACR,QAAS,QACT,KAAM,CAAC,QAAS,MAAO,QAAS,SAAU,UAAU,EACpD,YAAa,MAEb,SAAU,CACR,WAAY,CAAE,MAAO,IAAIC,EAAY,QAAQ,CAAC,EAC9C,SAAU,CAAE,MAAO,IAAIA,EAAY,OAAQ,CAAC,EAC5C,YAAa,CAAE,MAAO,IAAIA,EAAY,QAAQ,CAAC,EAC/C,aAAc,CAAE,MAAO,CAAG,EAC1B,WAAY,CAAE,MAAO,EAAG,CAC5B,EAEE,aAAc;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAkBd,eAAgB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAqElB"}