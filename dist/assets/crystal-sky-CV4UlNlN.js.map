{"version":3,"file":"crystal-sky-CV4UlNlN.js","sources":["../../src/skyboxes/crystal-sky.js"],"sourcesContent":["/**\r\n * Crystal Sky Skybox\r\n * Crystalline ice atmosphere with refractive effects\r\n * Perfect for crystal/ice themed tracks\r\n */\r\n\r\nimport * as THREE from 'three';\r\n\r\nexport default {\r\n  name: 'crystal-sky',\r\n  description: 'Crystalline ice atmosphere with refractive highlights',\r\n  author: 'Velocity Sphere Team',\r\n  version: '1.0.0',\r\n  tags: ['crystal', 'ice', 'cold', 'refractive'],\r\n  mood: 'cold',\r\n  \r\n  uniforms: {\r\n    iceColor: { value: new THREE.Color(0x88ccff) },\r\n    crystalColor: { value: new THREE.Color(0xccffff) },\r\n    sparkleIntensity: { value: 1.0 },\r\n    refractionStrength: { value: 0.5 }\r\n  },\r\n  \r\n  vertexShader: `\r\n    varying vec3 vWorldPosition;\r\n    varying vec3 vPosition;\r\n    \r\n    void main() {\r\n      vec4 worldPosition = modelMatrix * vec4(position, 1.0);\r\n      vWorldPosition = worldPosition.xyz;\r\n      vPosition = position;\r\n      gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\r\n    }\r\n  `,\r\n  \r\n  fragmentShader: `\r\n    uniform float time;\r\n    uniform vec3 iceColor;\r\n    uniform vec3 crystalColor;\r\n    uniform float sparkleIntensity;\r\n    uniform float refractionStrength;\r\n    \r\n    varying vec3 vWorldPosition;\r\n    varying vec3 vPosition;\r\n    \r\n    // Noise function\r\n    float noise(vec3 p) {\r\n      return fract(sin(dot(p, vec3(12.9898, 78.233, 54.321))) * 43758.5453);\r\n    }\r\n    \r\n    // Voronoi pattern for crystal facets\r\n    float voronoi(vec3 p) {\r\n      vec3 b = floor(p);\r\n      vec3 f = fract(p);\r\n      \r\n      float res = 8.0;\r\n      for(int k = -1; k <= 1; k++) {\r\n        for(int j = -1; j <= 1; j++) {\r\n          for(int i = -1; i <= 1; i++) {\r\n            vec3 g = vec3(float(i), float(j), float(k));\r\n            vec3 r = g + noise(b + g) - f;\r\n            float d = length(r);\r\n            res = min(res, d);\r\n          }\r\n        }\r\n      }\r\n      return res;\r\n    }\r\n    \r\n    void main() {\r\n      vec3 direction = normalize(vWorldPosition);\r\n      float y = direction.y;\r\n      \r\n      // Base ice atmosphere gradient\r\n      vec3 skyTop = vec3(0.7, 0.85, 1.0);     // Light ice blue\r\n      vec3 skyHorizon = vec3(0.85, 0.9, 0.95); // Almost white\r\n      vec3 skyBottom = vec3(0.6, 0.8, 0.9);   // Deeper ice blue\r\n      \r\n      vec3 color;\r\n      if (y > 0.0) {\r\n        // Upper sky\r\n        color = mix(skyHorizon, skyTop, y);\r\n      } else {\r\n        // Lower sky\r\n        color = mix(skyBottom, skyHorizon, (y + 1.0));\r\n      }\r\n      \r\n      // Add crystal formations\r\n      float crystalPattern = voronoi(direction * 5.0);\r\n      crystalPattern = 1.0 - smoothstep(0.0, 0.3, crystalPattern);\r\n      \r\n      // Create crystalline facets\r\n      float facetNoise = noise(direction * 20.0 + time * 0.1);\r\n      float facets = sin(direction.x * 30.0 + facetNoise) * sin(direction.y * 25.0 + facetNoise) * sin(direction.z * 35.0 + facetNoise);\r\n      facets = smoothstep(0.7, 1.0, facets);\r\n      \r\n      // Apply crystal effects\r\n      vec3 crystalEffect = crystalColor * (crystalPattern * 0.3 + facets * 0.2);\r\n      color = mix(color, color + crystalEffect, 0.6);\r\n      \r\n      // Add ice sparkles\r\n      float sparkleNoise = noise(direction * 100.0 + time * 0.5);\r\n      float sparkles = smoothstep(0.95, 1.0, sparkleNoise);\r\n      \r\n      // Twinkling effect\r\n      float twinkle = sin(time * 8.0 + sparkleNoise * 100.0) * 0.5 + 0.5;\r\n      sparkles *= twinkle;\r\n      \r\n      // Add sparkles\r\n      color += vec3(1.0) * sparkles * sparkleIntensity * 0.3;\r\n      \r\n      // Add refractive shimmer\r\n      float refraction = sin(direction.x * 15.0 + time * 0.8) * cos(direction.z * 12.0 + time * 0.6) * sin(direction.y * 10.0 + time * 0.4);\r\n      refraction = refraction * 0.5 + 0.5;\r\n      refraction *= refractionStrength;\r\n      \r\n      // Apply refraction as color shift\r\n      color.r += refraction * 0.05;\r\n      color.b += refraction * 0.03;\r\n      \r\n      // Add atmospheric particles\r\n      float particles = noise(direction * 80.0 + time * 0.2);\r\n      particles = smoothstep(0.9, 1.0, particles);\r\n      color += iceColor * particles * 0.1;\r\n      \r\n      // Add subtle breathing effect\r\n      float breathe = sin(time * 0.7) * 0.05 + 0.95;\r\n      color *= breathe;\r\n      \r\n      gl_FragColor = vec4(color, 1.0);\r\n    }\r\n  `\r\n};"],"names":["crystalSky","THREE.Color"],"mappings":"uCAQA,MAAAA,EAAe,CACb,KAAM,cACN,YAAa,wDACb,OAAQ,uBACR,QAAS,QACT,KAAM,CAAC,UAAW,MAAO,OAAQ,YAAY,EAC7C,KAAM,OAEN,SAAU,CACR,SAAU,CAAE,MAAO,IAAIC,EAAY,OAAQ,CAAC,EAC5C,aAAc,CAAE,MAAO,IAAIA,EAAY,QAAQ,CAAC,EAChD,iBAAkB,CAAE,MAAO,CAAG,EAC9B,mBAAoB,CAAE,MAAO,EAAG,CACpC,EAEE,aAAc;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAYd,eAAgB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAiGlB"}