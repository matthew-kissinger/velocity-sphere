{"version":3,"file":"crystal-surface-Bjqs_hAK.js","sources":["../../src/shaders/crystal-surface.js"],"sourcesContent":["/**\r\n * Crystal Surface Shader\r\n * Crystalline surface with refractive properties\r\n * Great for ice/crystal themed tracks\r\n */\r\n\r\nimport * as THREE from 'three';\r\n\r\nexport default {\r\n  name: 'crystal-surface',\r\n  description: 'Crystalline surface with refractive highlights and ice-like appearance',\r\n  author: 'Velocity Sphere Team',\r\n  version: '1.0.0',\r\n  tags: ['crystal', 'ice', 'refractive', 'cold', 'transparent'],\r\n  performance: 'medium',\r\n  \r\n  uniforms: {\r\n    crystalColor: { value: new THREE.Color(0x88ccff) },\r\n    highlightColor: { value: new THREE.Color(0xffffff) },\r\n    refractiveIndex: { value: 1.5 },\r\n    roughness: { value: 0.1 },\r\n    transparency: { value: 0.8 }\r\n  },\r\n  \r\n  vertexShader: `\r\n    varying vec3 vPosition;\r\n    varying vec3 vNormal;\r\n    varying vec2 vUv;\r\n    varying vec3 vWorldPosition;\r\n    varying vec3 vViewPosition;\r\n    \r\n    void main() {\r\n      vPosition = position;\r\n      vNormal = normalize(normalMatrix * normal);\r\n      vUv = uv;\r\n      \r\n      vec4 worldPosition = modelMatrix * vec4(position, 1.0);\r\n      vWorldPosition = worldPosition.xyz;\r\n      \r\n      vec4 mvPosition = modelViewMatrix * vec4(position, 1.0);\r\n      vViewPosition = -mvPosition.xyz;\r\n      \r\n      gl_Position = projectionMatrix * mvPosition;\r\n    }\r\n  `,\r\n  \r\n  fragmentShader: `\r\n    uniform float time;\r\n    uniform vec3 crystalColor;\r\n    uniform vec3 highlightColor;\r\n    uniform float refractiveIndex;\r\n    uniform float roughness;\r\n    uniform float transparency;\r\n    uniform vec3 cameraPosition;\r\n    \r\n    varying vec3 vPosition;\r\n    varying vec3 vNormal;\r\n    varying vec2 vUv;\r\n    varying vec3 vWorldPosition;\r\n    varying vec3 vViewPosition;\r\n    \r\n    void main() {\r\n      vec3 normal = normalize(vNormal);\r\n      vec3 viewDirection = normalize(vViewPosition);\r\n      \r\n      // Fresnel effect for crystal-like appearance\r\n      float fresnel = pow(1.0 - dot(normal, viewDirection), 2.0);\r\n      \r\n      // Add some sparkle with noise\r\n      float sparkle = sin(vWorldPosition.x * 50.0) * sin(vWorldPosition.y * 40.0) * sin(vWorldPosition.z * 60.0);\r\n      sparkle = smoothstep(0.8, 1.0, sparkle);\r\n      \r\n      // Create crystal facets\r\n      vec3 facetNormal = normal;\r\n      float facetNoise = sin(vWorldPosition.x * 20.0) * sin(vWorldPosition.z * 20.0);\r\n      facetNormal += vec3(facetNoise * 0.1, 0.0, facetNoise * 0.1);\r\n      facetNormal = normalize(facetNormal);\r\n      \r\n      // Calculate reflection\r\n      vec3 reflected = reflect(-viewDirection, facetNormal);\r\n      \r\n      // Simple environment color (sky-like)\r\n      vec3 envColor = mix(vec3(0.1, 0.3, 0.8), vec3(0.8, 0.9, 1.0), reflected.y * 0.5 + 0.5);\r\n      \r\n      // Mix crystal color with environment reflection\r\n      vec3 color = mix(crystalColor, envColor, fresnel * 0.7);\r\n      \r\n      // Add highlights and sparkles\r\n      color += highlightColor * sparkle * 0.5;\r\n      color += highlightColor * fresnel * 0.3;\r\n      \r\n      // Add subtle time-based shimmer\r\n      float shimmer = sin(time * 3.0 + vWorldPosition.x + vWorldPosition.z) * 0.1 + 0.9;\r\n      color *= shimmer;\r\n      \r\n      // Apply some lighting\r\n      vec3 lightDirection = normalize(vec3(1.0, 1.0, 1.0));\r\n      float lighting = dot(normal, lightDirection) * 0.5 + 0.5;\r\n      color *= lighting;\r\n      \r\n      gl_FragColor = vec4(color, transparency);\r\n    }\r\n  `,\r\n  \r\n  transparent: true\r\n};"],"names":["crystalSurface","THREE.Color"],"mappings":"uCAQA,MAAAA,EAAe,CACb,KAAM,kBACN,YAAa,yEACb,OAAQ,uBACR,QAAS,QACT,KAAM,CAAC,UAAW,MAAO,aAAc,OAAQ,aAAa,EAC5D,YAAa,SAEb,SAAU,CACR,aAAc,CAAE,MAAO,IAAIC,EAAY,OAAQ,CAAC,EAChD,eAAgB,CAAE,MAAO,IAAIA,EAAY,QAAQ,CAAC,EAClD,gBAAiB,CAAE,MAAO,GAAG,EAC7B,UAAW,CAAE,MAAO,EAAG,EACvB,aAAc,CAAE,MAAO,EAAG,CAC9B,EAEE,aAAc;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAsBd,eAAgB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IA0DhB,YAAa,EACf"}