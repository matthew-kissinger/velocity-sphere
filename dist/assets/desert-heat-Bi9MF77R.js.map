{"version":3,"file":"desert-heat-Bi9MF77R.js","sources":["../../src/skyboxes/desert-heat.js"],"sourcesContent":["/**\n * Desert Heat Skybox\n * Scorching desert atmosphere with sun glare and heat waves\n * Pairs with sand-dunes shader for desert tracks\n */\n\nexport default {\n  name: 'desert-heat',\n  description: 'Hot desert sky with intense sun and heat haze',\n  author: 'Circuit Beta AI Agent',\n  version: '1.0.0',\n  tags: ['desert', 'hot', 'sandy', 'sun', 'arid'],\n  mood: 'intense',\n  \n  uniforms: {\n    sunIntensity: { value: 1.5 },\n    heatHaze: { value: 0.6 },\n    dustDensity: { value: 0.3 }\n  },\n  \n  vertexShader: `\n    varying vec3 vWorldPosition;\n    varying vec3 vPosition;\n    \n    void main() {\n      vec4 worldPosition = modelMatrix * vec4(position, 1.0);\n      vWorldPosition = worldPosition.xyz;\n      vPosition = position;\n      gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\n    }\n  `,\n  \n  fragmentShader: `\n    uniform float time;\n    uniform float sunIntensity;\n    uniform float heatHaze;\n    uniform float dustDensity;\n    \n    varying vec3 vWorldPosition;\n    varying vec3 vPosition;\n    \n    // Noise for dust and haze\n    float hash(vec2 p) {\n      return fract(sin(dot(p, vec2(127.1, 311.7))) * 43758.5453123);\n    }\n    \n    float noise(vec2 p) {\n      vec2 i = floor(p);\n      vec2 f = fract(p);\n      vec2 u = f * f * (3.0 - 2.0 * f);\n      \n      return mix(mix(hash(i + vec2(0.0, 0.0)), \n                     hash(i + vec2(1.0, 0.0)), u.x),\n                 mix(hash(i + vec2(0.0, 1.0)), \n                     hash(i + vec2(1.0, 1.0)), u.x), u.y);\n    }\n    \n    void main() {\n      vec3 direction = normalize(vWorldPosition);\n      float y = direction.y;\n      \n      // Desert sky gradient\n      vec3 zenithColor = vec3(0.4, 0.6, 0.9); // Pale blue at top\n      vec3 horizonColor = vec3(0.9, 0.7, 0.5); // Sandy orange at horizon\n      vec3 groundColor = vec3(0.8, 0.6, 0.4); // Desert floor reflection\n      \n      vec3 color;\n      if (y > 0.1) {\n        // Sky gradient\n        float factor = pow((y - 0.1) / 0.9, 0.5);\n        color = mix(horizonColor, zenithColor, factor);\n      } else if (y > -0.1) {\n        // Horizon band with heat distortion\n        float factor = (y + 0.1) / 0.2;\n        color = mix(groundColor, horizonColor, factor);\n        \n        // Add heat shimmer at horizon\n        float shimmer = sin(direction.x * 20.0 + time * 3.0) * heatHaze;\n        shimmer += cos(direction.z * 15.0 - time * 2.5) * heatHaze * 0.5;\n        color += vec3(0.2, 0.1, 0.0) * shimmer * (1.0 - abs(y) * 10.0);\n      } else {\n        // Ground reflection\n        color = groundColor * (0.8 + y * 0.4);\n      }\n      \n      // Sun disk and glare\n      vec3 sunDir = normalize(vec3(0.3, 0.7, 0.2));\n      float sunDot = dot(direction, sunDir);\n      \n      // Bright sun core\n      if (sunDot > 0.995) {\n        color = vec3(1.0, 0.95, 0.8) * sunIntensity;\n      } \n      // Sun glow\n      else if (sunDot > 0.9) {\n        float glowFactor = pow((sunDot - 0.9) / 0.095, 2.0);\n        vec3 sunGlow = vec3(1.0, 0.9, 0.6) * sunIntensity;\n        color = mix(color, sunGlow, glowFactor);\n      }\n      // Extended sun halo\n      else if (sunDot > 0.7) {\n        float haloFactor = pow((sunDot - 0.7) / 0.2, 3.0);\n        color += vec3(0.3, 0.2, 0.1) * haloFactor * sunIntensity * 0.5;\n      }\n      \n      // Atmospheric dust\n      float dust = noise(direction.xy * 10.0 + time * 0.1);\n      dust = smoothstep(0.7, 1.0, dust) * dustDensity;\n      color = mix(color, vec3(0.8, 0.7, 0.5), dust * 0.3);\n      \n      // Heat-induced color shift\n      float heatDistortion = sin(time * 1.5 + direction.x * 5.0) * 0.05;\n      color.r += heatDistortion * heatHaze;\n      color.g -= heatDistortion * heatHaze * 0.5;\n      \n      // Overall brightness adjustment for desert intensity\n      color *= 1.1;\n      \n      gl_FragColor = vec4(color, 1.0);\n    }\n  `\n};"],"names":["desertHeat"],"mappings":"AAMA,MAAAA,EAAe,CACb,KAAM,cACN,YAAa,gDACb,OAAQ,wBACR,QAAS,QACT,KAAM,CAAC,SAAU,MAAO,QAAS,MAAO,MAAM,EAC9C,KAAM,UAEN,SAAU,CACR,aAAc,CAAE,MAAO,GAAG,EAC1B,SAAU,CAAE,MAAO,EAAG,EACtB,YAAa,CAAE,MAAO,EAAG,CAC7B,EAEE,aAAc;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAYd,eAAgB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAyFlB"}