{"version":3,"file":"energy-pulse-BeadYnxS.js","sources":["../../src/shaders/energy-pulse.js"],"sourcesContent":["/**\r\n * Energy Pulse Shader\r\n * Pulsating energy with electric effects\r\n * Perfect for boost pads and high-energy sections\r\n */\r\n\r\nimport * as THREE from 'three';\r\n\r\nexport default {\r\n  name: 'energy-pulse',\r\n  description: 'Pulsating energy shader with electric discharge effects',\r\n  author: 'Velocity Sphere Team',\r\n  version: '1.0.0',\r\n  tags: ['energy', 'pulse', 'electric', 'boost', 'power'],\r\n  performance: 'medium',\r\n  \r\n  uniforms: {\r\n    baseColor: { value: new THREE.Color(0xff00ff) },\r\n    pulseColor: { value: new THREE.Color(0x00ffff) },\r\n    pulseFrequency: { value: 3.0 },\r\n    energyIntensity: { value: 1.5 },\r\n    noiseScale: { value: 10.0 }\r\n  },\r\n  \r\n  vertexShader: `\r\n    varying vec3 vPosition;\r\n    varying vec3 vNormal;\r\n    varying vec2 vUv;\r\n    varying vec3 vWorldPosition;\r\n    \r\n    void main() {\r\n      vPosition = position;\r\n      vNormal = normalize(normalMatrix * normal);\r\n      vUv = uv;\r\n      \r\n      vec4 worldPosition = modelMatrix * vec4(position, 1.0);\r\n      vWorldPosition = worldPosition.xyz;\r\n      \r\n      gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\r\n    }\r\n  `,\r\n  \r\n  fragmentShader: `\r\n    uniform float time;\r\n    uniform vec3 baseColor;\r\n    uniform vec3 pulseColor;\r\n    uniform float pulseFrequency;\r\n    uniform float energyIntensity;\r\n    uniform float noiseScale;\r\n    \r\n    varying vec3 vPosition;\r\n    varying vec3 vNormal;\r\n    varying vec2 vUv;\r\n    varying vec3 vWorldPosition;\r\n    \r\n    // Simple noise function\r\n    float noise(vec2 p) {\r\n      return fract(sin(dot(p, vec2(12.9898, 78.233))) * 43758.5453);\r\n    }\r\n    \r\n    // Fractional Brownian Motion\r\n    float fbm(vec2 p) {\r\n      float value = 0.0;\r\n      float amplitude = 0.5;\r\n      for(int i = 0; i < 4; i++) {\r\n        value += amplitude * noise(p);\r\n        p *= 2.0;\r\n        amplitude *= 0.5;\r\n      }\r\n      return value;\r\n    }\r\n    \r\n    void main() {\r\n      vec2 uv = vWorldPosition.xz * 0.1;\r\n      \r\n      // Create energy pulse\r\n      float pulse = sin(time * pulseFrequency) * 0.5 + 0.5;\r\n      pulse = pow(pulse, 2.0); // Sharper pulse\r\n      \r\n      // Add noise for energy texture\r\n      float energyNoise = fbm(uv * noiseScale + time * 0.5);\r\n      \r\n      // Create electric arcs\r\n      float arc1 = sin(uv.x * 20.0 + time * 8.0) * sin(uv.y * 15.0 + time * 6.0);\r\n      float arc2 = sin(uv.x * 12.0 - time * 5.0) * sin(uv.y * 18.0 - time * 7.0);\r\n      float arcs = (arc1 + arc2) * 0.3;\r\n      \r\n      // Combine energy effects\r\n      float energy = energyNoise + arcs + pulse;\r\n      energy *= energyIntensity;\r\n      \r\n      // Mix colors based on energy level\r\n      vec3 color = mix(baseColor, pulseColor, energy);\r\n      \r\n      // Add extra intensity for high energy areas\r\n      color += pulseColor * max(0.0, energy - 1.0) * 0.5;\r\n      \r\n      // Apply lighting\r\n      float lighting = dot(vNormal, normalize(vec3(1.0, 1.0, 1.0))) * 0.5 + 0.5;\r\n      color *= lighting;\r\n      \r\n      // Add glow effect\r\n      color *= (1.0 + pulse * 0.5);\r\n      \r\n      gl_FragColor = vec4(color, 1.0);\r\n    }\r\n  `\r\n};"],"names":["energyPulse","THREE.Color"],"mappings":"uCAQA,MAAAA,EAAe,CACb,KAAM,eACN,YAAa,0DACb,OAAQ,uBACR,QAAS,QACT,KAAM,CAAC,SAAU,QAAS,WAAY,QAAS,OAAO,EACtD,YAAa,SAEb,SAAU,CACR,UAAW,CAAE,MAAO,IAAIC,EAAY,QAAQ,CAAC,EAC7C,WAAY,CAAE,MAAO,IAAIA,EAAY,KAAQ,CAAC,EAC9C,eAAgB,CAAE,MAAO,CAAG,EAC5B,gBAAiB,CAAE,MAAO,GAAG,EAC7B,WAAY,CAAE,MAAO,EAAI,CAC7B,EAEE,aAAc;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAkBd,eAAgB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAiElB"}