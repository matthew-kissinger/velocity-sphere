{"version":3,"file":"factory-smoke-DpwltrVz.js","sources":["../../src/skyboxes/factory-smoke.js"],"sourcesContent":["/**\n * Factory Smoke Skybox\n * Industrial atmosphere with smoke stacks and metallic haze\n * Pairs with metal-chrome shader for industrial tracks\n */\n\nexport default {\n  name: 'factory-smoke',\n  description: 'Industrial skybox with factory smoke and metallic atmosphere',\n  author: 'Circuit Beta AI Agent',\n  version: '1.0.0',\n  tags: ['factory', 'industrial', 'smoke', 'metal', 'urban'],\n  mood: 'industrial',\n  \n  uniforms: {\n    smokeIntensity: { value: 0.7 },\n    pollutionLevel: { value: 0.5 },\n    lightPollution: { value: 0.8 }\n  },\n  \n  vertexShader: `\n    varying vec3 vWorldPosition;\n    varying vec3 vPosition;\n    \n    void main() {\n      vec4 worldPosition = modelMatrix * vec4(position, 1.0);\n      vWorldPosition = worldPosition.xyz;\n      vPosition = position;\n      gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\n    }\n  `,\n  \n  fragmentShader: `\n    uniform float time;\n    uniform float smokeIntensity;\n    uniform float pollutionLevel;\n    uniform float lightPollution;\n    \n    varying vec3 vWorldPosition;\n    varying vec3 vPosition;\n    \n    // Noise functions for smoke\n    float hash(vec2 p) {\n      return fract(sin(dot(p, vec2(127.1, 311.7))) * 43758.5453123);\n    }\n    \n    float noise(vec2 p) {\n      vec2 i = floor(p);\n      vec2 f = fract(p);\n      vec2 u = f * f * (3.0 - 2.0 * f);\n      \n      return mix(mix(hash(i + vec2(0.0, 0.0)), \n                     hash(i + vec2(1.0, 0.0)), u.x),\n                 mix(hash(i + vec2(0.0, 1.0)), \n                     hash(i + vec2(1.0, 1.0)), u.x), u.y);\n    }\n    \n    float fbm(vec2 p) {\n      float value = 0.0;\n      float amplitude = 0.5;\n      \n      for(int i = 0; i < 5; i++) {\n        value += amplitude * noise(p);\n        p *= 2.0;\n        amplitude *= 0.5;\n      }\n      \n      return value;\n    }\n    \n    void main() {\n      vec3 direction = normalize(vWorldPosition);\n      float y = direction.y;\n      \n      // Industrial sky gradient\n      vec3 topColor = vec3(0.3, 0.3, 0.35); // Grey-blue polluted sky\n      vec3 midColor = vec3(0.4, 0.35, 0.3);  // Brown-grey haze\n      vec3 horizonColor = vec3(0.5, 0.4, 0.3); // Industrial orange\n      vec3 groundColor = vec3(0.2, 0.15, 0.1); // Dark industrial ground\n      \n      vec3 color;\n      if (y > 0.3) {\n        // Upper atmosphere\n        float factor = (y - 0.3) / 0.7;\n        color = mix(midColor, topColor, factor);\n      } else if (y > 0.0) {\n        // Mid sky with heavy pollution\n        float factor = y / 0.3;\n        color = mix(horizonColor, midColor, factor);\n      } else if (y > -0.2) {\n        // Horizon with smoke stacks\n        float factor = (y + 0.2) / 0.2;\n        color = mix(groundColor, horizonColor, factor);\n        \n        // Add smoke stack silhouettes\n        float stacks = step(0.95, noise(vec2(direction.x * 10.0, 0.0)));\n        stacks *= (1.0 - abs(y) * 5.0); // Only at horizon\n        color *= 1.0 - stacks * 0.7;\n      } else {\n        // Ground\n        color = groundColor;\n      }\n      \n      // Add smoke plumes\n      vec2 smokeUV = direction.xz * 2.0 + vec2(time * 0.1, -time * 0.3);\n      float smoke = fbm(smokeUV);\n      smoke = smoothstep(0.3, 0.7, smoke);\n      \n      // Vertical smoke rise\n      float verticalSmoke = fbm(vec2(direction.x * 5.0, y * 2.0 - time * 0.5));\n      verticalSmoke *= smoothstep(-0.2, 0.5, y) * smoothstep(1.0, 0.5, y);\n      smoke += verticalSmoke * 0.5;\n      \n      // Apply smoke with transparency based on intensity\n      vec3 smokeColor = vec3(0.4, 0.35, 0.3);\n      color = mix(color, smokeColor, smoke * smokeIntensity * 0.7);\n      \n      // Industrial light sources (factory lights)\n      if (y < 0.0 && y > -0.3) {\n        float lights = noise(direction.xz * 20.0);\n        lights = smoothstep(0.8, 0.9, lights);\n        vec3 lightColor = vec3(1.0, 0.8, 0.4); // Warm factory lights\n        color += lightColor * lights * lightPollution * 0.5;\n      }\n      \n      // Add atmospheric haze\n      float haze = 1.0 - exp(-pollutionLevel * 2.0 * (1.0 - abs(y)));\n      vec3 hazeColor = vec3(0.5, 0.45, 0.4);\n      color = mix(color, hazeColor, haze * 0.3);\n      \n      // Time of day variation (always somewhat dark/polluted)\n      float dayNight = sin(time * 0.1) * 0.1 + 0.7;\n      color *= dayNight;\n      \n      // Add subtle particle effect (ash/soot)\n      float particles = noise(direction.xy * 100.0 + time * 0.5);\n      particles = smoothstep(0.95, 1.0, particles);\n      color -= vec3(0.1) * particles;\n      \n      gl_FragColor = vec4(color, 1.0);\n    }\n  `\n};"],"names":["factorySmoke"],"mappings":"AAMA,MAAAA,EAAe,CACb,KAAM,gBACN,YAAa,+DACb,OAAQ,wBACR,QAAS,QACT,KAAM,CAAC,UAAW,aAAc,QAAS,QAAS,OAAO,EACzD,KAAM,aAEN,SAAU,CACR,eAAgB,CAAE,MAAO,EAAG,EAC5B,eAAgB,CAAE,MAAO,EAAG,EAC5B,eAAgB,CAAE,MAAO,EAAG,CAChC,EAEE,aAAc;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAYd,eAAglB"}