{"version":3,"file":"forest-canopy-CcWtpqwW.js","sources":["../../src/skyboxes/forest-canopy.js"],"sourcesContent":["/**\n * Forest Canopy Skybox\n * Forest atmosphere with dappled sunlight through leaves\n * High contrast with forest-floor shader for better visibility\n */\n\nexport default {\n  name: 'forest-canopy',\n  description: 'Forest canopy with sunlight filtering through leaves',\n  author: 'Circuit Beta Upgrade Team',\n  version: '1.0.0',\n  tags: ['forest', 'nature', 'green', 'organic', 'canopy'],\n  mood: 'natural',\n  \n  uniforms: {\n    sunlightColor: { value: 0.9 },\n    leafDensity: { value: 0.6 },\n    windSpeed: { value: 0.3 }\n  },\n  \n  vertexShader: `\n    varying vec3 vWorldPosition;\n    varying vec3 vPosition;\n    \n    void main() {\n      vec4 worldPosition = modelMatrix * vec4(position, 1.0);\n      vWorldPosition = worldPosition.xyz;\n      vPosition = position;\n      gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\n    }\n  `,\n  \n  fragmentShader: `\n    uniform float time;\n    uniform float sunlightColor;\n    uniform float leafDensity;\n    uniform float windSpeed;\n    \n    varying vec3 vWorldPosition;\n    varying vec3 vPosition;\n    \n    // Noise for leaf patterns\n    float hash(vec2 p) {\n      return fract(sin(dot(p, vec2(127.1, 311.7))) * 43758.5453123);\n    }\n    \n    float noise(vec2 p) {\n      vec2 i = floor(p);\n      vec2 f = fract(p);\n      vec2 u = f * f * (3.0 - 2.0 * f);\n      \n      return mix(\n        mix(hash(i + vec2(0.0, 0.0)), hash(i + vec2(1.0, 0.0)), u.x),\n        mix(hash(i + vec2(0.0, 1.0)), hash(i + vec2(1.0, 1.0)), u.x),\n        u.y\n      );\n    }\n    \n    float leafPattern(vec2 p, float t) {\n      // Animate leaves with wind\n      p += vec2(sin(t * windSpeed) * 0.1, cos(t * windSpeed * 0.7) * 0.05);\n      \n      float n = 0.0;\n      float amplitude = 1.0;\n      \n      // Multiple octaves for realistic leaf coverage\n      for (int i = 0; i < 4; i++) {\n        n += noise(p * (2.0 + float(i))) * amplitude;\n        amplitude *= 0.5;\n        p *= 2.1;\n      }\n      \n      return n;\n    }\n    \n    void main() {\n      vec3 direction = normalize(vPosition);\n      float height = direction.y;\n      \n      // Sky gradient - much brighter and greener\n      vec3 skyColorTop = vec3(0.7, 0.9, 1.0);\n      vec3 skyColorMid = vec3(0.6, 0.85, 0.7);\n      vec3 skyColorLow = vec3(0.5, 0.7, 0.6);\n      \n      vec3 skyGradient = mix(skyColorLow, skyColorMid, smoothstep(-0.5, 0.0, height));\n      skyGradient = mix(skyGradient, skyColorTop, smoothstep(0.0, 1.0, height));\n      \n      // Canopy layer (upper hemisphere)\n      if (height > -0.2) {\n        vec2 canopyCoord = direction.xz / (1.0 + height * 0.5);\n        float leaves = leafPattern(canopyCoord * 5.0, time);\n        \n        // Leaf colors - much brighter and more vibrant green\n        vec3 leafColorDark = vec3(0.2, 0.5, 0.1);\n        vec3 leafColorLight = vec3(0.4, 0.8, 0.2);\n        vec3 leafColor = mix(leafColorDark, leafColorLight, leaves);\n        \n        // Mix with sky based on density\n        float canopyDensity = smoothstep(-0.2, 0.3, height) * leafDensity;\n        skyGradient = mix(skyGradient, leafColor, canopyDensity * smoothstep(0.3, 0.7, leaves));\n        \n        // Sunlight filtering through\n        float sunlight = 1.0 - canopyDensity * 0.7;\n        vec3 sunColor = vec3(1.0, 0.95, 0.8) * sunlightColor;\n        \n        // Dappled light effect\n        float dappled = noise(canopyCoord * 20.0 + time * 0.1);\n        sunlight *= mix(0.5, 1.0, dappled);\n        \n        skyGradient = mix(skyGradient, skyGradient + sunColor * 0.5, sunlight);\n      }\n      \n      // Ground fog for lower hemisphere - lighter and greener\n      if (height < 0.0) {\n        float fogAmount = smoothstep(0.0, -0.5, height);\n        vec3 fogColor = vec3(0.7, 0.8, 0.75);\n        skyGradient = mix(skyGradient, fogColor, fogAmount * 0.3);\n      }\n      \n      // Add atmospheric perspective\n      float distance = length(vWorldPosition.xz);\n      vec3 atmosphereColor = vec3(0.7, 0.75, 0.8);\n      skyGradient = mix(skyGradient, atmosphereColor, smoothstep(50.0, 200.0, distance) * 0.3);\n      \n      gl_FragColor = vec4(skyGradient, 1.0);\n    }\n  `\n};"],"names":["forestCanopy"],"mappings":"AAMA,MAAAA,EAAe,CACb,KAAM,gBACN,YAAa,uDACb,OAAQ,4BACR,QAAS,QACT,KAAM,CAAC,SAAU,SAAU,QAAS,UAAW,QAAQ,EACvD,KAAM,UAEN,SAAU,CACR,cAAe,CAAE,MAAO,EAAG,EAC3B,YAAa,CAAE,MAAO,EAAG,EACzB,UAAW,CAAE,MAAO,EAAG,CAC3B,EAEE,aAAc;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAYd,eAAgB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GA+FlB"}