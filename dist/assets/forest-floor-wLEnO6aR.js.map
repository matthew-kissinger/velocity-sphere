{"version":3,"file":"forest-floor-wLEnO6aR.js","sources":["../../src/shaders/forest-floor.js"],"sourcesContent":["/**\n * Forest Floor Shader\n * Natural forest ground with leaves, moss, and organic patterns\n * Perfect for forest/nature themed tracks\n */\n\nimport * as THREE from 'three';\n\nexport default {\n  name: 'forest-floor',\n  description: 'Forest floor with moss, leaves, and natural textures',\n  author: 'Circuit Beta AI Agent',\n  version: '1.0.0',\n  tags: ['forest', 'nature', 'organic', 'moss', 'leaves'],\n  performance: 'good',\n  \n  uniforms: {\n    mossColor: { value: new THREE.Color(0x4a7c31) }, // Brighter green moss\n    dirtColor: { value: new THREE.Color(0x7a6450) }, // Lighter brown dirt\n    leafColor: { value: new THREE.Color(0xc89f63) }, // Brighter leaf color\n    growthSpeed: { value: 0.3 },\n    mossAmount: { value: 0.5 }, // Slightly less moss for better contrast\n    naturalVariation: { value: 0.3 } // Less variation for better visibility\n  },\n  \n  vertexShader: `\n    varying vec3 vPosition;\n    varying vec3 vNormal;\n    varying vec2 vUv;\n    varying vec3 vWorldPosition;\n    \n    void main() {\n      vPosition = position;\n      vNormal = normalize(normalMatrix * normal);\n      vUv = uv;\n      \n      vec4 worldPosition = modelMatrix * vec4(position, 1.0);\n      vWorldPosition = worldPosition.xyz;\n      \n      gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\n    }\n  `,\n  \n  fragmentShader: `\n    uniform float time;\n    uniform vec3 mossColor;\n    uniform vec3 dirtColor;\n    uniform vec3 leafColor;\n    uniform float growthSpeed;\n    uniform float mossAmount;\n    uniform float naturalVariation;\n    \n    varying vec3 vPosition;\n    varying vec3 vNormal;\n    varying vec2 vUv;\n    varying vec3 vWorldPosition;\n    \n    // Voronoi noise for organic patterns\n    vec2 hash2(vec2 p) {\n      p = vec2(dot(p, vec2(127.1, 311.7)),\n               dot(p, vec2(269.5, 183.3)));\n      return fract(sin(p) * 43758.5453);\n    }\n    \n    float voronoi(vec2 p) {\n      vec2 n = floor(p);\n      vec2 f = fract(p);\n      \n      float minDist = 1.0;\n      \n      for(int y = -1; y <= 1; y++) {\n        for(int x = -1; x <= 1; x++) {\n          vec2 neighbor = vec2(float(x), float(y));\n          vec2 point = hash2(n + neighbor);\n          vec2 diff = neighbor + point - f;\n          float dist = length(diff);\n          minDist = min(minDist, dist);\n        }\n      }\n      \n      return minDist;\n    }\n    \n    // Simple noise\n    float hash(vec2 p) {\n      return fract(sin(dot(p, vec2(127.1, 311.7))) * 43758.5453123);\n    }\n    \n    float noise(vec2 p) {\n      vec2 i = floor(p);\n      vec2 f = fract(p);\n      vec2 u = f * f * (3.0 - 2.0 * f);\n      \n      return mix(mix(hash(i + vec2(0.0, 0.0)), \n                     hash(i + vec2(1.0, 0.0)), u.x),\n                 mix(hash(i + vec2(0.0, 1.0)), \n                     hash(i + vec2(1.0, 1.0)), u.x), u.y);\n    }\n    \n    float fbm(vec2 p) {\n      float value = 0.0;\n      float amplitude = 0.5;\n      \n      for(int i = 0; i < 6; i++) {\n        value += amplitude * noise(p);\n        p *= 2.0;\n        amplitude *= 0.5;\n      }\n      \n      return value;\n    }\n    \n    void main() {\n      vec2 uv = vWorldPosition.xz * 0.15;\n      \n      // Create base dirt texture\n      float dirtPattern = fbm(uv * 5.0) * 0.5 + 0.5;\n      \n      // Add moss patches using voronoi\n      float mossPatch = 1.0 - voronoi(uv * 3.0 + time * growthSpeed * 0.1);\n      mossPatch = smoothstep(0.3, 0.7, mossPatch);\n      mossPatch *= mossAmount;\n      \n      // Add smaller moss details\n      float mossDetail = fbm(uv * 20.0);\n      mossPatch *= 0.7 + mossDetail * 0.3;\n      \n      // Create leaf scatter pattern\n      float leaves = voronoi(uv * 8.0);\n      leaves = smoothstep(0.1, 0.2, leaves);\n      float leafPattern = 1.0 - leaves;\n      leafPattern *= noise(uv * 50.0 + time * 0.1) > 0.7 ? 1.0 : 0.0;\n      \n      // Mix base colors\n      vec3 groundColor = mix(dirtColor, mossColor, mossPatch);\n      \n      // Add leaves on top\n      groundColor = mix(groundColor, leafColor, leafPattern * 0.4);\n      \n      // Add natural variation\n      float variation = fbm(uv * 2.0) * naturalVariation;\n      groundColor *= 1.0 - variation * 0.3;\n      \n      // Add subtle root/twig patterns\n      float roots = 1.0 - smoothstep(0.0, 0.1, voronoi(uv * 15.0));\n      roots *= noise(uv * 100.0);\n      groundColor *= 1.0 - roots * 0.2;\n      \n      // Apply lighting with forest ambiance - brighter overall\n      vec3 lightDir = normalize(vec3(0.5, 1.0, 0.3));\n      float lighting = dot(vNormal, lightDir) * 0.2 + 0.9; // Increased ambient light\n      groundColor *= lighting;\n      \n      // Add dappled sunlight effect - more prominent\n      float sunlight = noise(uv * 2.0 + time * growthSpeed * 0.5);\n      sunlight = smoothstep(0.6, 0.8, sunlight);\n      groundColor += vec3(0.3, 0.25, 0.1) * sunlight * 0.4; // Brighter sunlight patches\n      \n      // Subtle color variation over time (seasons)\n      float seasonal = sin(time * growthSpeed * 0.2) * 0.1 + 0.9;\n      groundColor *= seasonal;\n      \n      gl_FragColor = vec4(groundColor, 1.0);\n    }\n  `\n};"],"names":["forestFloor","THREE.Color"],"mappings":"uCAQA,MAAAA,EAAe,CACb,KAAM,eACN,YAAa,uDACb,OAAQ,wBACR,QAAS,QACT,KAAM,CAAC,SAAU,SAAU,UAAW,OAAQ,QAAQ,EACtD,YAAa,OAEb,SAAU,CACR,UAAW,CAAE,MAAO,IAAIC,EAAY,OAAQ,CAAC,EAC7C,UAAW,CAAE,MAAO,IAAIA,EAAY,OAAQ,CAAC,EAC7C,UAAW,CAAE,MAAO,IAAIA,EAAY,QAAQ,CAAC,EAC7C,YAAa,CAAE,MAAO,EAAG,EACzB,WAAY,CAAE,MAAO,EAAG,EACxB,iBAAkB,CAAE,MAAO,EAAG,CAClC,EAEE,aAAc;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAkBd,eAAglB"}