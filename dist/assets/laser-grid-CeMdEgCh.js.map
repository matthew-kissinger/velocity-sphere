{"version":3,"file":"laser-grid-CeMdEgCh.js","sources":["../../src/shaders/laser-grid.js"],"sourcesContent":["/**\r\n * Laser Grid Shader\r\n * Bright laser grid pattern for technical sections\r\n * High visibility in dark underground environments\r\n */\r\n\r\nimport * as THREE from 'three';\r\n\r\nexport default {\r\n  name: 'laser-grid',\r\n  description: 'Bright laser grid with high-tech appearance',\r\n  author: 'Circuit Epsilon AI Agent',\r\n  version: '1.0.0',\r\n  tags: ['laser', 'grid', 'bright', 'technical', 'underground'],\r\n  performance: 'excellent',\r\n  \r\n  uniforms: {\r\n    laserColor1: { value: new THREE.Color(0x00ffff) }, // Cyan laser\r\n    laserColor2: { value: new THREE.Color(0xffff00) }, // Yellow laser\r\n    backgroundColor: { value: new THREE.Color(0x000511) }, // Deep blue-black\r\n    gridSize: { value: 15.0 },\r\n    laserWidth: { value: 0.05 },\r\n    pulseSpeed: { value: 3.0 },\r\n    brightness: { value: 2.0 }\r\n  },\r\n  \r\n  vertexShader: `\r\n    varying vec3 vPosition;\r\n    varying vec3 vNormal;\r\n    varying vec2 vUv;\r\n    varying vec3 vWorldPosition;\r\n    \r\n    void main() {\r\n      vPosition = position;\r\n      vNormal = normalize(normalMatrix * normal);\r\n      vUv = uv;\r\n      \r\n      vec4 worldPosition = modelMatrix * vec4(position, 1.0);\r\n      vWorldPosition = worldPosition.xyz;\r\n      \r\n      gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\r\n    }\r\n  `,\r\n  \r\n  fragmentShader: `\r\n    uniform float time;\r\n    uniform vec3 laserColor1;\r\n    uniform vec3 laserColor2;\r\n    uniform vec3 backgroundColor;\r\n    uniform float gridSize;\r\n    uniform float laserWidth;\r\n    uniform float pulseSpeed;\r\n    uniform float brightness;\r\n    \r\n    varying vec3 vPosition;\r\n    varying vec3 vNormal;\r\n    varying vec2 vUv;\r\n    varying vec3 vWorldPosition;\r\n    \r\n    float laserLine(float coord, float width) {\r\n      float line = abs(fract(coord) - 0.5);\r\n      return 1.0 - smoothstep(0.0, width, line);\r\n    }\r\n    \r\n    void main() {\r\n      // Create grid coordinates\r\n      vec2 gridCoord = vWorldPosition.xz / gridSize;\r\n      \r\n      // Create laser lines\r\n      float lineX = laserLine(gridCoord.x, laserWidth);\r\n      float lineZ = laserLine(gridCoord.y, laserWidth);\r\n      \r\n      // Combine lines\r\n      float grid = max(lineX, lineZ);\r\n      \r\n      // Intersection points glow brighter\r\n      float intersection = lineX * lineZ;\r\n      grid += intersection * 0.5;\r\n      \r\n      // Animated pulse along lines\r\n      float pulseX = sin(gridCoord.x * 10.0 - time * pulseSpeed) * 0.5 + 0.5;\r\n      float pulseZ = sin(gridCoord.y * 10.0 - time * pulseSpeed * 0.8) * 0.5 + 0.5;\r\n      float pulse = (pulseX + pulseZ) * 0.5;\r\n      \r\n      // Color variation based on position\r\n      float colorMix = sin(vWorldPosition.x * 0.05 + vWorldPosition.z * 0.05 + time * 0.5) * 0.5 + 0.5;\r\n      vec3 laserColor = mix(laserColor1, laserColor2, colorMix);\r\n      \r\n      // Base color\r\n      vec3 color = backgroundColor;\r\n      \r\n      // Add laser grid\r\n      color += laserColor * grid * brightness * (0.7 + pulse * 0.3);\r\n      \r\n      // Add glow around laser lines\r\n      float glowX = 1.0 - smoothstep(0.0, laserWidth * 4.0, abs(fract(gridCoord.x) - 0.5));\r\n      float glowZ = 1.0 - smoothstep(0.0, laserWidth * 4.0, abs(fract(gridCoord.y) - 0.5));\r\n      float glow = max(glowX, glowZ) * 0.3;\r\n      color += laserColor * glow;\r\n      \r\n      // Add scanning beam effect\r\n      float scanBeam = sin(vWorldPosition.x * 0.5 - time * 5.0);\r\n      scanBeam = smoothstep(0.95, 1.0, scanBeam);\r\n      color += laserColor * scanBeam * 0.5;\r\n      \r\n      // Energy field between grid lines\r\n      float energy = sin(gridCoord.x * 20.0) * sin(gridCoord.y * 20.0);\r\n      energy = smoothstep(0.8, 1.0, energy) * 0.1;\r\n      color += laserColor * energy;\r\n      \r\n      // Ensure high visibility\r\n      color = max(color, backgroundColor * 0.3);\r\n      \r\n      gl_FragColor = vec4(color, 1.0);\r\n    }\r\n  `\r\n};"],"names":["laserGrid","THREE.Color"],"mappings":"uCAQA,MAAAA,EAAe,CACb,KAAM,aACN,YAAa,8CACb,OAAQ,2BACR,QAAS,QACT,KAAM,CAAC,QAAS,OAAQ,SAAU,YAAa,aAAa,EAC5D,YAAa,YAEb,SAAU,CACR,YAAa,CAAE,MAAO,IAAIC,EAAY,KAAQ,CAAC,EAC/C,YAAa,CAAE,MAAO,IAAIA,EAAY,QAAQ,CAAC,EAC/C,gBAAiB,CAAE,MAAO,IAAIA,EAAY,IAAQ,CAAC,EACnD,SAAU,CAAE,MAAO,EAAI,EACvB,WAAY,CAAE,MAAO,GAAI,EACzB,WAAY,CAAE,MAAO,CAAG,EACxB,WAAY,CAAE,MAAO,CAAG,CAC5B,EAEE,aAAc;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAkBd,eAAgB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAwElB"}