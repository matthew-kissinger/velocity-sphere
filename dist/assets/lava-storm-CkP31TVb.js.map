{"version":3,"file":"lava-storm-CkP31TVb.js","sources":["../../src/skyboxes/lava-storm.js"],"sourcesContent":["/**\r\n * Lava Storm Skybox\r\n * Volcanic atmosphere with ash clouds and lava glow\r\n * Perfect for lava/volcanic themed tracks\r\n */\r\n\r\nimport * as THREE from 'three';\r\n\r\nexport default {\r\n  name: 'lava-storm',\r\n  description: 'Volcanic atmosphere with ash clouds and lava glow',\r\n  author: 'Velocity Sphere Team',\r\n  version: '1.0.0',\r\n  tags: ['lava', 'volcanic', 'intense', 'fire'],\r\n  mood: 'intense',\r\n  \r\n  uniforms: {\r\n    lavaColor: { value: new THREE.Color(0xff4400) },\r\n    ashColor: { value: new THREE.Color(0x332211) },\r\n    emberColor: { value: new THREE.Color(0xff8800) },\r\n    stormIntensity: { value: 1.2 },\r\n    cloudSpeed: { value: 0.8 }\r\n  },\r\n  \r\n  vertexShader: `\r\n    varying vec3 vWorldPosition;\r\n    varying vec3 vPosition;\r\n    \r\n    void main() {\r\n      vec4 worldPosition = modelMatrix * vec4(position, 1.0);\r\n      vWorldPosition = worldPosition.xyz;\r\n      vPosition = position;\r\n      gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\r\n    }\r\n  `,\r\n  \r\n  fragmentShader: `\r\n    uniform float time;\r\n    uniform vec3 lavaColor;\r\n    uniform vec3 ashColor;\r\n    uniform vec3 emberColor;\r\n    uniform float stormIntensity;\r\n    uniform float cloudSpeed;\r\n    \r\n    varying vec3 vWorldPosition;\r\n    varying vec3 vPosition;\r\n    \r\n    // Noise functions\r\n    float noise(vec3 p) {\r\n      return fract(sin(dot(p, vec3(12.9898, 78.233, 54.321))) * 43758.5453);\r\n    }\r\n    \r\n    float smoothNoise(vec3 p) {\r\n      vec3 i = floor(p);\r\n      vec3 f = fract(p);\r\n      f = f * f * (3.0 - 2.0 * f);\r\n      \r\n      float a = noise(i);\r\n      float b = noise(i + vec3(1.0, 0.0, 0.0));\r\n      float c = noise(i + vec3(0.0, 1.0, 0.0));\r\n      float d = noise(i + vec3(1.0, 1.0, 0.0));\r\n      float e = noise(i + vec3(0.0, 0.0, 1.0));\r\n      float f_val = noise(i + vec3(1.0, 0.0, 1.0));\r\n      float g = noise(i + vec3(0.0, 1.0, 1.0));\r\n      float h = noise(i + vec3(1.0, 1.0, 1.0));\r\n      \r\n      float x1 = mix(a, b, f.x);\r\n      float x2 = mix(c, d, f.x);\r\n      float x3 = mix(e, f_val, f.x);\r\n      float x4 = mix(g, h, f.x);\r\n      \r\n      float y1 = mix(x1, x2, f.y);\r\n      float y2 = mix(x3, x4, f.y);\r\n      \r\n      return mix(y1, y2, f.z);\r\n    }\r\n    \r\n    float fbm(vec3 p) {\r\n      float value = 0.0;\r\n      float amplitude = 0.5;\r\n      for(int i = 0; i < 6; i++) {\r\n        value += amplitude * smoothNoise(p);\r\n        p *= 2.0;\r\n        amplitude *= 0.5;\r\n      }\r\n      return value;\r\n    }\r\n    \r\n    void main() {\r\n      vec3 direction = normalize(vWorldPosition);\r\n      float y = direction.y;\r\n      \r\n      // Base volcanic atmosphere\r\n      vec3 baseColor = vec3(0.1, 0.05, 0.02); // Dark volcanic base\r\n      \r\n      // Sky gradient - hot and smoky\r\n      vec3 skyTop = ashColor * 0.8;\r\n      vec3 skyHorizon = mix(lavaColor, ashColor, 0.6);\r\n      vec3 skyBottom = lavaColor * 0.7;\r\n      \r\n      vec3 color;\r\n      if (y > 0.2) {\r\n        // Upper sky - ash clouds\r\n        float factor = (y - 0.2) / 0.8;\r\n        color = mix(skyHorizon, skyTop, factor);\r\n      } else if (y > -0.3) {\r\n        // Horizon - lava glow\r\n        float factor = (y + 0.3) / 0.5;\r\n        color = mix(skyBottom, skyHorizon, factor);\r\n      } else {\r\n        // Lower sky - intense lava glow\r\n        color = skyBottom;\r\n      }\r\n      \r\n      // Add moving ash clouds\r\n      float cloudNoise = fbm(direction * 3.0 + vec3(time * cloudSpeed, time * cloudSpeed * 0.5, 0.0));\r\n      cloudNoise = smoothstep(0.3, 0.8, cloudNoise);\r\n      \r\n      // Heavy ash clouds\r\n      vec3 clouds = ashColor * cloudNoise * 0.7;\r\n      color = mix(color, clouds, cloudNoise * 0.6);\r\n      \r\n      // Add volcanic lightning/electric discharge\r\n      float lightning = noise(direction * 50.0 + time * 10.0);\r\n      lightning = smoothstep(0.98, 1.0, lightning);\r\n      float lightningFlash = sin(time * 20.0 + lightning * 1000.0);\r\n      lightningFlash = max(0.0, lightningFlash);\r\n      color += vec3(1.0, 0.8, 0.4) * lightning * lightningFlash * 0.5;\r\n      \r\n      // Add floating embers\r\n      float emberNoise = noise(direction * 80.0 + time * 2.0);\r\n      float embers = smoothstep(0.92, 1.0, emberNoise);\r\n      \r\n      // Embers drift upward\r\n      float emberDrift = sin(time * 3.0 + emberNoise * 10.0) * 0.5 + 0.5;\r\n      embers *= emberDrift;\r\n      \r\n      color += emberColor * embers * 0.4;\r\n      \r\n      // Add lava glow pulsing\r\n      float lavaGlow = sin(time * 1.5) * 0.1 + 0.9;\r\n      if (y < 0.0) {\r\n        // Stronger glow near horizon\r\n        float glowStrength = 1.0 - (y + 1.0);\r\n        glowStrength = pow(glowStrength, 2.0);\r\n        color += lavaColor * glowStrength * lavaGlow * 0.3;\r\n      }\r\n      \r\n      // Add heat shimmer effect\r\n      float shimmer = sin(direction.x * 20.0 + time * 4.0) * cos(direction.z * 15.0 + time * 3.0);\r\n      shimmer = shimmer * 0.05 + 0.95;\r\n      color *= shimmer;\r\n      \r\n      // Apply storm intensity\r\n      color *= stormIntensity;\r\n      \r\n      // Add volcanic particles\r\n      float particles = fbm(direction * 60.0 + time * cloudSpeed * 2.0);\r\n      particles = smoothstep(0.6, 1.0, particles);\r\n      color += ashColor * particles * 0.2;\r\n      \r\n      gl_FragColor = vec4(color, 1.0);\r\n    }\r\n  `\r\n};"],"names":["lavaStorm","THREE.Color"],"mappings":"uCAQA,MAAAA,EAAe,CACb,KAAM,aACN,YAAa,oDACb,OAAQ,uBACR,QAAS,QACT,KAAM,CAAC,OAAQ,WAAY,UAAW,MAAM,EAC5C,KAAM,UAEN,SAAU,CACR,UAAW,CAAE,MAAO,IAAIC,EAAY,QAAQ,CAAC,EAC7C,SAAU,CAAE,MAAO,IAAIA,EAAY,OAAQ,CAAC,EAC5C,WAAY,CAAE,MAAO,IAAIA,EAAY,QAAQ,CAAC,EAC9C,eAAgB,CAAE,MAAO,GAAG,EAC5B,WAAY,CAAE,MAAO,EAAG,CAC5B,EAEE,aAAc;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAYd,eAAggIlB"}