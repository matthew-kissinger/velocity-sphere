{"version":3,"file":"neon-city-BA86O0I_.js","sources":["../../src/skyboxes/neon-city.js"],"sourcesContent":["/**\r\n * Neon City Skybox\r\n * Cyberpunk city atmosphere with neon highlights\r\n * Perfect for tech/cyberpunk tracks\r\n */\r\n\r\nimport * as THREE from 'three';\r\n\r\nexport default {\r\n  name: 'neon-city',\r\n  description: 'Cyberpunk city atmosphere with neon lights',\r\n  author: 'Velocity Sphere Team',\r\n  version: '1.0.0',\r\n  tags: ['cyberpunk', 'neon', 'city', 'futuristic'],\r\n  mood: 'futuristic',\r\n  \r\n  uniforms: {\r\n    neonColor1: { value: new THREE.Color(0x00ffff) },\r\n    neonColor2: { value: new THREE.Color(0xff00ff) },\r\n    cityHeight: { value: 0.2 },\r\n    fogDensity: { value: 0.3 }\r\n  },\r\n  \r\n  vertexShader: `\r\n    varying vec3 vWorldPosition;\r\n    varying vec3 vPosition;\r\n    \r\n    void main() {\r\n      vec4 worldPosition = modelMatrix * vec4(position, 1.0);\r\n      vWorldPosition = worldPosition.xyz;\r\n      vPosition = position;\r\n      gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\r\n    }\r\n  `,\r\n  \r\n  fragmentShader: `\r\n    uniform float time;\r\n    uniform vec3 neonColor1;\r\n    uniform vec3 neonColor2;\r\n    uniform float cityHeight;\r\n    uniform float fogDensity;\r\n    \r\n    varying vec3 vWorldPosition;\r\n    varying vec3 vPosition;\r\n    \r\n    // Noise function\r\n    float noise(vec2 p) {\r\n      return fract(sin(dot(p, vec2(12.9898, 78.233))) * 43758.5453);\r\n    }\r\n    \r\n    // Fractional Brownian Motion\r\n    float fbm(vec2 p) {\r\n      float value = 0.0;\r\n      float amplitude = 0.5;\r\n      for(int i = 0; i < 4; i++) {\r\n        value += amplitude * noise(p);\r\n        p *= 2.0;\r\n        amplitude *= 0.5;\r\n      }\r\n      return value;\r\n    }\r\n    \r\n    void main() {\r\n      vec3 direction = normalize(vWorldPosition);\r\n      float y = direction.y;\r\n      \r\n      // Base dark city atmosphere\r\n      vec3 baseColor = vec3(0.02, 0.01, 0.05);\r\n      \r\n      // Sky gradient\r\n      vec3 skyTop = vec3(0.05, 0.02, 0.15);\r\n      vec3 skyHorizon = vec3(0.15, 0.05, 0.25);\r\n      \r\n      vec3 color;\r\n      if (y > cityHeight) {\r\n        // Sky above city\r\n        float factor = (y - cityHeight) / (1.0 - cityHeight);\r\n        color = mix(skyHorizon, skyTop, factor);\r\n      } else {\r\n        // City/fog level\r\n        color = baseColor;\r\n        \r\n        // Add city fog with neon tint\r\n        float fogFactor = 1.0 - (y + 1.0) / (1.0 + cityHeight);\r\n        fogFactor = pow(fogFactor, 2.0);\r\n        \r\n        vec3 fogColor = mix(neonColor1, neonColor2, sin(time * 0.5) * 0.5 + 0.5) * 0.1;\r\n        color = mix(color, fogColor, fogFactor * fogDensity);\r\n      }\r\n      \r\n      // Add neon light streaks in sky\r\n      float streakNoise = fbm(vec2(direction.x * 10.0, direction.z * 8.0));\r\n      if (y > cityHeight) {\r\n        float streaks = sin(direction.x * 20.0 + time) * sin(direction.z * 15.0 + time * 0.7);\r\n        streaks = max(0.0, streaks);\r\n        streaks *= streakNoise;\r\n        \r\n        vec3 streakColor = mix(neonColor1, neonColor2, sin(time * 2.0) * 0.5 + 0.5);\r\n        color += streakColor * streaks * 0.05;\r\n      }\r\n      \r\n      // Add pulsing neon atmosphere\r\n      float pulse = sin(time * 3.0) * 0.02 + 0.98;\r\n      color *= pulse;\r\n      \r\n      // Add data stream effects\r\n      float dataStream = sin(direction.x * 50.0 - time * 10.0) * sin(direction.z * 30.0 - time * 7.0);\r\n      dataStream = smoothstep(0.8, 1.0, dataStream);\r\n      color += neonColor1 * dataStream * 0.02;\r\n      \r\n      gl_FragColor = vec4(color, 1.0);\r\n    }\r\n  `\r\n};"],"names":["neonCity","THREE.Color"],"mappings":"uCAQA,MAAAA,EAAe,CACb,KAAM,YACN,YAAa,6CACb,OAAQ,uBACR,QAAS,QACT,KAAM,CAAC,YAAa,OAAQ,OAAQ,YAAY,EAChD,KAAM,aAEN,SAAU,CACR,WAAY,CAAE,MAAO,IAAIC,EAAY,KAAQ,CAAC,EAC9C,WAAY,CAAE,MAAO,IAAIA,EAAY,QAAQ,CAAC,EAC9C,WAAY,CAAE,MAAO,EAAG,EACxB,WAAY,CAAE,MAAO,EAAG,CAC5B,EAEE,aAAc;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAYd,eAAgB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GA8ElB"}