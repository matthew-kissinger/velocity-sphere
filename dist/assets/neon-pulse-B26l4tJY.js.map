{"version":3,"file":"neon-pulse-B26l4tJY.js","sources":["../../src/shaders/neon-pulse.js"],"sourcesContent":["/**\r\n * Neon Pulse Shader\r\n * Pulsing neon track surface with electric edges\r\n * Perfect for underground cyberpunk racing\r\n */\r\n\r\nimport * as THREE from 'three';\r\n\r\nexport default {\r\n  name: 'neon-pulse',\r\n  description: 'Pulsing neon surface with electric edge glow',\r\n  author: 'Circuit Epsilon AI Agent',\r\n  version: '1.0.0',\r\n  tags: ['neon', 'cyberpunk', 'underground', 'glow', 'pulse'],\r\n  performance: 'good',\r\n  \r\n  uniforms: {\r\n    pulseSpeed: { value: 2.0 },\r\n    neonColor1: { value: new THREE.Color(0x00ffff) }, // Cyan\r\n    neonColor2: { value: new THREE.Color(0xff00ff) }, // Magenta\r\n    baseColor: { value: new THREE.Color(0x0a0a0a) }, // Dark base\r\n    edgeGlow: { value: 2.0 },\r\n    pulseIntensity: { value: 0.8 }\r\n  },\r\n  \r\n  vertexShader: `\r\n    varying vec3 vPosition;\r\n    varying vec3 vNormal;\r\n    varying vec2 vUv;\r\n    varying vec3 vWorldPosition;\r\n    varying vec3 vViewDirection;\r\n    \r\n    void main() {\r\n      vPosition = position;\r\n      vNormal = normalize(normalMatrix * normal);\r\n      vUv = uv;\r\n      \r\n      vec4 worldPosition = modelMatrix * vec4(position, 1.0);\r\n      vWorldPosition = worldPosition.xyz;\r\n      \r\n      vec4 mvPosition = modelViewMatrix * vec4(position, 1.0);\r\n      vViewDirection = normalize(-mvPosition.xyz);\r\n      \r\n      gl_Position = projectionMatrix * mvPosition;\r\n    }\r\n  `,\r\n  \r\n  fragmentShader: `\r\n    uniform float time;\r\n    uniform float pulseSpeed;\r\n    uniform vec3 neonColor1;\r\n    uniform vec3 neonColor2;\r\n    uniform vec3 baseColor;\r\n    uniform float edgeGlow;\r\n    uniform float pulseIntensity;\r\n    \r\n    varying vec3 vPosition;\r\n    varying vec3 vNormal;\r\n    varying vec2 vUv;\r\n    varying vec3 vWorldPosition;\r\n    varying vec3 vViewDirection;\r\n    \r\n    void main() {\r\n      // Edge detection for neon glow\r\n      float edge = 1.0 - abs(dot(vViewDirection, vNormal));\r\n      edge = pow(edge, 1.5) * edgeGlow;\r\n      \r\n      // Pulsing pattern\r\n      float pulse1 = sin(vWorldPosition.x * 0.5 + time * pulseSpeed) * 0.5 + 0.5;\r\n      float pulse2 = sin(vWorldPosition.z * 0.5 - time * pulseSpeed * 0.7) * 0.5 + 0.5;\r\n      float combinedPulse = pulse1 * pulse2;\r\n      \r\n      // Electric flow along track\r\n      float flow = sin(vWorldPosition.x * 2.0 - time * 4.0) * 0.5 + 0.5;\r\n      flow *= sin(vWorldPosition.z * 1.5 - time * 3.0) * 0.5 + 0.5;\r\n      flow = pow(flow, 2.0);\r\n      \r\n      // Mix neon colors based on position and time\r\n      float colorMix = sin(vWorldPosition.x * 0.1 + vWorldPosition.z * 0.1 + time) * 0.5 + 0.5;\r\n      vec3 neonColor = mix(neonColor1, neonColor2, colorMix);\r\n      \r\n      // Base surface color\r\n      vec3 surfaceColor = mix(baseColor, neonColor * 0.3, combinedPulse * pulseIntensity);\r\n      \r\n      // Add edge glow\r\n      vec3 edgeColor = neonColor * edge;\r\n      \r\n      // Add electric flow highlights\r\n      vec3 flowColor = neonColor * flow * 0.4;\r\n      \r\n      // Combine all effects\r\n      vec3 finalColor = surfaceColor + edgeColor + flowColor;\r\n      \r\n      // Add subtle grid pattern\r\n      float grid = sin(vUv.x * 50.0) * sin(vUv.y * 50.0);\r\n      grid = smoothstep(0.9, 1.0, grid) * 0.1;\r\n      finalColor += neonColor * grid;\r\n      \r\n      // Ensure minimum brightness for visibility\r\n      finalColor = max(finalColor, baseColor * 0.2);\r\n      \r\n      gl_FragColor = vec4(finalColor, 1.0);\r\n    }\r\n  `\r\n};"],"names":["neonPulse","THREE.Color"],"mappings":"uCAQA,MAAAA,EAAe,CACb,KAAM,aACN,YAAa,+CACb,OAAQ,2BACR,QAAS,QACT,KAAM,CAAC,OAAQ,YAAa,cAAe,OAAQ,OAAO,EAC1D,YAAa,OAEb,SAAU,CACR,WAAY,CAAE,MAAO,CAAG,EACxB,WAAY,CAAE,MAAO,IAAIC,EAAY,KAAQ,CAAC,EAC9C,WAAY,CAAE,MAAO,IAAIA,EAAY,QAAQ,CAAC,EAC9C,UAAW,CAAE,MAAO,IAAIA,EAAY,MAAQ,CAAC,EAC7C,SAAU,CAAE,MAAO,CAAG,EACtB,eAAgB,CAAE,MAAO,EAAG,CAChC,EAEE,aAAc;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAsBd,eAAgB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAyDlB"}