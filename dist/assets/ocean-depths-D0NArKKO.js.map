{"version":3,"file":"ocean-depths-D0NArKKO.js","sources":["../../src/skyboxes/ocean-depths.js"],"sourcesContent":["/**\n * Ocean Depths Skybox\n * Underwater atmosphere with light rays and ocean ambience\n * Pairs with ocean-waves shader for aquatic tracks\n */\n\nexport default {\n  name: 'ocean-depths',\n  description: 'Underwater ocean atmosphere with caustic light',\n  author: 'Circuit Beta AI Agent',\n  version: '1.0.0',\n  tags: ['ocean', 'underwater', 'aquatic', 'blue', 'serene'],\n  mood: 'tranquil',\n  \n  uniforms: {\n    surfaceColor: { value: 0.8 },\n    depthFade: { value: 0.7 },\n    lightRayIntensity: { value: 0.4 }\n  },\n  \n  vertexShader: `\n    varying vec3 vWorldPosition;\n    varying vec3 vPosition;\n    \n    void main() {\n      vec4 worldPosition = modelMatrix * vec4(position, 1.0);\n      vWorldPosition = worldPosition.xyz;\n      vPosition = position;\n      gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\n    }\n  `,\n  \n  fragmentShader: `\n    uniform float time;\n    uniform float surfaceColor;\n    uniform float depthFade;\n    uniform float lightRayIntensity;\n    \n    varying vec3 vWorldPosition;\n    varying vec3 vPosition;\n    \n    // Simple noise for caustic effects\n    float hash(vec2 p) {\n      return fract(sin(dot(p, vec2(127.1, 311.7))) * 43758.5453123);\n    }\n    \n    float noise(vec2 p) {\n      vec2 i = floor(p);\n      vec2 f = fract(p);\n      vec2 u = f * f * (3.0 - 2.0 * f);\n      \n      return mix(mix(hash(i + vec2(0.0, 0.0)), \n                     hash(i + vec2(1.0, 0.0)), u.x),\n                 mix(hash(i + vec2(0.0, 1.0)), \n                     hash(i + vec2(1.0, 1.0)), u.x), u.y);\n    }\n    \n    void main() {\n      vec3 direction = normalize(vWorldPosition);\n      float y = direction.y;\n      \n      // Ocean depth gradient colors\n      vec3 surfaceWater = vec3(0.0, 0.6 * surfaceColor, 0.8 * surfaceColor);\n      vec3 midWater = vec3(0.0, 0.3, 0.5);\n      vec3 deepWater = vec3(0.0, 0.1, 0.2);\n      vec3 abyssWater = vec3(0.0, 0.05, 0.1);\n      \n      vec3 color;\n      if (y > 0.5) {\n        // Near surface - lighter blues with sun rays\n        float factor = (y - 0.5) / 0.5;\n        color = mix(midWater, surfaceWater, factor);\n        \n        // Add caustic light patterns near surface\n        float caustics = noise(direction.xz * 10.0 + time * 0.5);\n        caustics = pow(caustics, 2.0);\n        color += vec3(0.1, 0.2, 0.3) * caustics * factor * lightRayIntensity;\n      } else if (y > 0.0) {\n        // Mid water\n        float factor = y / 0.5;\n        color = mix(deepWater, midWater, factor);\n      } else if (y > -0.5) {\n        // Deep water\n        float factor = (y + 0.5) / 0.5;\n        color = mix(abyssWater, deepWater, factor);\n      } else {\n        // Abyss\n        color = abyssWater;\n      }\n      \n      // Add subtle light rays from above\n      if (y > -0.3) {\n        float rayAngle = dot(direction, vec3(0.0, 1.0, 0.0));\n        float rays = pow(max(0.0, rayAngle), 8.0);\n        \n        // Animate the rays\n        rays *= sin(time * 2.0 + direction.x * 5.0) * 0.3 + 0.7;\n        rays *= sin(time * 1.5 - direction.z * 4.0) * 0.3 + 0.7;\n        \n        color += vec3(0.1, 0.15, 0.2) * rays * lightRayIntensity;\n      }\n      \n      // Add particle effect for underwater ambience\n      float particles = noise(direction.xy * 50.0 + time * 0.1);\n      particles = smoothstep(0.95, 1.0, particles);\n      color += vec3(0.05, 0.1, 0.15) * particles;\n      \n      // Apply depth fade\n      color *= depthFade + (1.0 - depthFade) * (y * 0.5 + 0.5);\n      \n      gl_FragColor = vec4(color, 1.0);\n    }\n  `\n};"],"names":["oceanDepths"],"mappings":"AAMA,MAAAA,EAAe,CACb,KAAM,eACN,YAAa,iDACb,OAAQ,wBACR,QAAS,QACT,KAAM,CAAC,QAAS,aAAc,UAAW,OAAQ,QAAQ,EACzD,KAAM,WAEN,SAAU,CACR,aAAc,CAAE,MAAO,EAAG,EAC1B,UAAW,CAAE,MAAO,EAAG,EACvB,kBAAmB,CAAE,MAAO,EAAG,CACnC,EAEE,aAAc;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAYd,eAAgB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAiFlB"}