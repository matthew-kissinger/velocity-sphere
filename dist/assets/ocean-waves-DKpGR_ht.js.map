{"version":3,"file":"ocean-waves-DKpGR_ht.js","sources":["../../src/shaders/ocean-waves.js"],"sourcesContent":["/**\n * Ocean Waves Shader\n * Dynamic ocean surface with flowing water and foam effects\n * Perfect for underwater/ocean themed tracks\n */\n\nimport * as THREE from 'three';\n\nexport default {\n  name: 'ocean-waves',\n  description: 'Dynamic ocean waves with flowing water and foam',\n  author: 'Circuit Beta AI Agent',\n  version: '1.0.0',\n  tags: ['ocean', 'water', 'waves', 'aquatic', 'flowing'],\n  performance: 'good',\n  \n  uniforms: {\n    deepColor: { value: new THREE.Color(0x003366) },\n    shallowColor: { value: new THREE.Color(0x0099cc) },\n    foamColor: { value: new THREE.Color(0xccffff) },\n    waveSpeed: { value: 0.8 },\n    waveFrequency: { value: 2.0 },\n    waveAmplitude: { value: 0.3 }\n  },\n  \n  vertexShader: `\n    varying vec3 vPosition;\n    varying vec3 vNormal;\n    varying vec2 vUv;\n    varying vec3 vWorldPosition;\n    \n    void main() {\n      vPosition = position;\n      vNormal = normalize(normalMatrix * normal);\n      vUv = uv;\n      \n      vec4 worldPosition = modelMatrix * vec4(position, 1.0);\n      vWorldPosition = worldPosition.xyz;\n      \n      gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\n    }\n  `,\n  \n  fragmentShader: `\n    uniform float time;\n    uniform vec3 deepColor;\n    uniform vec3 shallowColor;\n    uniform vec3 foamColor;\n    uniform float waveSpeed;\n    uniform float waveFrequency;\n    uniform float waveAmplitude;\n    \n    varying vec3 vPosition;\n    varying vec3 vNormal;\n    varying vec2 vUv;\n    varying vec3 vWorldPosition;\n    \n    // Simple noise function\n    float hash(vec2 p) {\n      return fract(sin(dot(p, vec2(127.1, 311.7))) * 43758.5453123);\n    }\n    \n    float noise(vec2 p) {\n      vec2 i = floor(p);\n      vec2 f = fract(p);\n      vec2 u = f * f * (3.0 - 2.0 * f);\n      \n      return mix(mix(hash(i + vec2(0.0, 0.0)), \n                     hash(i + vec2(1.0, 0.0)), u.x),\n                 mix(hash(i + vec2(0.0, 1.0)), \n                     hash(i + vec2(1.0, 1.0)), u.x), u.y);\n    }\n    \n    float fbm(vec2 p) {\n      float value = 0.0;\n      float amplitude = 0.5;\n      \n      for(int i = 0; i < 4; i++) {\n        value += amplitude * noise(p);\n        p *= 2.0;\n        amplitude *= 0.5;\n      }\n      \n      return value;\n    }\n    \n    void main() {\n      vec2 uv = vWorldPosition.xz * 0.05;\n      \n      // Create flowing water effect\n      vec2 flow1 = uv + vec2(time * waveSpeed * 0.3, time * waveSpeed * 0.1);\n      vec2 flow2 = uv + vec2(-time * waveSpeed * 0.2, time * waveSpeed * 0.15);\n      \n      // Generate wave patterns\n      float wave1 = sin(flow1.x * waveFrequency + flow1.y * waveFrequency * 0.5) * waveAmplitude;\n      float wave2 = sin(flow2.x * waveFrequency * 1.5 - flow2.y * waveFrequency * 0.7) * waveAmplitude * 0.7;\n      float wavePattern = wave1 + wave2;\n      \n      // Add noise for more organic look\n      float noisePattern = fbm(flow1 * 3.0) * 0.3;\n      wavePattern += noisePattern;\n      \n      // Create foam on wave peaks\n      float foam = smoothstep(0.7, 0.9, wavePattern);\n      foam += smoothstep(0.5, 0.6, fbm(flow1 * 8.0)) * 0.3;\n      \n      // Depth-based color mixing\n      float depth = fbm(uv * 2.0) * 0.5 + 0.5;\n      vec3 waterColor = mix(deepColor, shallowColor, depth + wavePattern * 0.3);\n      \n      // Add foam to final color\n      vec3 color = mix(waterColor, foamColor, foam * 0.6);\n      \n      // Add subtle animation to brightness\n      float pulse = sin(time * 2.0 + wavePattern * 5.0) * 0.1 + 0.9;\n      color *= pulse;\n      \n      // Apply lighting\n      float lighting = dot(vNormal, normalize(vec3(1.0, 1.0, 1.0))) * 0.5 + 0.5;\n      color *= lighting;\n      \n      // Add some specular highlights for water shine\n      vec3 viewDir = normalize(cameraPosition - vWorldPosition);\n      vec3 lightDir = normalize(vec3(1.0, 1.0, 1.0));\n      vec3 halfwayDir = normalize(lightDir + viewDir);\n      float spec = pow(max(dot(vNormal, halfwayDir), 0.0), 32.0);\n      color += vec3(0.2, 0.3, 0.4) * spec * 0.5;\n      \n      gl_FragColor = vec4(color, 1.0);\n    }\n  `\n};"],"names":["oceanWaves","THREE.Color"],"mappings":"uCAQA,MAAAA,EAAe,CACb,KAAM,cACN,YAAa,kDACb,OAAQ,wBACR,QAAS,QACT,KAAM,CAAC,QAAS,QAAS,QAAS,UAAW,SAAS,EACtD,YAAa,OAEb,SAAU,CACR,UAAW,CAAE,MAAO,IAAIC,EAAY,KAAQ,CAAC,EAC7C,aAAc,CAAE,MAAO,IAAIA,EAAY,KAAQ,CAAC,EAChD,UAAW,CAAE,MAAO,IAAIA,EAAY,QAAQ,CAAC,EAC7C,UAAW,CAAE,MAAO,EAAG,EACvB,cAAe,CAAE,MAAO,CAAG,EAC3B,cAAe,CAAE,MAAO,EAAG,CAC/B,EAEE,aAAc;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAkBd,eAAgB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAwFlB"}