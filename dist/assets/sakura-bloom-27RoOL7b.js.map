{"version":3,"file":"sakura-bloom-27RoOL7b.js","sources":["../../src/shaders/sakura-bloom.js"],"sourcesContent":["/**\r\n * Sakura Bloom Shader\r\n * Cherry blossom petal effect with gentle pink gradients\r\n * Creates a serene, beautiful racing surface\r\n */\r\n\r\nexport default {\r\n  name: 'sakura-bloom',\r\n  description: 'Cherry blossom petals flowing across the track',\r\n  author: 'Velocity Sphere Team',\r\n  version: '1.0.0',\r\n  tags: ['sakura', 'cherry-blossom', 'peaceful', 'circuit-tranquil'],\r\n  performance: 'good',\r\n  \r\n  uniforms: {\r\n    petalColor1: { value: [1.0, 0.85, 0.9] },\r\n    petalColor2: { value: [0.95, 0.75, 0.85] },\r\n    baseColor: { value: [0.3, 0.25, 0.3] },\r\n    petalDensity: { value: 3.0 },\r\n    windSpeed: { value: 0.3 },\r\n    petalSize: { value: 0.8 }\r\n  },\r\n  \r\n  vertexShader: `\r\n    varying vec3 vPosition;\r\n    varying vec3 vNormal;\r\n    varying vec2 vUv;\r\n    varying vec3 vWorldPosition;\r\n    \r\n    void main() {\r\n      vPosition = position;\r\n      vNormal = normalize(normalMatrix * normal);\r\n      vUv = uv;\r\n      \r\n      vec4 worldPosition = modelMatrix * vec4(position, 1.0);\r\n      vWorldPosition = worldPosition.xyz;\r\n      \r\n      gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\r\n    }\r\n  `,\r\n  \r\n  fragmentShader: `\r\n    uniform float time;\r\n    uniform vec3 petalColor1;\r\n    uniform vec3 petalColor2;\r\n    uniform vec3 baseColor;\r\n    uniform float petalDensity;\r\n    uniform float windSpeed;\r\n    uniform float petalSize;\r\n    \r\n    varying vec3 vPosition;\r\n    varying vec3 vNormal;\r\n    varying vec2 vUv;\r\n    varying vec3 vWorldPosition;\r\n    \r\n    float random(vec2 st) {\r\n      return fract(sin(dot(st.xy, vec2(12.9898, 78.233))) * 43758.5453123);\r\n    }\r\n    \r\n    float petal(vec2 p, float size) {\r\n      // Create petal shape\r\n      float d = length(p);\r\n      float petal = 1.0 - smoothstep(0.0, size, d);\r\n      petal *= 1.0 - smoothstep(0.0, size * 0.3, abs(p.x));\r\n      return petal;\r\n    }\r\n    \r\n    void main() {\r\n      vec3 color = baseColor;\r\n      \r\n      // Create flowing petals\r\n      for (float i = 0.0; i < 3.0; i++) {\r\n        vec2 offset = vec2(\r\n          sin(time * windSpeed + i * 2.1) * 0.3,\r\n          cos(time * windSpeed * 0.7 + i * 1.7) * 0.2\r\n        );\r\n        \r\n        vec2 petalPos = fract(vWorldPosition.xz * petalDensity + offset + vec2(i * 0.33));\r\n        petalPos = petalPos * 2.0 - 1.0;\r\n        \r\n        float petalMask = petal(petalPos, petalSize);\r\n        \r\n        if (petalMask > 0.1) {\r\n          vec3 petalCol = mix(petalColor2, petalColor1, random(vec2(i, floor(time + i))));\r\n          color = mix(color, petalCol, petalMask * 0.8);\r\n        }\r\n      }\r\n      \r\n      // Add subtle wind streaks\r\n      float streaks = sin(vWorldPosition.x * 10.0 - time * 2.0) * 0.5 + 0.5;\r\n      streaks *= sin(vWorldPosition.z * 8.0 - time * 1.5) * 0.5 + 0.5;\r\n      color = mix(color, petalColor2 * 0.5, streaks * 0.1);\r\n      \r\n      // Soft lighting\r\n      float lighting = dot(vNormal, normalize(vec3(0.5, 1.0, 0.3))) * 0.5 + 0.5;\r\n      color *= lighting;\r\n      \r\n      // Add subtle shimmer\r\n      float shimmer = sin(time * 4.0 + vWorldPosition.x * 20.0) * 0.02 + 1.0;\r\n      color *= shimmer;\r\n      \r\n      gl_FragColor = vec4(color, 1.0);\r\n    }\r\n  `\r\n};"],"names":["sakuraBloom"],"mappings":"AAMA,MAAAA,EAAe,CACb,KAAM,eACN,YAAa,iDACb,OAAQ,uBACR,QAAS,QACT,KAAM,CAAC,SAAU,iBAAkB,WAAY,kBAAkB,EACjE,YAAa,OAEb,SAAU,CACR,YAAa,CAAE,MAAO,CAAC,EAAK,IAAM,EAAG,CAAC,EACtC,YAAa,CAAE,MAAO,CAAC,IAAM,IAAM,GAAI,CAAC,EACxC,UAAW,CAAE,MAAO,CAAC,GAAK,IAAM,EAAG,CAAC,EACpC,aAAc,CAAE,MAAO,CAAG,EAC1B,UAAW,CAAE,MAAO,EAAG,EACvB,UAAW,CAAE,MAAO,EAAG,CAC3B,EAEE,aAAc;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAkBd,eAAgB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GA+DlB"}