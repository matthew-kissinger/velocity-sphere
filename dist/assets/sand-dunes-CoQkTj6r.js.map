{"version":3,"file":"sand-dunes-CoQkTj6r.js","sources":["../../src/shaders/sand-dunes.js"],"sourcesContent":["/**\n * Sand Dunes Shader\n * Desert sand with heat shimmer and dune patterns\n * Perfect for desert/sandy themed tracks\n */\n\nimport * as THREE from 'three';\n\nexport default {\n  name: 'sand-dunes',\n  description: 'Desert sand surface with dune patterns and heat effects',\n  author: 'Circuit Beta AI Agent',\n  version: '1.0.0',\n  tags: ['sand', 'desert', 'dunes', 'heat', 'sandy'],\n  performance: 'good',\n  \n  uniforms: {\n    sandColor: { value: new THREE.Color(0xf4a460) },\n    shadowColor: { value: new THREE.Color(0xcd853f) },\n    highlightColor: { value: new THREE.Color(0xffd700) },\n    heatSpeed: { value: 0.5 },\n    duneScale: { value: 3.0 },\n    shimmerIntensity: { value: 0.3 }\n  },\n  \n  vertexShader: `\n    varying vec3 vPosition;\n    varying vec3 vNormal;\n    varying vec2 vUv;\n    varying vec3 vWorldPosition;\n    \n    void main() {\n      vPosition = position;\n      vNormal = normalize(normalMatrix * normal);\n      vUv = uv;\n      \n      vec4 worldPosition = modelMatrix * vec4(position, 1.0);\n      vWorldPosition = worldPosition.xyz;\n      \n      gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\n    }\n  `,\n  \n  fragmentShader: `\n    uniform float time;\n    uniform vec3 sandColor;\n    uniform vec3 shadowColor;\n    uniform vec3 highlightColor;\n    uniform float heatSpeed;\n    uniform float duneScale;\n    uniform float shimmerIntensity;\n    \n    varying vec3 vPosition;\n    varying vec3 vNormal;\n    varying vec2 vUv;\n    varying vec3 vWorldPosition;\n    \n    // Noise functions for sand texture\n    float hash(vec2 p) {\n      return fract(sin(dot(p, vec2(127.1, 311.7))) * 43758.5453123);\n    }\n    \n    float noise(vec2 p) {\n      vec2 i = floor(p);\n      vec2 f = fract(p);\n      vec2 u = f * f * (3.0 - 2.0 * f);\n      \n      return mix(mix(hash(i + vec2(0.0, 0.0)), \n                     hash(i + vec2(1.0, 0.0)), u.x),\n                 mix(hash(i + vec2(0.0, 1.0)), \n                     hash(i + vec2(1.0, 1.0)), u.x), u.y);\n    }\n    \n    float fbm(vec2 p) {\n      float value = 0.0;\n      float amplitude = 0.5;\n      \n      for(int i = 0; i < 5; i++) {\n        value += amplitude * noise(p);\n        p *= 2.0;\n        amplitude *= 0.5;\n      }\n      \n      return value;\n    }\n    \n    void main() {\n      vec2 uv = vWorldPosition.xz * 0.1;\n      \n      // Create dune patterns\n      float dunes = fbm(uv * duneScale) * 0.5 + 0.5;\n      dunes = pow(dunes, 1.5); // Make dunes more pronounced\n      \n      // Add finer sand texture\n      float sandTexture = fbm(uv * 20.0) * 0.3;\n      \n      // Create ripples on sand surface\n      float ripples = sin(uv.x * 30.0 + uv.y * 10.0) * 0.05;\n      ripples += sin(uv.x * 50.0 - uv.y * 20.0) * 0.03;\n      \n      // Combine patterns\n      float pattern = dunes + sandTexture + ripples;\n      \n      // Mix colors based on pattern\n      vec3 color = mix(shadowColor, sandColor, pattern);\n      \n      // Add highlights on dune peaks\n      float highlights = smoothstep(0.7, 0.9, dunes);\n      color = mix(color, highlightColor, highlights * 0.3);\n      \n      // Heat shimmer effect\n      float shimmer = sin(time * heatSpeed * 10.0 + pattern * 20.0) * shimmerIntensity;\n      shimmer *= (1.0 - vNormal.y) * 0.5; // More shimmer on slopes\n      color += vec3(shimmer * 0.1, shimmer * 0.05, 0.0);\n      \n      // Apply lighting\n      float lighting = dot(vNormal, normalize(vec3(1.0, 1.0, 0.5))) * 0.5 + 0.5;\n      color *= lighting;\n      \n      // Add subtle sparkle effect (like sun on sand crystals)\n      float sparkle = pow(noise(uv * 100.0 + time * 0.1), 8.0);\n      color += vec3(0.2, 0.15, 0.1) * sparkle;\n      \n      // Heat haze distortion at distance\n      float distanceFactor = length(vWorldPosition.xz) * 0.01;\n      color += vec3(0.1, 0.05, 0.0) * sin(distanceFactor + time * heatSpeed) * shimmerIntensity * 0.5;\n      \n      gl_FragColor = vec4(color, 1.0);\n    }\n  `\n};"],"names":["sandDunes","THREE.Color"],"mappings":"uCAQA,MAAAA,EAAe,CACb,KAAM,aACN,YAAa,0DACb,OAAQ,wBACR,QAAS,QACT,KAAM,CAAC,OAAQ,SAAU,QAAS,OAAQ,OAAO,EACjD,YAAa,OAEb,SAAU,CACR,UAAW,CAAE,MAAO,IAAIC,EAAY,QAAQ,CAAC,EAC7C,YAAa,CAAE,MAAO,IAAIA,EAAY,QAAQ,CAAC,EAC/C,eAAgB,CAAE,MAAO,IAAIA,EAAY,QAAQ,CAAC,EAClD,UAAW,CAAE,MAAO,EAAG,EACvB,UAAW,CAAE,MAAO,CAAG,EACvB,iBAAkB,CAAE,MAAO,EAAG,CAClC,EAEE,aAAc;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAkBd,eAAgB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAuFlB"}