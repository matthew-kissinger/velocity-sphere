{"version":3,"file":"space-deep-eyJKQFyj.js","sources":["../../src/skyboxes/space-deep.js"],"sourcesContent":["/**\r\n * Deep Space Skybox\r\n * Dark space with twinkling stars and nebula\r\n * Perfect for mysterious/technical tracks\r\n */\r\n\r\nimport * as THREE from 'three';\r\n\r\nexport default {\r\n  name: 'space-deep',\r\n  description: 'Deep space with stars and distant nebula',\r\n  author: 'Velocity Sphere Team',\r\n  version: '1.0.0',\r\n  tags: ['space', 'stars', 'dark', 'mysterious'],\r\n  mood: 'mysterious',\r\n  \r\n  uniforms: {\r\n    starDensity: { value: 100.0 },\r\n    nebulaColor: { value: new THREE.Color(0x001144) },\r\n    starBrightness: { value: 0.8 }\r\n  },\r\n  \r\n  vertexShader: `\r\n    varying vec3 vWorldPosition;\r\n    varying vec3 vPosition;\r\n    \r\n    void main() {\r\n      vec4 worldPosition = modelMatrix * vec4(position, 1.0);\r\n      vWorldPosition = worldPosition.xyz;\r\n      vPosition = position;\r\n      gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\r\n    }\r\n  `,\r\n  \r\n  fragmentShader: `\r\n    uniform float time;\r\n    uniform float starDensity;\r\n    uniform vec3 nebulaColor;\r\n    uniform float starBrightness;\r\n    \r\n    varying vec3 vWorldPosition;\r\n    varying vec3 vPosition;\r\n    \r\n    // Noise function for stars\r\n    float random(vec3 pos) {\r\n      return fract(sin(dot(pos, vec3(12.9898, 78.233, 54.321))) * 43758.5453);\r\n    }\r\n    \r\n    // Star field generation\r\n    float stars(vec3 direction) {\r\n      vec3 pos = direction * starDensity;\r\n      vec3 floorPos = floor(pos);\r\n      vec3 fractPos = fract(pos);\r\n      \r\n      float star = 0.0;\r\n      for(int x = -1; x <= 1; x++) {\r\n        for(int y = -1; y <= 1; y++) {\r\n          for(int z = -1; z <= 1; z++) {\r\n            vec3 neighbor = floorPos + vec3(x, y, z);\r\n            float rand = random(neighbor);\r\n            \r\n            if(rand > 0.98) { // Only 2% chance for star\r\n              vec3 starPos = neighbor + vec3(random(neighbor * 2.0), random(neighbor * 3.0), random(neighbor * 4.0));\r\n              float dist = length(pos - starPos);\r\n              \r\n              if(dist < 0.1) {\r\n                float brightness = (0.1 - dist) * 10.0;\r\n                brightness *= (0.5 + 0.5 * sin(time * 2.0 + rand * 100.0)); // Twinkling\r\n                star += brightness * starBrightness;\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n      return star;\r\n    }\r\n    \r\n    void main() {\r\n      vec3 direction = normalize(vWorldPosition);\r\n      \r\n      // Base space color - very dark\r\n      vec3 spaceColor = vec3(0.001, 0.002, 0.005);\r\n      \r\n      // Add subtle nebula gradient\r\n      float nebulaNoise = sin(direction.x * 2.0) * cos(direction.y * 3.0) * sin(direction.z * 1.5);\r\n      nebulaNoise = (nebulaNoise + 1.0) * 0.5; // Normalize to 0-1\r\n      vec3 nebula = nebulaColor * nebulaNoise * 0.3;\r\n      \r\n      // Add stars\r\n      float starField = stars(direction);\r\n      \r\n      // Combine\r\n      vec3 color = spaceColor + nebula + vec3(starField);\r\n      \r\n      // Add subtle time-based shimmer to nebula\r\n      float shimmer = sin(time * 0.5 + direction.x + direction.y) * 0.02 + 0.98;\r\n      color *= shimmer;\r\n      \r\n      gl_FragColor = vec4(color, 1.0);\r\n    }\r\n  `\r\n};"],"names":["spaceDeep","THREE.Color"],"mappings":"uCAQA,MAAAA,EAAe,CACb,KAAM,aACN,YAAa,2CACb,OAAQ,uBACR,QAAS,QACT,KAAM,CAAC,QAAS,QAAS,OAAQ,YAAY,EAC7C,KAAM,aAEN,SAAU,CACR,YAAa,CAAE,MAAO,GAAK,EAC3B,YAAa,CAAE,MAAO,IAAIC,EAAY,IAAQ,CAAC,EAC/C,eAAgB,CAAE,MAAO,EAAG,CAChC,EAEE,aAAc;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAYd,eAAgB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAmElB"}