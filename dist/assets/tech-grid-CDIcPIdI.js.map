{"version":3,"file":"tech-grid-CDIcPIdI.js","sources":["../../src/shaders/tech-grid.js"],"sourcesContent":["/**\r\n * Tech Grid Shader\r\n * Futuristic grid pattern with neon highlights\r\n * Great for technical/cyberpunk themed tracks\r\n */\r\n\r\nimport * as THREE from 'three';\r\n\r\nexport default {\r\n  name: 'tech-grid',\r\n  description: 'Futuristic grid pattern with neon highlights and data streams',\r\n  author: 'Velocity Sphere Team',\r\n  version: '1.0.0',\r\n  tags: ['tech', 'grid', 'cyberpunk', 'neon', 'futuristic'],\r\n  performance: 'good',\r\n  \r\n  uniforms: {\r\n    gridScale: { value: 20.0 },\r\n    gridColor: { value: new THREE.Color(0x00ffff) },\r\n    backgroundColor: { value: new THREE.Color(0x001122) },\r\n    pulseSpeed: { value: 2.0 },\r\n    lineWidth: { value: 0.1 }\r\n  },\r\n  \r\n  vertexShader: `\r\n    varying vec3 vPosition;\r\n    varying vec3 vNormal;\r\n    varying vec2 vUv;\r\n    varying vec3 vWorldPosition;\r\n    \r\n    void main() {\r\n      vPosition = position;\r\n      vNormal = normalize(normalMatrix * normal);\r\n      vUv = uv;\r\n      \r\n      vec4 worldPosition = modelMatrix * vec4(position, 1.0);\r\n      vWorldPosition = worldPosition.xyz;\r\n      \r\n      gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\r\n    }\r\n  `,\r\n  \r\n  fragmentShader: `\r\n    uniform float time;\r\n    uniform float gridScale;\r\n    uniform vec3 gridColor;\r\n    uniform vec3 backgroundColor;\r\n    uniform float pulseSpeed;\r\n    uniform float lineWidth;\r\n    \r\n    varying vec3 vPosition;\r\n    varying vec3 vNormal;\r\n    varying vec2 vUv;\r\n    varying vec3 vWorldPosition;\r\n    \r\n    float grid(vec2 uv, float scale) {\r\n      vec2 grid = abs(fract(uv * scale) - 0.5) / fwidth(uv * scale);\r\n      float line = min(grid.x, grid.y);\r\n      return 1.0 - min(line, 1.0);\r\n    }\r\n    \r\n    void main() {\r\n      // Create grid coordinates from world position\r\n      vec2 gridUV = vWorldPosition.xz * 0.1;\r\n      \r\n      // Create main grid\r\n      float mainGrid = grid(gridUV, gridScale);\r\n      \r\n      // Create secondary grid for detail\r\n      float detailGrid = grid(gridUV, gridScale * 4.0) * 0.3;\r\n      \r\n      // Animate grid intensity\r\n      float pulse = sin(time * pulseSpeed) * 0.5 + 0.5;\r\n      \r\n      // Add data stream effect\r\n      float stream1 = sin(gridUV.x * 10.0 - time * 5.0) * 0.5 + 0.5;\r\n      float stream2 = sin(gridUV.y * 8.0 - time * 3.0) * 0.5 + 0.5;\r\n      float streams = (stream1 + stream2) * 0.2;\r\n      \r\n      // Combine grid elements\r\n      float gridIntensity = mainGrid + detailGrid + streams;\r\n      gridIntensity *= (0.7 + pulse * 0.3);\r\n      \r\n      // Mix colors\r\n      vec3 color = mix(backgroundColor, gridColor, gridIntensity);\r\n      \r\n      // Add lighting\r\n      float lighting = dot(vNormal, normalize(vec3(1.0, 1.0, 1.0))) * 0.5 + 0.5;\r\n      color *= lighting;\r\n      \r\n      // Add glow effect on grid lines\r\n      color += gridColor * gridIntensity * 0.3;\r\n      \r\n      gl_FragColor = vec4(color, 1.0);\r\n    }\r\n  `\r\n};"],"names":["techGrid","THREE.Color"],"mappings":"uCAQA,MAAAA,EAAe,CACb,KAAM,YACN,YAAa,gEACb,OAAQ,uBACR,QAAS,QACT,KAAM,CAAC,OAAQ,OAAQ,YAAa,OAAQ,YAAY,EACxD,YAAa,OAEb,SAAU,CACR,UAAW,CAAE,MAAO,EAAI,EACxB,UAAW,CAAE,MAAO,IAAIC,EAAY,KAAQ,CAAC,EAC7C,gBAAiB,CAAE,MAAO,IAAIA,EAAY,IAAQ,CAAC,EACnD,WAAY,CAAE,MAAO,CAAG,EACxB,UAAW,CAAE,MAAO,EAAG,CAC3B,EAEE,aAAc;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAkBd,eAAgB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAsDlB"}