{"version":3,"file":"underground-glow-BkI4wH7U.js","sources":["../../src/shaders/underground-glow.js"],"sourcesContent":["/**\r\n * Underground Glow Shader\r\n * Glowing rail shader for dark tunnel visibility\r\n * Essential for maintaining visual clarity in deep underground sections\r\n */\r\n\r\nimport * as THREE from 'three';\r\n\r\nexport default {\r\n  name: 'underground-glow',\r\n  description: 'Glowing rails for enhanced visibility in dark tunnels',\r\n  author: 'Circuit Epsilon AI Agent',\r\n  version: '1.0.0',\r\n  tags: ['glow', 'rails', 'underground', 'visibility', 'dark'],\r\n  performance: 'excellent',\r\n  \r\n  uniforms: {\r\n    glowColor1: { value: new THREE.Color(0x00ffaa) }, // Cyan-green glow\r\n    glowColor2: { value: new THREE.Color(0xff00aa) }, // Magenta glow\r\n    coreColor: { value: new THREE.Color(0xffffff) }, // White core\r\n    surfaceColor: { value: new THREE.Color(0x001122) }, // Dark surface\r\n    glowIntensity: { value: 2.5 },\r\n    pulseSpeed: { value: 2.0 },\r\n    edgeWidth: { value: 0.15 }\r\n  },\r\n  \r\n  vertexShader: `\r\n    varying vec3 vPosition;\r\n    varying vec3 vNormal;\r\n    varying vec2 vUv;\r\n    varying vec3 vWorldPosition;\r\n    varying vec3 vViewDirection;\r\n    \r\n    void main() {\r\n      vPosition = position;\r\n      vNormal = normalize(normalMatrix * normal);\r\n      vUv = uv;\r\n      \r\n      vec4 worldPosition = modelMatrix * vec4(position, 1.0);\r\n      vWorldPosition = worldPosition.xyz;\r\n      \r\n      vec4 mvPosition = modelViewMatrix * vec4(position, 1.0);\r\n      vViewDirection = normalize(-mvPosition.xyz);\r\n      \r\n      gl_Position = projectionMatrix * mvPosition;\r\n    }\r\n  `,\r\n  \r\n  fragmentShader: `\r\n    uniform float time;\r\n    uniform vec3 glowColor1;\r\n    uniform vec3 glowColor2;\r\n    uniform vec3 coreColor;\r\n    uniform vec3 surfaceColor;\r\n    uniform float glowIntensity;\r\n    uniform float pulseSpeed;\r\n    uniform float edgeWidth;\r\n    \r\n    varying vec3 vPosition;\r\n    varying vec3 vNormal;\r\n    varying vec2 vUv;\r\n    varying vec3 vWorldPosition;\r\n    varying vec3 vViewDirection;\r\n    \r\n    void main() {\r\n      // Calculate edge distance for rail glow\r\n      float edgeDistance = min(vUv.x, 1.0 - vUv.x);\r\n      \r\n      // Create glowing rail edges\r\n      float railGlow = 1.0 - smoothstep(0.0, edgeWidth, edgeDistance);\r\n      \r\n      // Pulse effect\r\n      float pulse = sin(vWorldPosition.x * 0.2 + time * pulseSpeed) * 0.3 + 0.7;\r\n      \r\n      // Color mixing based on position\r\n      float colorMix = sin(vWorldPosition.x * 0.1 + vWorldPosition.z * 0.1 + time * 0.5) * 0.5 + 0.5;\r\n      vec3 glowColor = mix(glowColor1, glowColor2, colorMix);\r\n      \r\n      // Core glow (bright center of rails)\r\n      float coreGlow = 1.0 - smoothstep(0.0, edgeWidth * 0.5, edgeDistance);\r\n      \r\n      // Base surface\r\n      vec3 color = surfaceColor;\r\n      \r\n      // Add rail glow\r\n      vec3 railColor = mix(glowColor, coreColor, coreGlow * 0.5);\r\n      color += railColor * railGlow * glowIntensity * pulse;\r\n      \r\n      // Fresnel edge glow for additional visibility\r\n      float fresnel = 1.0 - abs(dot(vViewDirection, vNormal));\r\n      fresnel = pow(fresnel, 2.0);\r\n      color += glowColor * fresnel * 0.3;\r\n      \r\n      // Center line marking\r\n      float centerLine = 1.0 - smoothstep(0.48, 0.52, vUv.x);\r\n      color += glowColor * centerLine * 0.2;\r\n      \r\n      // Energy flow effect along rails\r\n      float flow = sin(vWorldPosition.x * 5.0 - time * 8.0);\r\n      flow = smoothstep(0.5, 1.0, flow) * railGlow;\r\n      color += glowColor * flow * 0.3;\r\n      \r\n      // Direction indicators (arrows)\r\n      float arrow = mod(vWorldPosition.x * 0.5 - time * 2.0, 2.0);\r\n      arrow = smoothstep(0.0, 0.2, arrow) * (1.0 - smoothstep(0.8, 1.0, arrow));\r\n      arrow *= centerLine;\r\n      color += coreColor * arrow * 0.5;\r\n      \r\n      // Ensure minimum visibility\r\n      color = max(color, surfaceColor * 0.2 + glowColor * 0.1);\r\n      \r\n      gl_FragColor = vec4(color, 1.0);\r\n    }\r\n  `\r\n};"],"names":["undergroundGlow","THREE.Color"],"mappings":"uCAQA,MAAAA,EAAe,CACb,KAAM,mBACN,YAAa,wDACb,OAAQ,2BACR,QAAS,QACT,KAAM,CAAC,OAAQ,QAAS,cAAe,aAAc,MAAM,EAC3D,YAAa,YAEb,SAAU,CACR,WAAY,CAAE,MAAO,IAAIC,EAAY,KAAQ,CAAC,EAC9C,WAAY,CAAE,MAAO,IAAIA,EAAY,QAAQ,CAAC,EAC9C,UAAW,CAAE,MAAO,IAAIA,EAAY,QAAQ,CAAC,EAC7C,aAAc,CAAE,MAAO,IAAIA,EAAY,IAAQ,CAAC,EAChD,cAAe,CAAE,MAAO,GAAG,EAC3B,WAAY,CAAE,MAAO,CAAG,EACxB,UAAW,CAAE,MAAO,GAAI,CAC5B,EAEE,aAAc;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAsBd,eAAgB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAkElB"}